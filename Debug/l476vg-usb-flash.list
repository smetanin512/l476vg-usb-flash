
l476vg-usb-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800d0d8  0800d0d8  0001d0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d824  0800d824  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d824  0800d824  0001d824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d82c  0800d82c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d82c  0800d82c  0001d82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d830  0800d830  0001d830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800d834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cbc  20000090  0800d8c4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d4c  0800d8c4  00020d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003235f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000567b  00000000  00000000  0005241f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00057aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  00059330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce48  00000000  00000000  0005a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023043  00000000  00000000  00087840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf92  00000000  00000000  000aa883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a5815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa8  00000000  00000000  001a5868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0c0 	.word	0x0800d0c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800d0c0 	.word	0x0800d0c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fb1f 	bl	80001d0 <strlen>
 8000b92:	4603      	mov	r3, r0
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <Send_Uart+0x28>)
 8000b9e:	f004 facf 	bl	8005140 <HAL_UART_Transmit>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000124 	.word	0x20000124

08000bb0 <Mount_USB>:



void Mount_USB (void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	490a      	ldr	r1, [pc, #40]	; (8000be0 <Mount_USB+0x30>)
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <Mount_USB+0x34>)
 8000bba:	f00a fbfd 	bl	800b3b8 <f_mount>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <Mount_USB+0x38>)
 8000bc4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <Mount_USB+0x38>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <Mount_USB+0x26>
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <Mount_USB+0x3c>)
 8000bd0:	f7ff ffd8 	bl	8000b84 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000bd4:	e002      	b.n	8000bdc <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <Mount_USB+0x40>)
 8000bd8:	f7ff ffd4 	bl	8000b84 <Send_Uart>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200001f8 	.word	0x200001f8
 8000be4:	2000042c 	.word	0x2000042c
 8000be8:	20000104 	.word	0x20000104
 8000bec:	0800d0d8 	.word	0x0800d0d8
 8000bf0:	0800d0f8 	.word	0x0800d0f8

08000bf4 <Unmount_USB>:

void Unmount_USB (void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	490a      	ldr	r1, [pc, #40]	; (8000c24 <Unmount_USB+0x30>)
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f00a fbdb 	bl	800b3b8 <f_mount>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <Unmount_USB+0x34>)
 8000c08:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <Unmount_USB+0x34>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <Unmount_USB+0x26>
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <Unmount_USB+0x38>)
 8000c14:	f7ff ffb6 	bl	8000b84 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000c18:	e002      	b.n	8000c20 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <Unmount_USB+0x3c>)
 8000c1c:	f7ff ffb2 	bl	8000b84 <Send_Uart>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200001f8 	.word	0x200001f8
 8000c28:	20000104 	.word	0x20000104
 8000c2c:	0800d118 	.word	0x0800d118
 8000c30:	0800d13c 	.word	0x0800d13c

08000c34 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000c3e:	4955      	ldr	r1, [pc, #340]	; (8000d94 <Write_File+0x160>)
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f00a ffda 	bl	800bbfa <f_stat>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <Write_File+0x164>)
 8000c4c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000c4e:	4b52      	ldr	r3, [pc, #328]	; (8000d98 <Write_File+0x164>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d012      	beq.n	8000c7c <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000c56:	2064      	movs	r0, #100	; 0x64
 8000c58:	f00b fdec 	bl	800c834 <malloc>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	494e      	ldr	r1, [pc, #312]	; (8000d9c <Write_File+0x168>)
 8000c64:	68b8      	ldr	r0, [r7, #8]
 8000c66:	f00b fec5 	bl	800c9f4 <siprintf>
		Send_Uart (buf);
 8000c6a:	68b8      	ldr	r0, [r7, #8]
 8000c6c:	f7ff ff8a 	bl	8000b84 <Send_Uart>
	    free(buf);
 8000c70:	68b8      	ldr	r0, [r7, #8]
 8000c72:	f00b fde7 	bl	800c844 <free>
	    return fresult;
 8000c76:	4b48      	ldr	r3, [pc, #288]	; (8000d98 <Write_File+0x164>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	e087      	b.n	8000d8c <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	4847      	ldr	r0, [pc, #284]	; (8000da0 <Write_File+0x16c>)
 8000c82:	f00a fbdf 	bl	800b444 <f_open>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <Write_File+0x164>)
 8000c8c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000c8e:	4b42      	ldr	r3, [pc, #264]	; (8000d98 <Write_File+0x164>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d015      	beq.n	8000cc2 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000c96:	2064      	movs	r0, #100	; 0x64
 8000c98:	f00b fdcc 	bl	800c834 <malloc>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000ca0:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <Write_File+0x164>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	493e      	ldr	r1, [pc, #248]	; (8000da4 <Write_File+0x170>)
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f00b fea2 	bl	800c9f4 <siprintf>
	    	Send_Uart(buf);
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff ff67 	bl	8000b84 <Send_Uart>
	        free(buf);
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f00b fdc4 	bl	800c844 <free>
	        return fresult;
 8000cbc:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <Write_File+0x164>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	e064      	b.n	8000d8c <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000cc2:	2064      	movs	r0, #100	; 0x64
 8000cc4:	f00b fdb6 	bl	800c834 <malloc>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4936      	ldr	r1, [pc, #216]	; (8000da8 <Write_File+0x174>)
 8000cd0:	69f8      	ldr	r0, [r7, #28]
 8000cd2:	f00b fe8f 	bl	800c9f4 <siprintf>
	    	Send_Uart(buf);
 8000cd6:	69f8      	ldr	r0, [r7, #28]
 8000cd8:	f7ff ff54 	bl	8000b84 <Send_Uart>
	        free(buf);
 8000cdc:	69f8      	ldr	r0, [r7, #28]
 8000cde:	f00b fdb1 	bl	800c844 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	f7ff fa74 	bl	80001d0 <strlen>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4b30      	ldr	r3, [pc, #192]	; (8000dac <Write_File+0x178>)
 8000cec:	6839      	ldr	r1, [r7, #0]
 8000cee:	482c      	ldr	r0, [pc, #176]	; (8000da0 <Write_File+0x16c>)
 8000cf0:	f00a fd66 	bl	800b7c0 <f_write>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <Write_File+0x164>)
 8000cfa:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000cfc:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <Write_File+0x164>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d012      	beq.n	8000d2a <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	f00b fd95 	bl	800c834 <malloc>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <Write_File+0x164>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4926      	ldr	r1, [pc, #152]	; (8000db0 <Write_File+0x17c>)
 8000d18:	69b8      	ldr	r0, [r7, #24]
 8000d1a:	f00b fe6b 	bl	800c9f4 <siprintf>
	    		Send_Uart(buf);
 8000d1e:	69b8      	ldr	r0, [r7, #24]
 8000d20:	f7ff ff30 	bl	8000b84 <Send_Uart>
	    		free(buf);
 8000d24:	69b8      	ldr	r0, [r7, #24]
 8000d26:	f00b fd8d 	bl	800c844 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000d2a:	481d      	ldr	r0, [pc, #116]	; (8000da0 <Write_File+0x16c>)
 8000d2c:	f00a ff3b 	bl	800bba6 <f_close>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <Write_File+0x164>)
 8000d36:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <Write_File+0x164>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d013      	beq.n	8000d68 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000d40:	2064      	movs	r0, #100	; 0x64
 8000d42:	f00b fd77 	bl	800c834 <malloc>
 8000d46:	4603      	mov	r3, r0
 8000d48:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <Write_File+0x164>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4918      	ldr	r1, [pc, #96]	; (8000db4 <Write_File+0x180>)
 8000d54:	6938      	ldr	r0, [r7, #16]
 8000d56:	f00b fe4d 	bl	800c9f4 <siprintf>
	    		Send_Uart(buf);
 8000d5a:	6938      	ldr	r0, [r7, #16]
 8000d5c:	f7ff ff12 	bl	8000b84 <Send_Uart>
	    		free(buf);
 8000d60:	6938      	ldr	r0, [r7, #16]
 8000d62:	f00b fd6f 	bl	800c844 <free>
 8000d66:	e00f      	b.n	8000d88 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000d68:	2064      	movs	r0, #100	; 0x64
 8000d6a:	f00b fd63 	bl	800c834 <malloc>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4910      	ldr	r1, [pc, #64]	; (8000db8 <Write_File+0x184>)
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f00b fe3c 	bl	800c9f4 <siprintf>
	    		Send_Uart(buf);
 8000d7c:	6978      	ldr	r0, [r7, #20]
 8000d7e:	f7ff ff01 	bl	8000b84 <Send_Uart>
	    		free(buf);
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f00b fd5e 	bl	800c844 <free>
	    	}
	    }
	    return fresult;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <Write_File+0x164>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000108 	.word	0x20000108
 8000d98:	20000104 	.word	0x20000104
 8000d9c:	0800d1ac 	.word	0x0800d1ac
 8000da0:	200001fc 	.word	0x200001fc
 8000da4:	0800d1cc 	.word	0x0800d1cc
 8000da8:	0800d1f4 	.word	0x0800d1f4
 8000dac:	20000100 	.word	0x20000100
 8000db0:	0800d220 	.word	0x0800d220
 8000db4:	0800d254 	.word	0x0800d254
 8000db8:	0800d28c 	.word	0x0800d28c

08000dbc <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000dc4:	4943      	ldr	r1, [pc, #268]	; (8000ed4 <Create_File+0x118>)
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f00a ff17 	bl	800bbfa <f_stat>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <Create_File+0x11c>)
 8000dd2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000dd4:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <Create_File+0x11c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d112      	bne.n	8000e02 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000ddc:	2064      	movs	r0, #100	; 0x64
 8000dde:	f00b fd29 	bl	800c834 <malloc>
 8000de2:	4603      	mov	r3, r0
 8000de4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	493c      	ldr	r1, [pc, #240]	; (8000edc <Create_File+0x120>)
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f00b fe02 	bl	800c9f4 <siprintf>
		Send_Uart(buf);
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f7ff fec7 	bl	8000b84 <Send_Uart>
		free(buf);
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f00b fd24 	bl	800c844 <free>
	    return fresult;
 8000dfc:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <Create_File+0x11c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	e063      	b.n	8000eca <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000e02:	220b      	movs	r2, #11
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <Create_File+0x124>)
 8000e08:	f00a fb1c 	bl	800b444 <f_open>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <Create_File+0x11c>)
 8000e12:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000e14:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <Create_File+0x11c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d015      	beq.n	8000e48 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000e1c:	2064      	movs	r0, #100	; 0x64
 8000e1e:	f00b fd09 	bl	800c834 <malloc>
 8000e22:	4603      	mov	r3, r0
 8000e24:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <Create_File+0x11c>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	492d      	ldr	r1, [pc, #180]	; (8000ee4 <Create_File+0x128>)
 8000e30:	6938      	ldr	r0, [r7, #16]
 8000e32:	f00b fddf 	bl	800c9f4 <siprintf>
			Send_Uart(buf);
 8000e36:	6938      	ldr	r0, [r7, #16]
 8000e38:	f7ff fea4 	bl	8000b84 <Send_Uart>
			free(buf);
 8000e3c:	6938      	ldr	r0, [r7, #16]
 8000e3e:	f00b fd01 	bl	800c844 <free>
		    return fresult;
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <Create_File+0x11c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	e040      	b.n	8000eca <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000e48:	2064      	movs	r0, #100	; 0x64
 8000e4a:	f00b fcf3 	bl	800c834 <malloc>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	4924      	ldr	r1, [pc, #144]	; (8000ee8 <Create_File+0x12c>)
 8000e56:	69f8      	ldr	r0, [r7, #28]
 8000e58:	f00b fdcc 	bl	800c9f4 <siprintf>
			Send_Uart(buf);
 8000e5c:	69f8      	ldr	r0, [r7, #28]
 8000e5e:	f7ff fe91 	bl	8000b84 <Send_Uart>
			free(buf);
 8000e62:	69f8      	ldr	r0, [r7, #28]
 8000e64:	f00b fcee 	bl	800c844 <free>
		}

		fresult = f_close(&USBHFile);
 8000e68:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <Create_File+0x124>)
 8000e6a:	f00a fe9c 	bl	800bba6 <f_close>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <Create_File+0x11c>)
 8000e74:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <Create_File+0x11c>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d013      	beq.n	8000ea6 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000e7e:	2064      	movs	r0, #100	; 0x64
 8000e80:	f00b fcd8 	bl	800c834 <malloc>
 8000e84:	4603      	mov	r3, r0
 8000e86:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <Create_File+0x11c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4916      	ldr	r1, [pc, #88]	; (8000eec <Create_File+0x130>)
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f00b fdae 	bl	800c9f4 <siprintf>
			Send_Uart(buf);
 8000e98:	6978      	ldr	r0, [r7, #20]
 8000e9a:	f7ff fe73 	bl	8000b84 <Send_Uart>
			free(buf);
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f00b fcd0 	bl	800c844 <free>
 8000ea4:	e00f      	b.n	8000ec6 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000ea6:	2064      	movs	r0, #100	; 0x64
 8000ea8:	f00b fcc4 	bl	800c834 <malloc>
 8000eac:	4603      	mov	r3, r0
 8000eae:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	490f      	ldr	r1, [pc, #60]	; (8000ef0 <Create_File+0x134>)
 8000eb4:	69b8      	ldr	r0, [r7, #24]
 8000eb6:	f00b fd9d 	bl	800c9f4 <siprintf>
			Send_Uart(buf);
 8000eba:	69b8      	ldr	r0, [r7, #24]
 8000ebc:	f7ff fe62 	bl	8000b84 <Send_Uart>
			free(buf);
 8000ec0:	69b8      	ldr	r0, [r7, #24]
 8000ec2:	f00b fcbf 	bl	800c844 <free>
		}
	}
    return fresult;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <Create_File+0x11c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000108 	.word	0x20000108
 8000ed8:	20000104 	.word	0x20000104
 8000edc:	0800d380 	.word	0x0800d380
 8000ee0:	200001fc 	.word	0x200001fc
 8000ee4:	0800d3b8 	.word	0x0800d3b8
 8000ee8:	0800d3e0 	.word	0x0800d3e0
 8000eec:	0800d420 	.word	0x0800d420
 8000ef0:	0800d360 	.word	0x0800d360

08000ef4 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000efe:	495e      	ldr	r1, [pc, #376]	; (8001078 <Update_File+0x184>)
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f00a fe7a 	bl	800bbfa <f_stat>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b5c      	ldr	r3, [pc, #368]	; (800107c <Update_File+0x188>)
 8000f0c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000f0e:	4b5b      	ldr	r3, [pc, #364]	; (800107c <Update_File+0x188>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d012      	beq.n	8000f3c <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000f16:	2064      	movs	r0, #100	; 0x64
 8000f18:	f00b fc8c 	bl	800c834 <malloc>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4957      	ldr	r1, [pc, #348]	; (8001080 <Update_File+0x18c>)
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f00b fd65 	bl	800c9f4 <siprintf>
		Send_Uart (buf);
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff fe2a 	bl	8000b84 <Send_Uart>
		free(buf);
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f00b fc87 	bl	800c844 <free>
	    return fresult;
 8000f36:	4b51      	ldr	r3, [pc, #324]	; (800107c <Update_File+0x188>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	e098      	b.n	800106e <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8000f3c:	2232      	movs	r2, #50	; 0x32
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	4850      	ldr	r0, [pc, #320]	; (8001084 <Update_File+0x190>)
 8000f42:	f00a fa7f 	bl	800b444 <f_open>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	; (800107c <Update_File+0x188>)
 8000f4c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000f4e:	4b4b      	ldr	r3, [pc, #300]	; (800107c <Update_File+0x188>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d015      	beq.n	8000f82 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000f56:	2064      	movs	r0, #100	; 0x64
 8000f58:	f00b fc6c 	bl	800c834 <malloc>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000f60:	4b46      	ldr	r3, [pc, #280]	; (800107c <Update_File+0x188>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4947      	ldr	r1, [pc, #284]	; (8001088 <Update_File+0x194>)
 8000f6a:	6938      	ldr	r0, [r7, #16]
 8000f6c:	f00b fd42 	bl	800c9f4 <siprintf>
	    	Send_Uart(buf);
 8000f70:	6938      	ldr	r0, [r7, #16]
 8000f72:	f7ff fe07 	bl	8000b84 <Send_Uart>
	        free(buf);
 8000f76:	6938      	ldr	r0, [r7, #16]
 8000f78:	f00b fc64 	bl	800c844 <free>
	        return fresult;
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	; (800107c <Update_File+0x188>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	e075      	b.n	800106e <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8000f82:	2064      	movs	r0, #100	; 0x64
 8000f84:	f00b fc56 	bl	800c834 <malloc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	493f      	ldr	r1, [pc, #252]	; (800108c <Update_File+0x198>)
 8000f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f92:	f00b fd2f 	bl	800c9f4 <siprintf>
    	Send_Uart(buf);
 8000f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f98:	f7ff fdf4 	bl	8000b84 <Send_Uart>
        free(buf);
 8000f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f9e:	f00b fc51 	bl	800c844 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8000fa2:	6838      	ldr	r0, [r7, #0]
 8000fa4:	f7ff f914 	bl	80001d0 <strlen>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <Update_File+0x19c>)
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4835      	ldr	r0, [pc, #212]	; (8001084 <Update_File+0x190>)
 8000fb0:	f00a fc06 	bl	800b7c0 <f_write>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <Update_File+0x188>)
 8000fba:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <Update_File+0x188>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000fc4:	2064      	movs	r0, #100	; 0x64
 8000fc6:	f00b fc35 	bl	800c834 <malloc>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <Update_File+0x188>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	492f      	ldr	r1, [pc, #188]	; (8001094 <Update_File+0x1a0>)
 8000fd8:	69f8      	ldr	r0, [r7, #28]
 8000fda:	f00b fd0b 	bl	800c9f4 <siprintf>
	    	Send_Uart(buf);
 8000fde:	69f8      	ldr	r0, [r7, #28]
 8000fe0:	f7ff fdd0 	bl	8000b84 <Send_Uart>
	    	free(buf);
 8000fe4:	69f8      	ldr	r0, [r7, #28]
 8000fe6:	f00b fc2d 	bl	800c844 <free>
 8000fea:	e00f      	b.n	800100c <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	f00b fc21 	bl	800c834 <malloc>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4927      	ldr	r1, [pc, #156]	; (8001098 <Update_File+0x1a4>)
 8000ffa:	6a38      	ldr	r0, [r7, #32]
 8000ffc:	f00b fcfa 	bl	800c9f4 <siprintf>
	    	Send_Uart(buf);
 8001000:	6a38      	ldr	r0, [r7, #32]
 8001002:	f7ff fdbf 	bl	8000b84 <Send_Uart>
	    	free(buf);
 8001006:	6a38      	ldr	r0, [r7, #32]
 8001008:	f00b fc1c 	bl	800c844 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 800100c:	481d      	ldr	r0, [pc, #116]	; (8001084 <Update_File+0x190>)
 800100e:	f00a fdca 	bl	800bba6 <f_close>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <Update_File+0x188>)
 8001018:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <Update_File+0x188>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d013      	beq.n	800104a <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001022:	2064      	movs	r0, #100	; 0x64
 8001024:	f00b fc06 	bl	800c834 <malloc>
 8001028:	4603      	mov	r3, r0
 800102a:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <Update_File+0x188>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4919      	ldr	r1, [pc, #100]	; (800109c <Update_File+0x1a8>)
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f00b fcdc 	bl	800c9f4 <siprintf>
	    	Send_Uart(buf);
 800103c:	6978      	ldr	r0, [r7, #20]
 800103e:	f7ff fda1 	bl	8000b84 <Send_Uart>
	    	free(buf);
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f00b fbfe 	bl	800c844 <free>
 8001048:	e00f      	b.n	800106a <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800104a:	2064      	movs	r0, #100	; 0x64
 800104c:	f00b fbf2 	bl	800c834 <malloc>
 8001050:	4603      	mov	r3, r0
 8001052:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4912      	ldr	r1, [pc, #72]	; (80010a0 <Update_File+0x1ac>)
 8001058:	69b8      	ldr	r0, [r7, #24]
 800105a:	f00b fccb 	bl	800c9f4 <siprintf>
	    	Send_Uart(buf);
 800105e:	69b8      	ldr	r0, [r7, #24]
 8001060:	f7ff fd90 	bl	8000b84 <Send_Uart>
	    	free(buf);
 8001064:	69b8      	ldr	r0, [r7, #24]
 8001066:	f00b fbed 	bl	800c844 <free>
	     }
	}
    return fresult;
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <Update_File+0x188>)
 800106c:	781b      	ldrb	r3, [r3, #0]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3728      	adds	r7, #40	; 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000108 	.word	0x20000108
 800107c:	20000104 	.word	0x20000104
 8001080:	0800d1ac 	.word	0x0800d1ac
 8001084:	200001fc 	.word	0x200001fc
 8001088:	0800d1cc 	.word	0x0800d1cc
 800108c:	0800d444 	.word	0x0800d444
 8001090:	20000100 	.word	0x20000100
 8001094:	0800d474 	.word	0x0800d474
 8001098:	0800d49c 	.word	0x0800d49c
 800109c:	0800d338 	.word	0x0800d338
 80010a0:	0800d360 	.word	0x0800d360

080010a4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f00a fe92 	bl	800bdd6 <f_mkdir>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <Create_Dir+0x74>)
 80010b8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <Create_Dir+0x74>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d110      	bne.n	80010e4 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f00b fbb6 	bl	800c834 <malloc>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4913      	ldr	r1, [pc, #76]	; (800111c <Create_Dir+0x78>)
 80010d0:	68b8      	ldr	r0, [r7, #8]
 80010d2:	f00b fc8f 	bl	800c9f4 <siprintf>
    	Send_Uart (buf);
 80010d6:	68b8      	ldr	r0, [r7, #8]
 80010d8:	f7ff fd54 	bl	8000b84 <Send_Uart>
    	free(buf);
 80010dc:	68b8      	ldr	r0, [r7, #8]
 80010de:	f00b fbb1 	bl	800c844 <free>
 80010e2:	e012      	b.n	800110a <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80010e4:	2064      	movs	r0, #100	; 0x64
 80010e6:	f00b fba5 	bl	800c834 <malloc>
 80010ea:	4603      	mov	r3, r0
 80010ec:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <Create_Dir+0x74>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	490a      	ldr	r1, [pc, #40]	; (8001120 <Create_Dir+0x7c>)
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f00b fc7b 	bl	800c9f4 <siprintf>
    	Send_Uart(buf);
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff fd40 	bl	8000b84 <Send_Uart>
    	free(buf);
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f00b fb9d 	bl	800c844 <free>
    }
    return fresult;
 800110a:	4b03      	ldr	r3, [pc, #12]	; (8001118 <Create_Dir+0x74>)
 800110c:	781b      	ldrb	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000104 	.word	0x20000104
 800111c:	0800d500 	.word	0x0800d500
 8001120:	0800d528 	.word	0x0800d528

08001124 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <Check_USB_Details+0xc8>)
 800112c:	4930      	ldr	r1, [pc, #192]	; (80011f0 <Check_USB_Details+0xcc>)
 800112e:	4831      	ldr	r0, [pc, #196]	; (80011f4 <Check_USB_Details+0xd0>)
 8001130:	f00a fd9c 	bl	800bc6c <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <Check_USB_Details+0xc8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	3b02      	subs	r3, #2
 800113c:	4a2b      	ldr	r2, [pc, #172]	; (80011ec <Check_USB_Details+0xc8>)
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	8952      	ldrh	r2, [r2, #10]
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fb06 	bl	8000758 <__aeabi_ui2d>
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <Check_USB_Details+0xd4>)
 8001152:	f7ff f895 	bl	8000280 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fb75 	bl	800084c <__aeabi_d2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	4a25      	ldr	r2, [pc, #148]	; (80011fc <Check_USB_Details+0xd8>)
 8001166:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001168:	201e      	movs	r0, #30
 800116a:	f00b fb63 	bl	800c834 <malloc>
 800116e:	4603      	mov	r3, r0
 8001170:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <Check_USB_Details+0xd8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	4921      	ldr	r1, [pc, #132]	; (8001200 <Check_USB_Details+0xdc>)
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f00b fc3a 	bl	800c9f4 <siprintf>
    Send_Uart(buf);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fcff 	bl	8000b84 <Send_Uart>
    free(buf);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f00b fb5c 	bl	800c844 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <Check_USB_Details+0xc8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	895b      	ldrh	r3, [r3, #10]
 8001192:	461a      	mov	r2, r3
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <Check_USB_Details+0xcc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	fb03 f302 	mul.w	r3, r3, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fadb 	bl	8000758 <__aeabi_ui2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <Check_USB_Details+0xd4>)
 80011a8:	f7ff f86a 	bl	8000280 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fb4a 	bl	800084c <__aeabi_d2uiz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <Check_USB_Details+0xe0>)
 80011bc:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80011be:	201e      	movs	r0, #30
 80011c0:	f00b fb38 	bl	800c834 <malloc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <Check_USB_Details+0xe0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <Check_USB_Details+0xe4>)
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f00b fc0f 	bl	800c9f4 <siprintf>
    Send_Uart(buf);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fcd4 	bl	8000b84 <Send_Uart>
    free(buf);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f00b fb31 	bl	800c844 <free>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000f8 	.word	0x200000f8
 80011f0:	200000f0 	.word	0x200000f0
 80011f4:	0800d554 	.word	0x0800d554
 80011f8:	3fe00000 	.word	0x3fe00000
 80011fc:	20000120 	.word	0x20000120
 8001200:	0800d558 	.word	0x0800d558
 8001204:	200000fc 	.word	0x200000fc
 8001208:	0800d570 	.word	0x0800d570

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f000 fa7d 	bl	800170e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f80b 	bl	800122e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 f88c 	bl	8001334 <MX_GPIO_Init>
  MX_FATFS_Init();
 800121c:	f005 fb22 	bl	8006864 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001220:	f00a ff3c 	bl	800c09c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001224:	f000 f856 	bl	80012d4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001228:	f00a ff5e 	bl	800c0e8 <MX_USB_HOST_Process>
 800122c:	e7fc      	b.n	8001228 <main+0x1c>

0800122e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b096      	sub	sp, #88	; 0x58
 8001232:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2244      	movs	r2, #68	; 0x44
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f00b fb17 	bl	800c870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001250:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001254:	f002 f914 	bl	8003480 <HAL_PWREx_ControlVoltageScaling>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800125e:	f000 f8c7 	bl	80013f0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001262:	2310      	movs	r3, #16
 8001264:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001266:	2301      	movs	r3, #1
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800126e:	2360      	movs	r3, #96	; 0x60
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001276:	2301      	movs	r3, #1
 8001278:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800127e:	2328      	movs	r3, #40	; 0x28
 8001280:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001282:	2307      	movs	r3, #7
 8001284:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001286:	2302      	movs	r3, #2
 8001288:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4618      	mov	r0, r3
 8001294:	f002 f95a 	bl	800354c <HAL_RCC_OscConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800129e:	f000 f8a7 	bl	80013f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a2:	230f      	movs	r3, #15
 80012a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a6:	2303      	movs	r3, #3
 80012a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	2104      	movs	r1, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fd2c 	bl	8003d18 <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012c6:	f000 f893 	bl	80013f0 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3758      	adds	r7, #88	; 0x58
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <MX_USART2_UART_Init+0x5c>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_USART2_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_USART2_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_USART2_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_USART2_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_USART2_UART_Init+0x58>)
 8001318:	f003 fec4 	bl	80050a4 <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001322:	f000 f865 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000124 	.word	0x20000124
 8001330:	40004400 	.word	0x40004400

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_GPIO_Init+0x90>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_GPIO_Init+0x90>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <MX_GPIO_Init+0x94>)
 800139a:	f000 fca1 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 800139e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_GPIO_Init+0x94>)
 80013b8:	f000 fae8 	bl	800198c <HAL_GPIO_Init>

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000800 	.word	0x48000800

080013cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013de:	f000 f9af 	bl	8001740 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40012c00 	.word	0x40012c00

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_MspInit+0x44>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_MspInit+0x44>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6613      	str	r3, [r2, #96]	; 0x60
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_MspInit+0x44>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_MspInit+0x44>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_MspInit+0x44>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6593      	str	r3, [r2, #88]	; 0x58
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_MspInit+0x44>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0ac      	sub	sp, #176	; 0xb0
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2288      	movs	r2, #136	; 0x88
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f00b fa03 	bl	800c870 <memset>
  if(huart->Instance==USART2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <HAL_UART_MspInit+0xb0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d13a      	bne.n	80014ea <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001474:	2302      	movs	r3, #2
 8001476:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fe81 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800148c:	f7ff ffb0 	bl	80013f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 8001496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149a:	6593      	str	r3, [r2, #88]	; 0x58
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 80014ae:	f043 0308 	orr.w	r3, r3, #8
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_UART_MspInit+0xb4>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014c0:	2360      	movs	r3, #96	; 0x60
 80014c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d8:	2307      	movs	r3, #7
 80014da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_UART_MspInit+0xb8>)
 80014e6:	f000 fa51 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	37b0      	adds	r7, #176	; 0xb0
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40004400 	.word	0x40004400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	48000c00 	.word	0x48000c00

08001500 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	2019      	movs	r0, #25
 8001516:	f000 fa0f 	bl	8001938 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800151a:	2019      	movs	r0, #25
 800151c:	f000 fa28 	bl	8001970 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_InitTick+0x9c>)
 8001522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_InitTick+0x9c>)
 8001526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800152a:	6613      	str	r3, [r2, #96]	; 0x60
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_InitTick+0x9c>)
 800152e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001538:	f107 0210 	add.w	r2, r7, #16
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fd8e 	bl	8004064 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001548:	f002 fd76 	bl	8004038 <HAL_RCC_GetPCLK2Freq>
 800154c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_InitTick+0xa0>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3b01      	subs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_InitTick+0xa4>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <HAL_InitTick+0xa8>)
 8001560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_InitTick+0xa4>)
 8001564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001568:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_InitTick+0xa4>)
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_InitTick+0xa4>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_InitTick+0xa4>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_InitTick+0xa4>)
 800157e:	f003 fabf 	bl	8004b00 <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d104      	bne.n	8001592 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_InitTick+0xa4>)
 800158a:	f003 fb1b 	bl	8004bc4 <HAL_TIM_Base_Start_IT>
 800158e:	4603      	mov	r3, r0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	200001a8 	.word	0x200001a8
 80015a8:	40012c00 	.word	0x40012c00

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800160a:	f003 fb4b 	bl	8004ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200001a8 	.word	0x200001a8

08001618 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <OTG_FS_IRQHandler+0x10>)
 800161e:	f000 fddd 	bl	80021dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000a38 	.word	0x20000a38

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f00b f8c0 	bl	800c7e0 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20018000 	.word	0x20018000
 800168c:	00000400 	.word	0x00000400
 8001690:	200000ac 	.word	0x200000ac
 8001694:	20000d50 	.word	0x20000d50

08001698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c0:	f7ff ffea 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	; (80016fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <LoopForever+0xe>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	; (8001708 <LoopForever+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ea:	f00b f87f 	bl	800c7ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ee:	f7ff fd8d 	bl	800120c <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001700:	0800d834 	.word	0x0800d834
  ldr r2, =_sbss
 8001704:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001708:	20000d4c 	.word	0x20000d4c

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>

0800170e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f902 	bl	8001922 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	200f      	movs	r0, #15
 8001720:	f7ff feee 	bl	8001500 <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e001      	b.n	8001734 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001730:	f7ff fe64 	bl	80013fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001734:	79fb      	ldrb	r3, [r7, #7]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	200001f4 	.word	0x200001f4

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200001f4 	.word	0x200001f4

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff4c 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194a:	f7ff ff61 	bl	8001810 <__NVIC_GetPriorityGrouping>
 800194e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	6978      	ldr	r0, [r7, #20]
 8001956:	f7ff ffb1 	bl	80018bc <NVIC_EncodePriority>
 800195a:	4602      	mov	r2, r0
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff80 	bl	8001868 <__NVIC_SetPriority>
}
 8001968:	bf00      	nop
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff54 	bl	800182c <__NVIC_EnableIRQ>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199a:	e17f      	b.n	8001c9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8171 	beq.w	8001c96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d005      	beq.n	80019cc <HAL_GPIO_Init+0x40>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d130      	bne.n	8001a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a02:	2201      	movs	r2, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 0201 	and.w	r2, r3, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d118      	bne.n	8001a6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	6939      	ldr	r1, [r7, #16]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80ac 	beq.w	8001c96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	4b5f      	ldr	r3, [pc, #380]	; (8001cbc <HAL_GPIO_Init+0x330>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b42:	4a5e      	ldr	r2, [pc, #376]	; (8001cbc <HAL_GPIO_Init+0x330>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4a:	4b5c      	ldr	r3, [pc, #368]	; (8001cbc <HAL_GPIO_Init+0x330>)
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b56:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b80:	d025      	beq.n	8001bce <HAL_GPIO_Init+0x242>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4f      	ldr	r2, [pc, #316]	; (8001cc4 <HAL_GPIO_Init+0x338>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01f      	beq.n	8001bca <HAL_GPIO_Init+0x23e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_GPIO_Init+0x33c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d019      	beq.n	8001bc6 <HAL_GPIO_Init+0x23a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_GPIO_Init+0x340>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0x236>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_GPIO_Init+0x344>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00d      	beq.n	8001bbe <HAL_GPIO_Init+0x232>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4b      	ldr	r2, [pc, #300]	; (8001cd4 <HAL_GPIO_Init+0x348>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d007      	beq.n	8001bba <HAL_GPIO_Init+0x22e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4a      	ldr	r2, [pc, #296]	; (8001cd8 <HAL_GPIO_Init+0x34c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_GPIO_Init+0x22a>
 8001bb2:	2306      	movs	r3, #6
 8001bb4:	e00c      	b.n	8001bd0 <HAL_GPIO_Init+0x244>
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	e00a      	b.n	8001bd0 <HAL_GPIO_Init+0x244>
 8001bba:	2305      	movs	r3, #5
 8001bbc:	e008      	b.n	8001bd0 <HAL_GPIO_Init+0x244>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x244>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e004      	b.n	8001bd0 <HAL_GPIO_Init+0x244>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x244>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x244>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	f002 0203 	and.w	r2, r2, #3
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001be0:	4937      	ldr	r1, [pc, #220]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bee:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_GPIO_Init+0x350>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c12:	4a32      	ldr	r2, [pc, #200]	; (8001cdc <HAL_GPIO_Init+0x350>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_GPIO_Init+0x350>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c3c:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <HAL_GPIO_Init+0x350>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_GPIO_Init+0x350>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <HAL_GPIO_Init+0x350>)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_GPIO_Init+0x350>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c90:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <HAL_GPIO_Init+0x350>)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f47f ae78 	bne.w	800199c <HAL_GPIO_Init+0x10>
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	48000c00 	.word	0x48000c00
 8001cd0:	48001000 	.word	0x48001000
 8001cd4:	48001400 	.word	0x48001400
 8001cd8:	48001800 	.word	0x48001800
 8001cdc:	40010400 	.word	0x40010400

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	b08f      	sub	sp, #60	; 0x3c
 8001d14:	af0a      	add	r7, sp, #40	; 0x28
 8001d16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e054      	b.n	8001dcc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d106      	bne.n	8001d42 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f00a fa45 	bl	800c1cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fef7 	bl	8005b54 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	687e      	ldr	r6, [r7, #4]
 8001d6e:	466d      	mov	r5, sp
 8001d70:	f106 0410 	add.w	r4, r6, #16
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d84:	1d33      	adds	r3, r6, #4
 8001d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f003 fea6 	bl	8005ada <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2101      	movs	r1, #1
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 feee 	bl	8005b76 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	687e      	ldr	r6, [r7, #4]
 8001da2:	466d      	mov	r5, sp
 8001da4:	f106 0410 	add.w	r4, r6, #16
 8001da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db8:	1d33      	adds	r3, r6, #4
 8001dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f004 f86d 	bl	8005e9c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af04      	add	r7, sp, #16
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	70fb      	strb	r3, [r7, #3]
 8001de6:	460b      	mov	r3, r1
 8001de8:	70bb      	strb	r3, [r7, #2]
 8001dea:	4613      	mov	r3, r2
 8001dec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_HCD_HC_Init+0x28>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e076      	b.n	8001eea <HAL_HCD_HC_Init+0x116>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	333d      	adds	r3, #61	; 0x3d
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	212c      	movs	r1, #44	; 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	3338      	adds	r3, #56	; 0x38
 8001e24:	787a      	ldrb	r2, [r7, #1]
 8001e26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3340      	adds	r3, #64	; 0x40
 8001e36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e38:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	212c      	movs	r1, #44	; 0x2c
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	3339      	adds	r3, #57	; 0x39
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	333f      	adds	r3, #63	; 0x3f
 8001e5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	78ba      	ldrb	r2, [r7, #2]
 8001e64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e68:	b2d0      	uxtb	r0, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	333a      	adds	r3, #58	; 0x3a
 8001e76:	4602      	mov	r2, r0
 8001e78:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da09      	bge.n	8001e96 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	212c      	movs	r1, #44	; 0x2c
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	333b      	adds	r3, #59	; 0x3b
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e008      	b.n	8001ea8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	333b      	adds	r3, #59	; 0x3b
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	212c      	movs	r1, #44	; 0x2c
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	333c      	adds	r3, #60	; 0x3c
 8001eb6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001eba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	787c      	ldrb	r4, [r7, #1]
 8001ec2:	78ba      	ldrb	r2, [r7, #2]
 8001ec4:	78f9      	ldrb	r1, [r7, #3]
 8001ec6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	f004 f928 	bl	800612c <USB_HC_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}

08001ef2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_HCD_HC_Halt+0x1e>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e00f      	b.n	8001f30 <HAL_HCD_HC_Halt+0x3e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 fb14 	bl	800654e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	4608      	mov	r0, r1
 8001f42:	4611      	mov	r1, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	70fb      	strb	r3, [r7, #3]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70bb      	strb	r3, [r7, #2]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	333b      	adds	r3, #59	; 0x3b
 8001f60:	78ba      	ldrb	r2, [r7, #2]
 8001f62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	333f      	adds	r3, #63	; 0x3f
 8001f72:	787a      	ldrb	r2, [r7, #1]
 8001f74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f76:	7c3b      	ldrb	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d112      	bne.n	8001fa2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3342      	adds	r3, #66	; 0x42
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	212c      	movs	r1, #44	; 0x2c
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	333d      	adds	r3, #61	; 0x3d
 8001f9c:	7f3a      	ldrb	r2, [r7, #28]
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	e008      	b.n	8001fb4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3342      	adds	r3, #66	; 0x42
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	f200 80c6 	bhi.w	8002148 <HAL_HCD_HC_SubmitRequest+0x210>
 8001fbc:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08002135 	.word	0x08002135
 8001fcc:	08002039 	.word	0x08002039
 8001fd0:	080020b7 	.word	0x080020b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001fd4:	7c3b      	ldrb	r3, [r7, #16]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 80b8 	bne.w	800214c <HAL_HCD_HC_SubmitRequest+0x214>
 8001fdc:	78bb      	ldrb	r3, [r7, #2]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 80b4 	bne.w	800214c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001fe4:	8b3b      	ldrh	r3, [r7, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3355      	adds	r3, #85	; 0x55
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3355      	adds	r3, #85	; 0x55
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3342      	adds	r3, #66	; 0x42
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002022:	e093      	b.n	800214c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3342      	adds	r3, #66	; 0x42
 8002032:	2202      	movs	r2, #2
 8002034:	701a      	strb	r2, [r3, #0]
      break;
 8002036:	e089      	b.n	800214c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002038:	78bb      	ldrb	r3, [r7, #2]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11d      	bne.n	800207a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3355      	adds	r3, #85	; 0x55
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3342      	adds	r3, #66	; 0x42
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002064:	e073      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3342      	adds	r3, #66	; 0x42
 8002074:	2202      	movs	r2, #2
 8002076:	701a      	strb	r2, [r3, #0]
      break;
 8002078:	e069      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3354      	adds	r3, #84	; 0x54
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3342      	adds	r3, #66	; 0x42
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
      break;
 80020a0:	e055      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3342      	adds	r3, #66	; 0x42
 80020b0:	2202      	movs	r2, #2
 80020b2:	701a      	strb	r2, [r3, #0]
      break;
 80020b4:	e04b      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020b6:	78bb      	ldrb	r3, [r7, #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11d      	bne.n	80020f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3355      	adds	r3, #85	; 0x55
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3342      	adds	r3, #66	; 0x42
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020e2:	e034      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3342      	adds	r3, #66	; 0x42
 80020f2:	2202      	movs	r2, #2
 80020f4:	701a      	strb	r2, [r3, #0]
      break;
 80020f6:	e02a      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3354      	adds	r3, #84	; 0x54
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3342      	adds	r3, #66	; 0x42
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
      break;
 800211e:	e016      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3342      	adds	r3, #66	; 0x42
 800212e:	2202      	movs	r2, #2
 8002130:	701a      	strb	r2, [r3, #0]
      break;
 8002132:	e00c      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3342      	adds	r3, #66	; 0x42
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
      break;
 8002146:	e002      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002148:	bf00      	nop
 800214a:	e000      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800214c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3344      	adds	r3, #68	; 0x44
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	8b3a      	ldrh	r2, [r7, #24]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	202c      	movs	r0, #44	; 0x2c
 8002168:	fb00 f303 	mul.w	r3, r0, r3
 800216c:	440b      	add	r3, r1
 800216e:	334c      	adds	r3, #76	; 0x4c
 8002170:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	3360      	adds	r3, #96	; 0x60
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3350      	adds	r3, #80	; 0x50
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3339      	adds	r3, #57	; 0x39
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	3361      	adds	r3, #97	; 0x61
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	222c      	movs	r2, #44	; 0x2c
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	3338      	adds	r3, #56	; 0x38
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f004 f8b5 	bl	800633c <USB_HC_StartXfer>
 80021d2:	4603      	mov	r3, r0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fe11 	bl	8005e1a <USB_GetMode>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	f040 80f6 	bne.w	80023ec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 fdf5 	bl	8005df4 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80ec 	beq.w	80023ea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f003 fdec 	bl	8005df4 <USB_ReadInterrupts>
 800221c:	4603      	mov	r3, r0
 800221e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002226:	d104      	bne.n	8002232 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002230:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fddc 	bl	8005df4 <USB_ReadInterrupts>
 800223c:	4603      	mov	r3, r0
 800223e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002246:	d104      	bne.n	8002252 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002250:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fdcc 	bl	8005df4 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002266:	d104      	bne.n	8002272 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002270:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fdbc 	bl	8005df4 <USB_ReadInterrupts>
 800227c:	4603      	mov	r3, r0
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d103      	bne.n	800228e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2202      	movs	r2, #2
 800228c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fdae 	bl	8005df4 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800229e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a2:	d11c      	bne.n	80022de <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022be:	2110      	movs	r1, #16
 80022c0:	6938      	ldr	r0, [r7, #16]
 80022c2:	f003 fca5 	bl	8005c10 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80022c6:	6938      	ldr	r0, [r7, #16]
 80022c8:	f003 fcd4 	bl	8005c74 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fe64 	bl	8005fa0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f00a f825 	bl	800c328 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 fd86 	bl	8005df4 <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f2:	d102      	bne.n	80022fa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f001 f841 	bl	800337c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 fd78 	bl	8005df4 <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b08      	cmp	r3, #8
 800230c:	d106      	bne.n	800231c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f009 ffee 	bl	800c2f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2208      	movs	r2, #8
 800231a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fd67 	bl	8005df4 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b10      	cmp	r3, #16
 800232e:	d101      	bne.n	8002334 <HAL_HCD_IRQHandler+0x158>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_HCD_IRQHandler+0x15a>
 8002334:	2300      	movs	r3, #0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d012      	beq.n	8002360 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0210 	bic.w	r2, r2, #16
 8002348:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 ff44 	bl	80031d8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0210 	orr.w	r2, r2, #16
 800235e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f003 fd45 	bl	8005df4 <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002374:	d13a      	bne.n	80023ec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f004 f8d6 	bl	800652c <USB_HC_ReadInterrupt>
 8002380:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e025      	b.n	80023d4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d018      	beq.n	80023ce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b2:	d106      	bne.n	80023c2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8ab 	bl	8002516 <HCD_HC_IN_IRQHandler>
 80023c0:	e005      	b.n	80023ce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	4619      	mov	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fc03 	bl	8002bd4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3d4      	bcc.n	8002388 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e6:	615a      	str	r2, [r3, #20]
 80023e8:	e000      	b.n	80023ec <HAL_HCD_IRQHandler+0x210>
      return;
 80023ea:	bf00      	nop
    }
  }
}
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_HCD_Start+0x16>
 8002404:	2302      	movs	r3, #2
 8002406:	e013      	b.n	8002430 <HAL_HCD_Start+0x3e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fe26 	bl	8006068 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f003 fb86 	bl	8005b32 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_HCD_Stop+0x16>
 800244a:	2302      	movs	r3, #2
 800244c:	e00d      	b.n	800246a <HAL_HCD_Stop+0x32>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f004 f971 	bl	8006742 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fdc8 	bl	8006014 <USB_ResetPort>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3360      	adds	r3, #96	; 0x60
 80024a8:	781b      	ldrb	r3, [r3, #0]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	3350      	adds	r3, #80	; 0x50
 80024d0:	681b      	ldr	r3, [r3, #0]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fe0c 	bl	8006108 <USB_GetCurrentFrame>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fde7 	bl	80060da <USB_GetHostSpeed>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b04      	cmp	r3, #4
 8002544:	d11a      	bne.n	800257c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	461a      	mov	r2, r3
 8002554:	2304      	movs	r3, #4
 8002556:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3361      	adds	r3, #97	; 0x61
 8002566:	2206      	movs	r2, #6
 8002568:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f003 ffea 	bl	800654e <USB_HC_Halt>
 800257a:	e0af      	b.n	80026dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002592:	d11b      	bne.n	80025cc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	461a      	mov	r2, r3
 80025a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3361      	adds	r3, #97	; 0x61
 80025b6:	2207      	movs	r2, #7
 80025b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 ffc2 	bl	800654e <USB_HC_Halt>
 80025ca:	e087      	b.n	80026dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d109      	bne.n	80025f6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	461a      	mov	r2, r3
 80025f0:	2320      	movs	r3, #32
 80025f2:	6093      	str	r3, [r2, #8]
 80025f4:	e072      	b.n	80026dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b08      	cmp	r3, #8
 800260a:	d11a      	bne.n	8002642 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	2308      	movs	r3, #8
 800261c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	3361      	adds	r3, #97	; 0x61
 800262c:	2205      	movs	r2, #5
 800262e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f003 ff87 	bl	800654e <USB_HC_Halt>
 8002640:	e04c      	b.n	80026dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002658:	d11b      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	461a      	mov	r2, r3
 8002668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	3361      	adds	r3, #97	; 0x61
 800267c:	2208      	movs	r2, #8
 800267e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f003 ff5f 	bl	800654e <USB_HC_Halt>
 8002690:	e024      	b.n	80026dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d119      	bne.n	80026dc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	461a      	mov	r2, r3
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3361      	adds	r3, #97	; 0x61
 80026c8:	2206      	movs	r2, #6
 80026ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 ff39 	bl	800654e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f2:	d112      	bne.n	800271a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 ff25 	bl	800654e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002716:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002718:	e258      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	f040 80ed 	bne.w	800290c <HCD_HC_IN_IRQHandler+0x3f6>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3361      	adds	r3, #97	; 0x61
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	335c      	adds	r3, #92	; 0x5c
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	461a      	mov	r2, r3
 8002764:	2301      	movs	r3, #1
 8002766:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	333f      	adds	r3, #63	; 0x3f
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d009      	beq.n	8002790 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	333f      	adds	r3, #63	; 0x3f
 800278a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800278c:	2b02      	cmp	r3, #2
 800278e:	d111      	bne.n	80027b4 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fed7 	bl	800654e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	2310      	movs	r3, #16
 80027b0:	6093      	str	r3, [r2, #8]
 80027b2:	e066      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	333f      	adds	r3, #63	; 0x3f
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d127      	bne.n	8002818 <HCD_HC_IN_IRQHandler+0x302>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	0151      	lsls	r1, r2, #5
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	440a      	add	r2, r1
 80027de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3360      	adds	r3, #96	; 0x60
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	b2d9      	uxtb	r1, r3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	202c      	movs	r0, #44	; 0x2c
 8002804:	fb00 f303 	mul.w	r3, r0, r3
 8002808:	4413      	add	r3, r2
 800280a:	3360      	adds	r3, #96	; 0x60
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f009 fd97 	bl	800c344 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002816:	e034      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x36c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	333f      	adds	r3, #63	; 0x3f
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d12a      	bne.n	8002882 <HCD_HC_IN_IRQHandler+0x36c>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3360      	adds	r3, #96	; 0x60
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3354      	adds	r3, #84	; 0x54
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	f083 0301 	eor.w	r3, r3, #1
 8002852:	b2d8      	uxtb	r0, r3
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3354      	adds	r3, #84	; 0x54
 8002862:	4602      	mov	r2, r0
 8002864:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	b2d9      	uxtb	r1, r3
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	202c      	movs	r0, #44	; 0x2c
 8002870:	fb00 f303 	mul.w	r3, r0, r3
 8002874:	4413      	add	r3, r2
 8002876:	3360      	adds	r3, #96	; 0x60
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f009 fd61 	bl	800c344 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d12b      	bne.n	80028e2 <HCD_HC_IN_IRQHandler+0x3cc>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3348      	adds	r3, #72	; 0x48
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	202c      	movs	r0, #44	; 0x2c
 80028a0:	fb00 f202 	mul.w	r2, r0, r2
 80028a4:	440a      	add	r2, r1
 80028a6:	3240      	adds	r2, #64	; 0x40
 80028a8:	8812      	ldrh	r2, [r2, #0]
 80028aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 818a 	beq.w	8002bcc <HCD_HC_IN_IRQHandler+0x6b6>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3354      	adds	r3, #84	; 0x54
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	f083 0301 	eor.w	r3, r3, #1
 80028cc:	b2d8      	uxtb	r0, r3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3354      	adds	r3, #84	; 0x54
 80028dc:	4602      	mov	r2, r0
 80028de:	701a      	strb	r2, [r3, #0]
}
 80028e0:	e174      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x6b6>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3354      	adds	r3, #84	; 0x54
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2d8      	uxtb	r0, r3
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3354      	adds	r3, #84	; 0x54
 8002906:	4602      	mov	r2, r0
 8002908:	701a      	strb	r2, [r3, #0]
}
 800290a:	e15f      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	f040 80f6 	bne.w	8002b10 <HCD_HC_IN_IRQHandler+0x5fa>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	; 0x61
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d109      	bne.n	800294c <HCD_HC_IN_IRQHandler+0x436>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3360      	adds	r3, #96	; 0x60
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e0c9      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d109      	bne.n	8002974 <HCD_HC_IN_IRQHandler+0x45e>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	2205      	movs	r2, #5
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e0b5      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x5ca>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3361      	adds	r3, #97	; 0x61
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d009      	beq.n	800299c <HCD_HC_IN_IRQHandler+0x486>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3361      	adds	r3, #97	; 0x61
 8002996:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002998:	2b08      	cmp	r3, #8
 800299a:	d150      	bne.n	8002a3e <HCD_HC_IN_IRQHandler+0x528>
      hhcd->hc[ch_num].ErrCnt++;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	335c      	adds	r3, #92	; 0x5c
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	202c      	movs	r0, #44	; 0x2c
 80029b4:	fb00 f303 	mul.w	r3, r0, r3
 80029b8:	440b      	add	r3, r1
 80029ba:	335c      	adds	r3, #92	; 0x5c
 80029bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	335c      	adds	r3, #92	; 0x5c
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d912      	bls.n	80029f8 <HCD_HC_IN_IRQHandler+0x4e2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	335c      	adds	r3, #92	; 0x5c
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3360      	adds	r3, #96	; 0x60
 80029f2:	2204      	movs	r2, #4
 80029f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029f6:	e073      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x5ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3360      	adds	r3, #96	; 0x60
 8002a06:	2202      	movs	r2, #2
 8002a08:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a20:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a28:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a3c:	e050      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3361      	adds	r3, #97	; 0x61
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d122      	bne.n	8002a98 <HCD_HC_IN_IRQHandler+0x582>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3360      	adds	r3, #96	; 0x60
 8002a60:	2202      	movs	r2, #2
 8002a62:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a7a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a82:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	461a      	mov	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e023      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x5ca>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3361      	adds	r3, #97	; 0x61
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b07      	cmp	r3, #7
 8002aaa:	d119      	bne.n	8002ae0 <HCD_HC_IN_IRQHandler+0x5ca>
      hhcd->hc[ch_num].ErrCnt++;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	202c      	movs	r0, #44	; 0x2c
 8002ac4:	fb00 f303 	mul.w	r3, r0, r3
 8002ac8:	440b      	add	r3, r1
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3360      	adds	r3, #96	; 0x60
 8002adc:	2204      	movs	r2, #4
 8002ade:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	461a      	mov	r2, r3
 8002aee:	2302      	movs	r3, #2
 8002af0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	b2d9      	uxtb	r1, r3
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	202c      	movs	r0, #44	; 0x2c
 8002afc:	fb00 f303 	mul.w	r3, r0, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3360      	adds	r3, #96	; 0x60
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f009 fc1b 	bl	800c344 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b0e:	e05d      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x6b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d152      	bne.n	8002bcc <HCD_HC_IN_IRQHandler+0x6b6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	333f      	adds	r3, #63	; 0x3f
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d111      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	335c      	adds	r3, #92	; 0x5c
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fcf9 	bl	800654e <USB_HC_Halt>
 8002b5c:	e02d      	b.n	8002bba <HCD_HC_IN_IRQHandler+0x6a4>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	333f      	adds	r3, #63	; 0x3f
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HCD_HC_IN_IRQHandler+0x670>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	333f      	adds	r3, #63	; 0x3f
 8002b80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d119      	bne.n	8002bba <HCD_HC_IN_IRQHandler+0x6a4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	335c      	adds	r3, #92	; 0x5c
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3361      	adds	r3, #97	; 0x61
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 fcca 	bl	800654e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2310      	movs	r3, #16
 8002bca:	6093      	str	r3, [r2, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d11a      	bne.n	8002c3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	2304      	movs	r3, #4
 8002c14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3361      	adds	r3, #97	; 0x61
 8002c24:	2206      	movs	r2, #6
 8002c26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 fc8b 	bl	800654e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002c38:	e2ca      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d12e      	bne.n	8002cae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2320      	movs	r3, #32
 8002c60:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	333d      	adds	r3, #61	; 0x3d
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	f040 82ac 	bne.w	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	333d      	adds	r3, #61	; 0x3d
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3360      	adds	r3, #96	; 0x60
 8002c98:	2202      	movs	r2, #2
 8002c9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 fc51 	bl	800654e <USB_HC_Halt>
}
 8002cac:	e290      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc4:	d112      	bne.n	8002cec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f003 fc32 	bl	800654e <USB_HC_Halt>
}
 8002cea:	e271      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d140      	bne.n	8002d84 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	335c      	adds	r3, #92	; 0x5c
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b40      	cmp	r3, #64	; 0x40
 8002d28:	d111      	bne.n	8002d4e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	333d      	adds	r3, #61	; 0x3d
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2340      	movs	r3, #64	; 0x40
 8002d4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3361      	adds	r3, #97	; 0x61
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fbe6 	bl	800654e <USB_HC_Halt>
}
 8002d82:	e225      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d12c      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3361      	adds	r3, #97	; 0x61
 8002da8:	2204      	movs	r2, #4
 8002daa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	333d      	adds	r3, #61	; 0x3d
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	335c      	adds	r3, #92	; 0x5c
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 fbb7 	bl	800654e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2340      	movs	r3, #64	; 0x40
 8002df0:	6093      	str	r3, [r2, #8]
}
 8002df2:	e1ed      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d11a      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	461a      	mov	r2, r3
 8002e18:	2308      	movs	r3, #8
 8002e1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3361      	adds	r3, #97	; 0x61
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fb88 	bl	800654e <USB_HC_Halt>
}
 8002e3e:	e1c7      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d123      	bne.n	8002e9e <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	335c      	adds	r3, #92	; 0x5c
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3361      	adds	r3, #97	; 0x61
 8002e76:	2203      	movs	r2, #3
 8002e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fb62 	bl	800654e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	461a      	mov	r2, r3
 8002e98:	2310      	movs	r3, #16
 8002e9a:	6093      	str	r3, [r2, #8]
}
 8002e9c:	e198      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d11a      	bne.n	8002eea <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3361      	adds	r3, #97	; 0x61
 8002ec2:	2206      	movs	r2, #6
 8002ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 fb3c 	bl	800654e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	6093      	str	r3, [r2, #8]
}
 8002ee8:	e172      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d11b      	bne.n	8002f3a <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3361      	adds	r3, #97	; 0x61
 8002f10:	2208      	movs	r2, #8
 8002f12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f003 fb15 	bl	800654e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	461a      	mov	r2, r3
 8002f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f36:	6093      	str	r3, [r2, #8]
}
 8002f38:	e14a      	b.n	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	f040 813f 	bne.w	80031d0 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3361      	adds	r3, #97	; 0x61
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d17d      	bne.n	8003062 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	3360      	adds	r3, #96	; 0x60
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	333f      	adds	r3, #63	; 0x3f
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d00a      	beq.n	8002fa2 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	333f      	adds	r3, #63	; 0x3f
 8002f9a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	f040 8100 	bne.w	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d113      	bne.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3355      	adds	r3, #85	; 0x55
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2d8      	uxtb	r0, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3355      	adds	r3, #85	; 0x55
 8002fce:	4602      	mov	r2, r0
 8002fd0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f040 80e3 	bne.w	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	334c      	adds	r3, #76	; 0x4c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80d8 	beq.w	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	334c      	adds	r3, #76	; 0x4c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	202c      	movs	r0, #44	; 0x2c
 8003008:	fb00 f202 	mul.w	r2, r0, r2
 800300c:	440a      	add	r2, r1
 800300e:	3240      	adds	r2, #64	; 0x40
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	4413      	add	r3, r2
 8003014:	3b01      	subs	r3, #1
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	202c      	movs	r0, #44	; 0x2c
 800301c:	fb00 f202 	mul.w	r2, r0, r2
 8003020:	440a      	add	r2, r1
 8003022:	3240      	adds	r2, #64	; 0x40
 8003024:	8812      	ldrh	r2, [r2, #0]
 8003026:	fbb3 f3f2 	udiv	r3, r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80b5 	beq.w	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	3355      	adds	r3, #85	; 0x55
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	f083 0301 	eor.w	r3, r3, #1
 800304c:	b2d8      	uxtb	r0, r3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3355      	adds	r3, #85	; 0x55
 800305c:	4602      	mov	r2, r0
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e09f      	b.n	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3361      	adds	r3, #97	; 0x61
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d109      	bne.n	800308a <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3360      	adds	r3, #96	; 0x60
 8003084:	2202      	movs	r2, #2
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e08b      	b.n	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3361      	adds	r3, #97	; 0x61
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b04      	cmp	r3, #4
 800309c:	d109      	bne.n	80030b2 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3360      	adds	r3, #96	; 0x60
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e077      	b.n	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3361      	adds	r3, #97	; 0x61
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d109      	bne.n	80030da <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3360      	adds	r3, #96	; 0x60
 80030d4:	2205      	movs	r2, #5
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e063      	b.n	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	3361      	adds	r3, #97	; 0x61
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d009      	beq.n	8003102 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3361      	adds	r3, #97	; 0x61
 80030fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d14f      	bne.n	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	335c      	adds	r3, #92	; 0x5c
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	202c      	movs	r0, #44	; 0x2c
 800311a:	fb00 f303 	mul.w	r3, r0, r3
 800311e:	440b      	add	r3, r1
 8003120:	335c      	adds	r3, #92	; 0x5c
 8003122:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	335c      	adds	r3, #92	; 0x5c
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d912      	bls.n	800315e <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	335c      	adds	r3, #92	; 0x5c
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3360      	adds	r3, #96	; 0x60
 8003158:	2204      	movs	r2, #4
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e021      	b.n	80031a2 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3360      	adds	r3, #96	; 0x60
 800316c:	2202      	movs	r2, #2
 800316e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003186:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800318e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	461a      	mov	r2, r3
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	461a      	mov	r2, r3
 80031b0:	2302      	movs	r3, #2
 80031b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	b2d9      	uxtb	r1, r3
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	202c      	movs	r0, #44	; 0x2c
 80031be:	fb00 f303 	mul.w	r3, r0, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3360      	adds	r3, #96	; 0x60
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f009 f8ba 	bl	800c344 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031d0:	bf00      	nop
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	0c5b      	lsrs	r3, r3, #17
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800320c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d004      	beq.n	800321e <HCD_RXQLVL_IRQHandler+0x46>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b05      	cmp	r3, #5
 8003218:	f000 80a9 	beq.w	800336e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800321c:	e0aa      	b.n	8003374 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80a6 	beq.w	8003372 <HCD_RXQLVL_IRQHandler+0x19a>
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3344      	adds	r3, #68	; 0x44
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 809b 	beq.w	8003372 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	3350      	adds	r3, #80	; 0x50
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	441a      	add	r2, r3
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	202c      	movs	r0, #44	; 0x2c
 8003256:	fb00 f303 	mul.w	r3, r0, r3
 800325a:	440b      	add	r3, r1
 800325c:	334c      	adds	r3, #76	; 0x4c
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d87a      	bhi.n	800335a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3344      	adds	r3, #68	; 0x44
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	b292      	uxth	r2, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f002 fd61 	bl	8005d44 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3344      	adds	r3, #68	; 0x44
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	441a      	add	r2, r3
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	202c      	movs	r0, #44	; 0x2c
 800329c:	fb00 f303 	mul.w	r3, r0, r3
 80032a0:	440b      	add	r3, r1
 80032a2:	3344      	adds	r3, #68	; 0x44
 80032a4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	3350      	adds	r3, #80	; 0x50
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	441a      	add	r2, r3
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	202c      	movs	r0, #44	; 0x2c
 80032c0:	fb00 f303 	mul.w	r3, r0, r3
 80032c4:	440b      	add	r3, r1
 80032c6:	3350      	adds	r3, #80	; 0x50
 80032c8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	0cdb      	lsrs	r3, r3, #19
 80032da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032de:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3340      	adds	r3, #64	; 0x40
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d13c      	bne.n	8003372 <HCD_RXQLVL_IRQHandler+0x19a>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d039      	beq.n	8003372 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003314:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800331c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3354      	adds	r3, #84	; 0x54
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f083 0301 	eor.w	r3, r3, #1
 8003344:	b2d8      	uxtb	r0, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3354      	adds	r3, #84	; 0x54
 8003354:	4602      	mov	r2, r0
 8003356:	701a      	strb	r2, [r3, #0]
      break;
 8003358:	e00b      	b.n	8003372 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	3360      	adds	r3, #96	; 0x60
 8003368:	2204      	movs	r2, #4
 800336a:	701a      	strb	r2, [r3, #0]
      break;
 800336c:	e001      	b.n	8003372 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003372:	bf00      	nop
  }
}
 8003374:	bf00      	nop
 8003376:	3728      	adds	r7, #40	; 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d10b      	bne.n	80033cc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f008 ffa4 	bl	800c30c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d132      	bne.n	800343c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f043 0308 	orr.w	r3, r3, #8
 80033dc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d126      	bne.n	8003436 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d113      	bne.n	8003418 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033fa:	d106      	bne.n	800340a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2102      	movs	r1, #2
 8003402:	4618      	mov	r0, r3
 8003404:	f002 fdcc 	bl	8005fa0 <USB_InitFSLSPClkSel>
 8003408:	e011      	b.n	800342e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f002 fdc5 	bl	8005fa0 <USB_InitFSLSPClkSel>
 8003416:	e00a      	b.n	800342e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003426:	461a      	mov	r2, r3
 8003428:	f64e 2360 	movw	r3, #60000	; 0xea60
 800342c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f008 ff96 	bl	800c360 <HAL_HCD_PortEnabled_Callback>
 8003434:	e002      	b.n	800343c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f008 ffa0 	bl	800c37c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b20      	cmp	r3, #32
 8003444:	d103      	bne.n	800344e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f043 0320 	orr.w	r3, r3, #32
 800344c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003454:	461a      	mov	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6013      	str	r3, [r2, #0]
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_PWREx_GetVoltageRange+0x18>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40007000 	.word	0x40007000

08003480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348e:	d130      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349c:	d038      	beq.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2232      	movs	r2, #50	; 0x32
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0c9b      	lsrs	r3, r3, #18
 80034c0:	3301      	adds	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c4:	e002      	b.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d8:	d102      	bne.n	80034e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f2      	bne.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ec:	d110      	bne.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e00f      	b.n	8003512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fe:	d007      	beq.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003508:	4a05      	ldr	r2, [pc, #20]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800350e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000
 8003524:	20000000 	.word	0x20000000
 8003528:	431bde83 	.word	0x431bde83

0800352c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800353a:	6053      	str	r3, [r2, #4]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40007000 	.word	0x40007000

0800354c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e3d4      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355e:	4ba1      	ldr	r3, [pc, #644]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003568:	4b9e      	ldr	r3, [pc, #632]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80e4 	beq.w	8003748 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_RCC_OscConfig+0x4a>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b0c      	cmp	r3, #12
 800358a:	f040 808b 	bne.w	80036a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b01      	cmp	r3, #1
 8003592:	f040 8087 	bne.w	80036a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003596:	4b93      	ldr	r3, [pc, #588]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_RCC_OscConfig+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e3ac      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	4b8c      	ldr	r3, [pc, #560]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <HAL_RCC_OscConfig+0x7c>
 80035be:	4b89      	ldr	r3, [pc, #548]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c6:	e005      	b.n	80035d4 <HAL_RCC_OscConfig+0x88>
 80035c8:	4b86      	ldr	r3, [pc, #536]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d223      	bcs.n	8003620 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fd73 	bl	80040c8 <RCC_SetFlashLatencyFromMSIRange>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e38d      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ec:	4b7d      	ldr	r3, [pc, #500]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7c      	ldr	r2, [pc, #496]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b7a      	ldr	r3, [pc, #488]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4977      	ldr	r1, [pc, #476]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800360a:	4b76      	ldr	r3, [pc, #472]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4972      	ldr	r1, [pc, #456]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
 800361e:	e025      	b.n	800366c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003620:	4b70      	ldr	r3, [pc, #448]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6f      	ldr	r2, [pc, #444]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003626:	f043 0308 	orr.w	r3, r3, #8
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b6d      	ldr	r3, [pc, #436]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	496a      	ldr	r1, [pc, #424]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800363e:	4b69      	ldr	r3, [pc, #420]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	4965      	ldr	r1, [pc, #404]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fd33 	bl	80040c8 <RCC_SetFlashLatencyFromMSIRange>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e34d      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800366c:	f000 fc36 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b5c      	ldr	r3, [pc, #368]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	495a      	ldr	r1, [pc, #360]	; (80037e8 <HAL_RCC_OscConfig+0x29c>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	4a58      	ldr	r2, [pc, #352]	; (80037ec <HAL_RCC_OscConfig+0x2a0>)
 800368a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800368c:	4b58      	ldr	r3, [pc, #352]	; (80037f0 <HAL_RCC_OscConfig+0x2a4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd ff35 	bl	8001500 <HAL_InitTick>
 8003696:	4603      	mov	r3, r0
 8003698:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d052      	beq.n	8003746 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	e331      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d032      	beq.n	8003712 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036ac:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a4c      	ldr	r2, [pc, #304]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036b8:	f7fe f856 	bl	8001768 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036c0:	f7fe f852 	bl	8001768 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e31a      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d2:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036de:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a40      	ldr	r2, [pc, #256]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b3e      	ldr	r3, [pc, #248]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	493b      	ldr	r1, [pc, #236]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036fc:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	4936      	ldr	r1, [pc, #216]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	e01a      	b.n	8003748 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003712:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a33      	ldr	r2, [pc, #204]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800371e:	f7fe f823 	bl	8001768 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003726:	f7fe f81f 	bl	8001768 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e2e7      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003738:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x1da>
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003746:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d074      	beq.n	800383e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b08      	cmp	r3, #8
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x21a>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d10e      	bne.n	800377e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d10b      	bne.n	800377e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003766:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d064      	beq.n	800383c <HAL_RCC_OscConfig+0x2f0>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d160      	bne.n	800383c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e2c4      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003786:	d106      	bne.n	8003796 <HAL_RCC_OscConfig+0x24a>
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 800378e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e01d      	b.n	80037d2 <HAL_RCC_OscConfig+0x286>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379e:	d10c      	bne.n	80037ba <HAL_RCC_OscConfig+0x26e>
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e00b      	b.n	80037d2 <HAL_RCC_OscConfig+0x286>
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a09      	ldr	r2, [pc, #36]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <HAL_RCC_OscConfig+0x298>)
 80037cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01c      	beq.n	8003814 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fd ffc5 	bl	8001768 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e0:	e011      	b.n	8003806 <HAL_RCC_OscConfig+0x2ba>
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	0800d714 	.word	0x0800d714
 80037ec:	20000000 	.word	0x20000000
 80037f0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fd ffb8 	bl	8001768 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e280      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003806:	4baf      	ldr	r3, [pc, #700]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x2a8>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd ffa8 	bl	8001768 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd ffa4 	bl	8001768 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e26c      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382e:	4ba5      	ldr	r3, [pc, #660]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x2d0>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d060      	beq.n	800390c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d005      	beq.n	800385c <HAL_RCC_OscConfig+0x310>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d119      	bne.n	800388a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d116      	bne.n	800388a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385c:	4b99      	ldr	r3, [pc, #612]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_OscConfig+0x328>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e249      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b93      	ldr	r3, [pc, #588]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	4990      	ldr	r1, [pc, #576]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003888:	e040      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d023      	beq.n	80038da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003892:	4b8c      	ldr	r3, [pc, #560]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a8b      	ldr	r2, [pc, #556]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd ff63 	bl	8001768 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fd ff5f 	bl	8001768 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e227      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	4b82      	ldr	r3, [pc, #520]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b7f      	ldr	r3, [pc, #508]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	497c      	ldr	r1, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
 80038d8:	e018      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b7a      	ldr	r3, [pc, #488]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a79      	ldr	r2, [pc, #484]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80038e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fd ff3f 	bl	8001768 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fd ff3b 	bl	8001768 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e203      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003900:	4b70      	ldr	r3, [pc, #448]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d03c      	beq.n	8003992 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01c      	beq.n	800395a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003920:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003926:	4a67      	ldr	r2, [pc, #412]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd ff1a 	bl	8001768 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003938:	f7fd ff16 	bl	8001768 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e1de      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394a:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 800394c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <HAL_RCC_OscConfig+0x3ec>
 8003958:	e01b      	b.n	8003992 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395a:	4b5a      	ldr	r3, [pc, #360]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 800395c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003960:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fd fefd 	bl	8001768 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003972:	f7fd fef9 	bl	8001768 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e1c1      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003984:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ef      	bne.n	8003972 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80a6 	beq.w	8003aec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039a4:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	4a43      	ldr	r2, [pc, #268]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6593      	str	r3, [r2, #88]	; 0x58
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c8:	2301      	movs	r3, #1
 80039ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039cc:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_RCC_OscConfig+0x57c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d118      	bne.n	8003a0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCC_OscConfig+0x57c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a3a      	ldr	r2, [pc, #232]	; (8003ac8 <HAL_RCC_OscConfig+0x57c>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e4:	f7fd fec0 	bl	8001768 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fd febc 	bl	8001768 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e184      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fe:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <HAL_RCC_OscConfig+0x57c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4d8>
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a22:	e024      	b.n	8003a6e <HAL_RCC_OscConfig+0x522>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d110      	bne.n	8003a4e <HAL_RCC_OscConfig+0x502>
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	4a24      	ldr	r2, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a4c:	e00f      	b.n	8003a6e <HAL_RCC_OscConfig+0x522>
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a66:	f023 0304 	bic.w	r3, r3, #4
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd fe77 	bl	8001768 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd fe73 	bl	8001768 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e139      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_OscConfig+0x578>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ed      	beq.n	8003a7e <HAL_RCC_OscConfig+0x532>
 8003aa2:	e01a      	b.n	8003ada <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fe60 	bl	8001768 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aaa:	e00f      	b.n	8003acc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fd fe5c 	bl	8001768 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d906      	bls.n	8003acc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e122      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003acc:	4b90      	ldr	r3, [pc, #576]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e8      	bne.n	8003aac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae0:	4b8b      	ldr	r3, [pc, #556]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	4a8a      	ldr	r2, [pc, #552]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8108 	beq.w	8003d06 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	f040 80d0 	bne.w	8003ca0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b00:	4b83      	ldr	r3, [pc, #524]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0203 	and.w	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d130      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d127      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d11f      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b40:	2a07      	cmp	r2, #7
 8003b42:	bf14      	ite	ne
 8003b44:	2201      	movne	r2, #1
 8003b46:	2200      	moveq	r2, #0
 8003b48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d113      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d06e      	beq.n	8003c54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	d069      	beq.n	8003c50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b7c:	4b64      	ldr	r3, [pc, #400]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b88:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b7      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b98:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5c      	ldr	r2, [pc, #368]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ba4:	f7fd fde0 	bl	8001768 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd fddc 	bl	8001768 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0a4      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bbe:	4b54      	ldr	r3, [pc, #336]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bca:	4b51      	ldr	r3, [pc, #324]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	4b51      	ldr	r3, [pc, #324]	; (8003d14 <HAL_RCC_OscConfig+0x7c8>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bda:	3a01      	subs	r2, #1
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	4311      	orrs	r1, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003be4:	0212      	lsls	r2, r2, #8
 8003be6:	4311      	orrs	r1, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bec:	0852      	lsrs	r2, r2, #1
 8003bee:	3a01      	subs	r2, #1
 8003bf0:	0552      	lsls	r2, r2, #21
 8003bf2:	4311      	orrs	r1, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bf8:	0852      	lsrs	r2, r2, #1
 8003bfa:	3a01      	subs	r2, #1
 8003bfc:	0652      	lsls	r2, r2, #25
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c04:	0912      	lsrs	r2, r2, #4
 8003c06:	0452      	lsls	r2, r2, #17
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4941      	ldr	r1, [pc, #260]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c10:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a3e      	ldr	r2, [pc, #248]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c1c:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a3b      	ldr	r2, [pc, #236]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c28:	f7fd fd9e 	bl	8001768 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fd fd9a 	bl	8001768 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e062      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c42:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c4e:	e05a      	b.n	8003d06 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e059      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c54:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d152      	bne.n	8003d06 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c6c:	4b28      	ldr	r3, [pc, #160]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c78:	f7fd fd76 	bl	8001768 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fd fd72 	bl	8001768 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e03a      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c92:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x734>
 8003c9e:	e032      	b.n	8003d06 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d02d      	beq.n	8003d02 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003cb2:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d105      	bne.n	8003cca <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003cc4:	f023 0303 	bic.w	r3, r3, #3
 8003cc8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003cd0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cda:	f7fd fd45 	bl	8001768 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7fd fd41 	bl	8001768 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e009      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_RCC_OscConfig+0x7c4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x796>
 8003d00:	e001      	b.n	8003d06 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	f99d808c 	.word	0xf99d808c

08003d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0c8      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d910      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b63      	ldr	r3, [pc, #396]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4961      	ldr	r1, [pc, #388]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b0>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b5f      	ldr	r3, [pc, #380]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b0      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d04c      	beq.n	8003e02 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d70:	4b56      	ldr	r3, [pc, #344]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d121      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e09e      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d88:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d115      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e092      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003da0:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e086      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db0:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e07e      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dc0:	4b42      	ldr	r3, [pc, #264]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 0203 	bic.w	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	493f      	ldr	r1, [pc, #252]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd2:	f7fd fcc9 	bl	8001768 <HAL_GetTick>
 8003dd6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dda:	f7fd fcc5 	bl	8001768 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e066      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df0:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 020c 	and.w	r2, r3, #12
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d1eb      	bne.n	8003dda <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0e:	4b2f      	ldr	r3, [pc, #188]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	492c      	ldr	r1, [pc, #176]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e20:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d210      	bcs.n	8003e50 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 0207 	bic.w	r2, r3, #7
 8003e36:	4924      	ldr	r1, [pc, #144]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e036      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4918      	ldr	r1, [pc, #96]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7a:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4910      	ldr	r1, [pc, #64]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e8e:	f000 f825 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003e92:	4602      	mov	r2, r0
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <HAL_RCC_ClockConfig+0x1b4>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	490c      	ldr	r1, [pc, #48]	; (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	5ccb      	ldrb	r3, [r1, r3]
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fd fb24 	bl	8001500 <HAL_InitTick>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ebc:	7afb      	ldrb	r3, [r7, #11]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40022000 	.word	0x40022000
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	0800d714 	.word	0x0800d714
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	20000004 	.word	0x20000004

08003edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef4:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x34>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d121      	bne.n	8003f4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d11e      	bne.n	8003f4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f10:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f1c:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e005      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f2c:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f38:	4a2b      	ldr	r2, [pc, #172]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d102      	bne.n	8003f5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f54:	4b25      	ldr	r3, [pc, #148]	; (8003fec <HAL_RCC_GetSysClockFreq+0x110>)
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e004      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f60:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d134      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d003      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0xac>
 8003f80:	e005      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f82:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_RCC_GetSysClockFreq+0x110>)
 8003f84:	617b      	str	r3, [r7, #20]
      break;
 8003f86:	e005      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f8a:	617b      	str	r3, [r7, #20]
      break;
 8003f8c:	e002      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	617b      	str	r3, [r7, #20]
      break;
 8003f92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	fb02 f203 	mul.w	r2, r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	0e5b      	lsrs	r3, r3, #25
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	0800d72c 	.word	0x0800d72c
 8003fec:	00f42400 	.word	0x00f42400
 8003ff0:	007a1200 	.word	0x007a1200

08003ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000000 	.word	0x20000000

0800400c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004010:	f7ff fff0 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	4904      	ldr	r1, [pc, #16]	; (8004034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	0800d724 	.word	0x0800d724

08004038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800403c:	f7ff ffda 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0adb      	lsrs	r3, r3, #11
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4904      	ldr	r1, [pc, #16]	; (8004060 <HAL_RCC_GetPCLK2Freq+0x28>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	0800d724 	.word	0x0800d724

08004064 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	220f      	movs	r2, #15
 8004072:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004074:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0203 	and.w	r2, r3, #3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800408c:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <HAL_RCC_GetClockConfig+0x5c>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004098:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_RCC_GetClockConfig+0x5c>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <HAL_RCC_GetClockConfig+0x60>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0207 	and.w	r2, r3, #7
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	601a      	str	r2, [r3, #0]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40022000 	.word	0x40022000

080040c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040e0:	f7ff f9c0 	bl	8003464 <HAL_PWREx_GetVoltageRange>
 80040e4:	6178      	str	r0, [r7, #20]
 80040e6:	e014      	b.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e8:	4b25      	ldr	r3, [pc, #148]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	4a24      	ldr	r2, [pc, #144]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6593      	str	r3, [r2, #88]	; 0x58
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004100:	f7ff f9b0 	bl	8003464 <HAL_PWREx_GetVoltageRange>
 8004104:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800410c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004110:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004118:	d10b      	bne.n	8004132 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d919      	bls.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2ba0      	cmp	r3, #160	; 0xa0
 8004124:	d902      	bls.n	800412c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004126:	2302      	movs	r3, #2
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e013      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800412c:	2301      	movs	r3, #1
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	e010      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d902      	bls.n	800413e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004138:	2303      	movs	r3, #3
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	e00a      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d102      	bne.n	800414a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004144:	2302      	movs	r3, #2
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	e004      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b70      	cmp	r3, #112	; 0x70
 800414e:	d101      	bne.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004150:	2301      	movs	r3, #1
 8004152:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 0207 	bic.w	r2, r3, #7
 800415c:	4909      	ldr	r1, [pc, #36]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	429a      	cmp	r2, r3
 8004170:	d001      	beq.n	8004176 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	40022000 	.word	0x40022000

08004188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004190:	2300      	movs	r3, #0
 8004192:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004194:	2300      	movs	r3, #0
 8004196:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d041      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041ac:	d02a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041b2:	d824      	bhi.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041b8:	d008      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041be:	d81e      	bhi.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c8:	d010      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041ca:	e018      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041cc:	4b86      	ldr	r3, [pc, #536]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a85      	ldr	r2, [pc, #532]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d8:	e015      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fabb 	bl	800475c <RCCEx_PLLSAI1_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041ea:	e00c      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3320      	adds	r3, #32
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fba6 	bl	8004944 <RCCEx_PLLSAI2_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	74fb      	strb	r3, [r7, #19]
      break;
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800420c:	4b76      	ldr	r3, [pc, #472]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800421a:	4973      	ldr	r1, [pc, #460]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004222:	e001      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004224:	7cfb      	ldrb	r3, [r7, #19]
 8004226:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d041      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004238:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800423c:	d02a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800423e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004242:	d824      	bhi.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004248:	d008      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800424a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800424e:	d81e      	bhi.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004258:	d010      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800425a:	e018      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800425c:	4b62      	ldr	r3, [pc, #392]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a61      	ldr	r2, [pc, #388]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004266:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004268:	e015      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fa73 	bl	800475c <RCCEx_PLLSAI1_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800427a:	e00c      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3320      	adds	r3, #32
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fb5e 	bl	8004944 <RCCEx_PLLSAI2_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800428c:	e003      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	74fb      	strb	r3, [r7, #19]
      break;
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800429c:	4b52      	ldr	r3, [pc, #328]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042aa:	494f      	ldr	r1, [pc, #316]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042b2:	e001      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80a0 	beq.w	8004406 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c6:	2300      	movs	r3, #0
 80042c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e0:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	4a40      	ldr	r2, [pc, #256]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6593      	str	r3, [r2, #88]	; 0x58
 80042ec:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f8:	2301      	movs	r3, #1
 80042fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042fc:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3a      	ldr	r2, [pc, #232]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004306:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004308:	f7fd fa2e 	bl	8001768 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800430e:	e009      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004310:	f7fd fa2a 	bl	8001768 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d902      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	74fb      	strb	r3, [r7, #19]
        break;
 8004322:	e005      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004324:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ef      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d15c      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004336:	4b2c      	ldr	r3, [pc, #176]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004340:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01f      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	429a      	cmp	r2, r3
 8004352:	d019      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004354:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004360:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	4a20      	ldr	r2, [pc, #128]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004380:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd f9e9 	bl	8001768 <HAL_GetTick>
 8004396:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004398:	e00b      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fd f9e5 	bl	8001768 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d902      	bls.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	74fb      	strb	r3, [r7, #19]
            break;
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ec      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d6:	4904      	ldr	r1, [pc, #16]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043de:	e009      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
 80043e4:	e006      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f4:	7c7b      	ldrb	r3, [r7, #17]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fa:	4b9e      	ldr	r3, [pc, #632]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	4a9d      	ldr	r2, [pc, #628]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004404:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004412:	4b98      	ldr	r3, [pc, #608]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	f023 0203 	bic.w	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	4994      	ldr	r1, [pc, #592]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004434:	4b8f      	ldr	r3, [pc, #572]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	f023 020c 	bic.w	r2, r3, #12
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	498c      	ldr	r1, [pc, #560]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004456:	4b87      	ldr	r3, [pc, #540]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	4983      	ldr	r1, [pc, #524]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004478:	4b7e      	ldr	r3, [pc, #504]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	497b      	ldr	r1, [pc, #492]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800449a:	4b76      	ldr	r3, [pc, #472]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a8:	4972      	ldr	r1, [pc, #456]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044bc:	4b6d      	ldr	r3, [pc, #436]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	496a      	ldr	r1, [pc, #424]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044de:	4b65      	ldr	r3, [pc, #404]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ec:	4961      	ldr	r1, [pc, #388]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004500:	4b5c      	ldr	r3, [pc, #368]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450e:	4959      	ldr	r1, [pc, #356]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004522:	4b54      	ldr	r3, [pc, #336]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004530:	4950      	ldr	r1, [pc, #320]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004544:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	4948      	ldr	r1, [pc, #288]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004566:	4b43      	ldr	r3, [pc, #268]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	493f      	ldr	r1, [pc, #252]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d028      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004588:	4b3a      	ldr	r3, [pc, #232]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004596:	4937      	ldr	r1, [pc, #220]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a6:	d106      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a8:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a31      	ldr	r2, [pc, #196]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b2:	60d3      	str	r3, [r2, #12]
 80045b4:	e011      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045be:	d10c      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f8c8 	bl	800475c <RCCEx_PLLSAI1_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d028      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045e6:	4b23      	ldr	r3, [pc, #140]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	491f      	ldr	r1, [pc, #124]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004604:	d106      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004606:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004610:	60d3      	str	r3, [r2, #12]
 8004612:	e011      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800461c:	d10c      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	2101      	movs	r1, #1
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f899 	bl	800475c <RCCEx_PLLSAI1_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d02b      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004652:	4908      	ldr	r1, [pc, #32]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004662:	d109      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a02      	ldr	r2, [pc, #8]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800466e:	60d3      	str	r3, [r2, #12]
 8004670:	e014      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004680:	d10c      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	2101      	movs	r1, #1
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f867 	bl	800475c <RCCEx_PLLSAI1_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004692:	7cfb      	ldrb	r3, [r7, #19]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d02f      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046a8:	4b2b      	ldr	r3, [pc, #172]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b6:	4928      	ldr	r1, [pc, #160]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046c6:	d10d      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	2102      	movs	r1, #2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f844 	bl	800475c <RCCEx_PLLSAI1_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d014      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046de:	7cfb      	ldrb	r3, [r7, #19]
 80046e0:	74bb      	strb	r3, [r7, #18]
 80046e2:	e011      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ec:	d10c      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3320      	adds	r3, #32
 80046f2:	2102      	movs	r1, #2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f925 	bl	8004944 <RCCEx_PLLSAI2_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004714:	4b10      	ldr	r3, [pc, #64]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004722:	490d      	ldr	r1, [pc, #52]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004736:	4b08      	ldr	r3, [pc, #32]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004746:	4904      	ldr	r1, [pc, #16]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800474e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000

0800475c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800476a:	4b75      	ldr	r3, [pc, #468]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d018      	beq.n	80047a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004776:	4b72      	ldr	r3, [pc, #456]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0203 	and.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d10d      	bne.n	80047a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
       ||
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800478e:	4b6c      	ldr	r3, [pc, #432]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
       ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d047      	beq.n	8004832 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
 80047a6:	e044      	b.n	8004832 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d018      	beq.n	80047e2 <RCCEx_PLLSAI1_Config+0x86>
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d825      	bhi.n	8004800 <RCCEx_PLLSAI1_Config+0xa4>
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d002      	beq.n	80047be <RCCEx_PLLSAI1_Config+0x62>
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d009      	beq.n	80047d0 <RCCEx_PLLSAI1_Config+0x74>
 80047bc:	e020      	b.n	8004800 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047be:	4b60      	ldr	r3, [pc, #384]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11d      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ce:	e01a      	b.n	8004806 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047d0:	4b5b      	ldr	r3, [pc, #364]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d116      	bne.n	800480a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e0:	e013      	b.n	800480a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047e2:	4b57      	ldr	r3, [pc, #348]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10f      	bne.n	800480e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ee:	4b54      	ldr	r3, [pc, #336]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047fe:	e006      	b.n	800480e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      break;
 8004804:	e004      	b.n	8004810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800480e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004816:	4b4a      	ldr	r3, [pc, #296]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	3b01      	subs	r3, #1
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	430b      	orrs	r3, r1
 800482c:	4944      	ldr	r1, [pc, #272]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d17d      	bne.n	8004934 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a40      	ldr	r2, [pc, #256]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004844:	f7fc ff90 	bl	8001768 <HAL_GetTick>
 8004848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800484a:	e009      	b.n	8004860 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800484c:	f7fc ff8c 	bl	8001768 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d902      	bls.n	8004860 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	73fb      	strb	r3, [r7, #15]
        break;
 800485e:	e005      	b.n	800486c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004860:	4b37      	ldr	r3, [pc, #220]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ef      	bne.n	800484c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d160      	bne.n	8004934 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d111      	bne.n	800489c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004878:	4b31      	ldr	r3, [pc, #196]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6892      	ldr	r2, [r2, #8]
 8004888:	0211      	lsls	r1, r2, #8
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68d2      	ldr	r2, [r2, #12]
 800488e:	0912      	lsrs	r2, r2, #4
 8004890:	0452      	lsls	r2, r2, #17
 8004892:	430a      	orrs	r2, r1
 8004894:	492a      	ldr	r1, [pc, #168]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	610b      	str	r3, [r1, #16]
 800489a:	e027      	b.n	80048ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d112      	bne.n	80048c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048a2:	4b27      	ldr	r3, [pc, #156]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6892      	ldr	r2, [r2, #8]
 80048b2:	0211      	lsls	r1, r2, #8
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6912      	ldr	r2, [r2, #16]
 80048b8:	0852      	lsrs	r2, r2, #1
 80048ba:	3a01      	subs	r2, #1
 80048bc:	0552      	lsls	r2, r2, #21
 80048be:	430a      	orrs	r2, r1
 80048c0:	491f      	ldr	r1, [pc, #124]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	610b      	str	r3, [r1, #16]
 80048c6:	e011      	b.n	80048ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6892      	ldr	r2, [r2, #8]
 80048d8:	0211      	lsls	r1, r2, #8
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6952      	ldr	r2, [r2, #20]
 80048de:	0852      	lsrs	r2, r2, #1
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0652      	lsls	r2, r2, #25
 80048e4:	430a      	orrs	r2, r1
 80048e6:	4916      	ldr	r1, [pc, #88]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a13      	ldr	r2, [pc, #76]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fc ff36 	bl	8001768 <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048fe:	e009      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004900:	f7fc ff32 	bl	8001768 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d902      	bls.n	8004914 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	73fb      	strb	r3, [r7, #15]
          break;
 8004912:	e005      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0ef      	beq.n	8004900 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	4904      	ldr	r1, [pc, #16]	; (8004940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004930:	4313      	orrs	r3, r2
 8004932:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000

08004944 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004952:	4b6a      	ldr	r3, [pc, #424]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d018      	beq.n	8004990 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800495e:	4b67      	ldr	r3, [pc, #412]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0203 	and.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d10d      	bne.n	800498a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
       ||
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004976:	4b61      	ldr	r3, [pc, #388]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
       ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d047      	beq.n	8004a1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
 800498e:	e044      	b.n	8004a1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d018      	beq.n	80049ca <RCCEx_PLLSAI2_Config+0x86>
 8004998:	2b03      	cmp	r3, #3
 800499a:	d825      	bhi.n	80049e8 <RCCEx_PLLSAI2_Config+0xa4>
 800499c:	2b01      	cmp	r3, #1
 800499e:	d002      	beq.n	80049a6 <RCCEx_PLLSAI2_Config+0x62>
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d009      	beq.n	80049b8 <RCCEx_PLLSAI2_Config+0x74>
 80049a4:	e020      	b.n	80049e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049a6:	4b55      	ldr	r3, [pc, #340]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11d      	bne.n	80049ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b6:	e01a      	b.n	80049ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049b8:	4b50      	ldr	r3, [pc, #320]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d116      	bne.n	80049f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c8:	e013      	b.n	80049f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ca:	4b4c      	ldr	r3, [pc, #304]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10f      	bne.n	80049f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049d6:	4b49      	ldr	r3, [pc, #292]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049e6:	e006      	b.n	80049f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      break;
 80049ec:	e004      	b.n	80049f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049fe:	4b3f      	ldr	r3, [pc, #252]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6819      	ldr	r1, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	430b      	orrs	r3, r1
 8004a14:	4939      	ldr	r1, [pc, #228]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d167      	bne.n	8004af0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a35      	ldr	r2, [pc, #212]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2c:	f7fc fe9c 	bl	8001768 <HAL_GetTick>
 8004a30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a32:	e009      	b.n	8004a48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a34:	f7fc fe98 	bl	8001768 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d902      	bls.n	8004a48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	73fb      	strb	r3, [r7, #15]
        break;
 8004a46:	e005      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a48:	4b2c      	ldr	r3, [pc, #176]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1ef      	bne.n	8004a34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d14a      	bne.n	8004af0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d111      	bne.n	8004a84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6892      	ldr	r2, [r2, #8]
 8004a70:	0211      	lsls	r1, r2, #8
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68d2      	ldr	r2, [r2, #12]
 8004a76:	0912      	lsrs	r2, r2, #4
 8004a78:	0452      	lsls	r2, r2, #17
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	491f      	ldr	r1, [pc, #124]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	614b      	str	r3, [r1, #20]
 8004a82:	e011      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a84:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6892      	ldr	r2, [r2, #8]
 8004a94:	0211      	lsls	r1, r2, #8
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6912      	ldr	r2, [r2, #16]
 8004a9a:	0852      	lsrs	r2, r2, #1
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	0652      	lsls	r2, r2, #25
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	4916      	ldr	r1, [pc, #88]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004aa8:	4b14      	ldr	r3, [pc, #80]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab4:	f7fc fe58 	bl	8001768 <HAL_GetTick>
 8004ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aba:	e009      	b.n	8004ad0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004abc:	f7fc fe54 	bl	8001768 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d902      	bls.n	8004ad0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	73fb      	strb	r3, [r7, #15]
          break;
 8004ace:	e005      	b.n	8004adc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ef      	beq.n	8004abc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	4904      	ldr	r1, [pc, #16]	; (8004afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000

08004b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e049      	b.n	8004ba6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f841 	bl	8004bae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f000 f9f8 	bl	8004f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d001      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e04f      	b.n	8004c7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a23      	ldr	r2, [pc, #140]	; (8004c88 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01d      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c06:	d018      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <HAL_TIM_Base_Start_IT+0xc8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d115      	bne.n	8004c66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d015      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0xb4>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c52:	d011      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c64:	e008      	b.n	8004c78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e000      	b.n	8004c7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40013400 	.word	0x40013400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	00010007 	.word	0x00010007

08004ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0202 	mvn.w	r2, #2
 8004cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f905 	bl	8004ef6 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f8f7 	bl	8004ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f908 	bl	8004f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d122      	bne.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d11b      	bne.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0204 	mvn.w	r2, #4
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8db 	bl	8004ef6 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8cd 	bl	8004ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f8de 	bl	8004f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d122      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d11b      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0208 	mvn.w	r2, #8
 8004d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f8b1 	bl	8004ef6 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f8a3 	bl	8004ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f8b4 	bl	8004f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d122      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d11b      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0210 	mvn.w	r2, #16
 8004dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f887 	bl	8004ef6 <HAL_TIM_IC_CaptureCallback>
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f879 	bl	8004ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f88a 	bl	8004f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d10e      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0201 	mvn.w	r2, #1
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fad2 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d10e      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d107      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f914 	bl	800507c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e62:	d10e      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b80      	cmp	r3, #128	; 0x80
 8004e70:	d107      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f907 	bl	8005090 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d10e      	bne.n	8004eae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d107      	bne.n	8004eae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f838 	bl	8004f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d10e      	bne.n	8004eda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d107      	bne.n	8004eda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f06f 0220 	mvn.w	r2, #32
 8004ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f8c7 	bl	8005068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a40      	ldr	r2, [pc, #256]	; (8005048 <TIM_Base_SetConfig+0x114>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f52:	d00f      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a3d      	ldr	r2, [pc, #244]	; (800504c <TIM_Base_SetConfig+0x118>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00b      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3c      	ldr	r2, [pc, #240]	; (8005050 <TIM_Base_SetConfig+0x11c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3b      	ldr	r2, [pc, #236]	; (8005054 <TIM_Base_SetConfig+0x120>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3a      	ldr	r2, [pc, #232]	; (8005058 <TIM_Base_SetConfig+0x124>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d108      	bne.n	8004f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2f      	ldr	r2, [pc, #188]	; (8005048 <TIM_Base_SetConfig+0x114>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01f      	beq.n	8004fce <TIM_Base_SetConfig+0x9a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d01b      	beq.n	8004fce <TIM_Base_SetConfig+0x9a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2c      	ldr	r2, [pc, #176]	; (800504c <TIM_Base_SetConfig+0x118>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d017      	beq.n	8004fce <TIM_Base_SetConfig+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2b      	ldr	r2, [pc, #172]	; (8005050 <TIM_Base_SetConfig+0x11c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <TIM_Base_SetConfig+0x9a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <TIM_Base_SetConfig+0x120>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00f      	beq.n	8004fce <TIM_Base_SetConfig+0x9a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a29      	ldr	r2, [pc, #164]	; (8005058 <TIM_Base_SetConfig+0x124>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <TIM_Base_SetConfig+0x9a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a28      	ldr	r2, [pc, #160]	; (800505c <TIM_Base_SetConfig+0x128>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <TIM_Base_SetConfig+0x9a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a27      	ldr	r2, [pc, #156]	; (8005060 <TIM_Base_SetConfig+0x12c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a26      	ldr	r2, [pc, #152]	; (8005064 <TIM_Base_SetConfig+0x130>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d108      	bne.n	8004fe0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a10      	ldr	r2, [pc, #64]	; (8005048 <TIM_Base_SetConfig+0x114>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00f      	beq.n	800502c <TIM_Base_SetConfig+0xf8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a12      	ldr	r2, [pc, #72]	; (8005058 <TIM_Base_SetConfig+0x124>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_Base_SetConfig+0xf8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a11      	ldr	r2, [pc, #68]	; (800505c <TIM_Base_SetConfig+0x128>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_Base_SetConfig+0xf8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a10      	ldr	r2, [pc, #64]	; (8005060 <TIM_Base_SetConfig+0x12c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0xf8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a0f      	ldr	r2, [pc, #60]	; (8005064 <TIM_Base_SetConfig+0x130>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d103      	bne.n	8005034 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	615a      	str	r2, [r3, #20]
}
 800503a:	bf00      	nop
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40000400 	.word	0x40000400
 8005050:	40000800 	.word	0x40000800
 8005054:	40000c00 	.word	0x40000c00
 8005058:	40013400 	.word	0x40013400
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800

08005068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e040      	b.n	8005138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fc f9bc 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	; 0x24
 80050d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8c0 	bl	8005268 <UART_SetConfig>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e022      	b.n	8005138 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fb3e 	bl	800577c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800510e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800511e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fbc5 	bl	80058c0 <UART_CheckIdleState>
 8005136:	4603      	mov	r3, r0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005154:	2b20      	cmp	r3, #32
 8005156:	f040 8082 	bne.w	800525e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_UART_Transmit+0x26>
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e07a      	b.n	8005260 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_UART_Transmit+0x38>
 8005174:	2302      	movs	r3, #2
 8005176:	e073      	b.n	8005260 <HAL_UART_Transmit+0x120>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2221      	movs	r2, #33	; 0x21
 800518c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800518e:	f7fc faeb 	bl	8001768 <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d108      	bne.n	80051c0 <HAL_UART_Transmit+0x80>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e003      	b.n	80051c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051d0:	e02d      	b.n	800522e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2200      	movs	r2, #0
 80051da:	2180      	movs	r1, #128	; 0x80
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fbb8 	bl	8005952 <UART_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e039      	b.n	8005260 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10b      	bne.n	800520a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	881a      	ldrh	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051fe:	b292      	uxth	r2, r2
 8005200:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	3302      	adds	r3, #2
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	e008      	b.n	800521c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	b292      	uxth	r2, r2
 8005214:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3301      	adds	r3, #1
 800521a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1cb      	bne.n	80051d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2200      	movs	r2, #0
 8005242:	2140      	movs	r1, #64	; 0x40
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fb84 	bl	8005952 <UART_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e005      	b.n	8005260 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e000      	b.n	8005260 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800525e:	2302      	movs	r3, #2
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005268:	b5b0      	push	{r4, r5, r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	4313      	orrs	r3, r2
 800528a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4bad      	ldr	r3, [pc, #692]	; (8005548 <UART_SetConfig+0x2e0>)
 8005294:	4013      	ands	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	69f9      	ldr	r1, [r7, #28]
 800529c:	430b      	orrs	r3, r1
 800529e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4aa2      	ldr	r2, [pc, #648]	; (800554c <UART_SetConfig+0x2e4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a99      	ldr	r2, [pc, #612]	; (8005550 <UART_SetConfig+0x2e8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d121      	bne.n	8005332 <UART_SetConfig+0xca>
 80052ee:	4b99      	ldr	r3, [pc, #612]	; (8005554 <UART_SetConfig+0x2ec>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d817      	bhi.n	800532c <UART_SetConfig+0xc4>
 80052fc:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0x9c>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005315 	.word	0x08005315
 8005308:	08005321 	.word	0x08005321
 800530c:	0800531b 	.word	0x0800531b
 8005310:	08005327 	.word	0x08005327
 8005314:	2301      	movs	r3, #1
 8005316:	76fb      	strb	r3, [r7, #27]
 8005318:	e0e7      	b.n	80054ea <UART_SetConfig+0x282>
 800531a:	2302      	movs	r3, #2
 800531c:	76fb      	strb	r3, [r7, #27]
 800531e:	e0e4      	b.n	80054ea <UART_SetConfig+0x282>
 8005320:	2304      	movs	r3, #4
 8005322:	76fb      	strb	r3, [r7, #27]
 8005324:	e0e1      	b.n	80054ea <UART_SetConfig+0x282>
 8005326:	2308      	movs	r3, #8
 8005328:	76fb      	strb	r3, [r7, #27]
 800532a:	e0de      	b.n	80054ea <UART_SetConfig+0x282>
 800532c:	2310      	movs	r3, #16
 800532e:	76fb      	strb	r3, [r7, #27]
 8005330:	e0db      	b.n	80054ea <UART_SetConfig+0x282>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a88      	ldr	r2, [pc, #544]	; (8005558 <UART_SetConfig+0x2f0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d132      	bne.n	80053a2 <UART_SetConfig+0x13a>
 800533c:	4b85      	ldr	r3, [pc, #532]	; (8005554 <UART_SetConfig+0x2ec>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d828      	bhi.n	800539c <UART_SetConfig+0x134>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0xe8>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005385 	.word	0x08005385
 8005354:	0800539d 	.word	0x0800539d
 8005358:	0800539d 	.word	0x0800539d
 800535c:	0800539d 	.word	0x0800539d
 8005360:	08005391 	.word	0x08005391
 8005364:	0800539d 	.word	0x0800539d
 8005368:	0800539d 	.word	0x0800539d
 800536c:	0800539d 	.word	0x0800539d
 8005370:	0800538b 	.word	0x0800538b
 8005374:	0800539d 	.word	0x0800539d
 8005378:	0800539d 	.word	0x0800539d
 800537c:	0800539d 	.word	0x0800539d
 8005380:	08005397 	.word	0x08005397
 8005384:	2300      	movs	r3, #0
 8005386:	76fb      	strb	r3, [r7, #27]
 8005388:	e0af      	b.n	80054ea <UART_SetConfig+0x282>
 800538a:	2302      	movs	r3, #2
 800538c:	76fb      	strb	r3, [r7, #27]
 800538e:	e0ac      	b.n	80054ea <UART_SetConfig+0x282>
 8005390:	2304      	movs	r3, #4
 8005392:	76fb      	strb	r3, [r7, #27]
 8005394:	e0a9      	b.n	80054ea <UART_SetConfig+0x282>
 8005396:	2308      	movs	r3, #8
 8005398:	76fb      	strb	r3, [r7, #27]
 800539a:	e0a6      	b.n	80054ea <UART_SetConfig+0x282>
 800539c:	2310      	movs	r3, #16
 800539e:	76fb      	strb	r3, [r7, #27]
 80053a0:	e0a3      	b.n	80054ea <UART_SetConfig+0x282>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a6d      	ldr	r2, [pc, #436]	; (800555c <UART_SetConfig+0x2f4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d120      	bne.n	80053ee <UART_SetConfig+0x186>
 80053ac:	4b69      	ldr	r3, [pc, #420]	; (8005554 <UART_SetConfig+0x2ec>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053b6:	2b30      	cmp	r3, #48	; 0x30
 80053b8:	d013      	beq.n	80053e2 <UART_SetConfig+0x17a>
 80053ba:	2b30      	cmp	r3, #48	; 0x30
 80053bc:	d814      	bhi.n	80053e8 <UART_SetConfig+0x180>
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d009      	beq.n	80053d6 <UART_SetConfig+0x16e>
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d810      	bhi.n	80053e8 <UART_SetConfig+0x180>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <UART_SetConfig+0x168>
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d006      	beq.n	80053dc <UART_SetConfig+0x174>
 80053ce:	e00b      	b.n	80053e8 <UART_SetConfig+0x180>
 80053d0:	2300      	movs	r3, #0
 80053d2:	76fb      	strb	r3, [r7, #27]
 80053d4:	e089      	b.n	80054ea <UART_SetConfig+0x282>
 80053d6:	2302      	movs	r3, #2
 80053d8:	76fb      	strb	r3, [r7, #27]
 80053da:	e086      	b.n	80054ea <UART_SetConfig+0x282>
 80053dc:	2304      	movs	r3, #4
 80053de:	76fb      	strb	r3, [r7, #27]
 80053e0:	e083      	b.n	80054ea <UART_SetConfig+0x282>
 80053e2:	2308      	movs	r3, #8
 80053e4:	76fb      	strb	r3, [r7, #27]
 80053e6:	e080      	b.n	80054ea <UART_SetConfig+0x282>
 80053e8:	2310      	movs	r3, #16
 80053ea:	76fb      	strb	r3, [r7, #27]
 80053ec:	e07d      	b.n	80054ea <UART_SetConfig+0x282>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a5b      	ldr	r2, [pc, #364]	; (8005560 <UART_SetConfig+0x2f8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d120      	bne.n	800543a <UART_SetConfig+0x1d2>
 80053f8:	4b56      	ldr	r3, [pc, #344]	; (8005554 <UART_SetConfig+0x2ec>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005402:	2bc0      	cmp	r3, #192	; 0xc0
 8005404:	d013      	beq.n	800542e <UART_SetConfig+0x1c6>
 8005406:	2bc0      	cmp	r3, #192	; 0xc0
 8005408:	d814      	bhi.n	8005434 <UART_SetConfig+0x1cc>
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d009      	beq.n	8005422 <UART_SetConfig+0x1ba>
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d810      	bhi.n	8005434 <UART_SetConfig+0x1cc>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <UART_SetConfig+0x1b4>
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d006      	beq.n	8005428 <UART_SetConfig+0x1c0>
 800541a:	e00b      	b.n	8005434 <UART_SetConfig+0x1cc>
 800541c:	2300      	movs	r3, #0
 800541e:	76fb      	strb	r3, [r7, #27]
 8005420:	e063      	b.n	80054ea <UART_SetConfig+0x282>
 8005422:	2302      	movs	r3, #2
 8005424:	76fb      	strb	r3, [r7, #27]
 8005426:	e060      	b.n	80054ea <UART_SetConfig+0x282>
 8005428:	2304      	movs	r3, #4
 800542a:	76fb      	strb	r3, [r7, #27]
 800542c:	e05d      	b.n	80054ea <UART_SetConfig+0x282>
 800542e:	2308      	movs	r3, #8
 8005430:	76fb      	strb	r3, [r7, #27]
 8005432:	e05a      	b.n	80054ea <UART_SetConfig+0x282>
 8005434:	2310      	movs	r3, #16
 8005436:	76fb      	strb	r3, [r7, #27]
 8005438:	e057      	b.n	80054ea <UART_SetConfig+0x282>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a49      	ldr	r2, [pc, #292]	; (8005564 <UART_SetConfig+0x2fc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d125      	bne.n	8005490 <UART_SetConfig+0x228>
 8005444:	4b43      	ldr	r3, [pc, #268]	; (8005554 <UART_SetConfig+0x2ec>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005452:	d017      	beq.n	8005484 <UART_SetConfig+0x21c>
 8005454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005458:	d817      	bhi.n	800548a <UART_SetConfig+0x222>
 800545a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800545e:	d00b      	beq.n	8005478 <UART_SetConfig+0x210>
 8005460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005464:	d811      	bhi.n	800548a <UART_SetConfig+0x222>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <UART_SetConfig+0x20a>
 800546a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546e:	d006      	beq.n	800547e <UART_SetConfig+0x216>
 8005470:	e00b      	b.n	800548a <UART_SetConfig+0x222>
 8005472:	2300      	movs	r3, #0
 8005474:	76fb      	strb	r3, [r7, #27]
 8005476:	e038      	b.n	80054ea <UART_SetConfig+0x282>
 8005478:	2302      	movs	r3, #2
 800547a:	76fb      	strb	r3, [r7, #27]
 800547c:	e035      	b.n	80054ea <UART_SetConfig+0x282>
 800547e:	2304      	movs	r3, #4
 8005480:	76fb      	strb	r3, [r7, #27]
 8005482:	e032      	b.n	80054ea <UART_SetConfig+0x282>
 8005484:	2308      	movs	r3, #8
 8005486:	76fb      	strb	r3, [r7, #27]
 8005488:	e02f      	b.n	80054ea <UART_SetConfig+0x282>
 800548a:	2310      	movs	r3, #16
 800548c:	76fb      	strb	r3, [r7, #27]
 800548e:	e02c      	b.n	80054ea <UART_SetConfig+0x282>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2d      	ldr	r2, [pc, #180]	; (800554c <UART_SetConfig+0x2e4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d125      	bne.n	80054e6 <UART_SetConfig+0x27e>
 800549a:	4b2e      	ldr	r3, [pc, #184]	; (8005554 <UART_SetConfig+0x2ec>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a8:	d017      	beq.n	80054da <UART_SetConfig+0x272>
 80054aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ae:	d817      	bhi.n	80054e0 <UART_SetConfig+0x278>
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b4:	d00b      	beq.n	80054ce <UART_SetConfig+0x266>
 80054b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ba:	d811      	bhi.n	80054e0 <UART_SetConfig+0x278>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <UART_SetConfig+0x260>
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c4:	d006      	beq.n	80054d4 <UART_SetConfig+0x26c>
 80054c6:	e00b      	b.n	80054e0 <UART_SetConfig+0x278>
 80054c8:	2300      	movs	r3, #0
 80054ca:	76fb      	strb	r3, [r7, #27]
 80054cc:	e00d      	b.n	80054ea <UART_SetConfig+0x282>
 80054ce:	2302      	movs	r3, #2
 80054d0:	76fb      	strb	r3, [r7, #27]
 80054d2:	e00a      	b.n	80054ea <UART_SetConfig+0x282>
 80054d4:	2304      	movs	r3, #4
 80054d6:	76fb      	strb	r3, [r7, #27]
 80054d8:	e007      	b.n	80054ea <UART_SetConfig+0x282>
 80054da:	2308      	movs	r3, #8
 80054dc:	76fb      	strb	r3, [r7, #27]
 80054de:	e004      	b.n	80054ea <UART_SetConfig+0x282>
 80054e0:	2310      	movs	r3, #16
 80054e2:	76fb      	strb	r3, [r7, #27]
 80054e4:	e001      	b.n	80054ea <UART_SetConfig+0x282>
 80054e6:	2310      	movs	r3, #16
 80054e8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a17      	ldr	r2, [pc, #92]	; (800554c <UART_SetConfig+0x2e4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	f040 8087 	bne.w	8005604 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054f6:	7efb      	ldrb	r3, [r7, #27]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d837      	bhi.n	800556c <UART_SetConfig+0x304>
 80054fc:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <UART_SetConfig+0x29c>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005529 	.word	0x08005529
 8005508:	0800556d 	.word	0x0800556d
 800550c:	08005531 	.word	0x08005531
 8005510:	0800556d 	.word	0x0800556d
 8005514:	08005537 	.word	0x08005537
 8005518:	0800556d 	.word	0x0800556d
 800551c:	0800556d 	.word	0x0800556d
 8005520:	0800556d 	.word	0x0800556d
 8005524:	0800553f 	.word	0x0800553f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005528:	f7fe fd70 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 800552c:	6178      	str	r0, [r7, #20]
        break;
 800552e:	e022      	b.n	8005576 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <UART_SetConfig+0x300>)
 8005532:	617b      	str	r3, [r7, #20]
        break;
 8005534:	e01f      	b.n	8005576 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005536:	f7fe fcd1 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 800553a:	6178      	str	r0, [r7, #20]
        break;
 800553c:	e01b      	b.n	8005576 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005542:	617b      	str	r3, [r7, #20]
        break;
 8005544:	e017      	b.n	8005576 <UART_SetConfig+0x30e>
 8005546:	bf00      	nop
 8005548:	efff69f3 	.word	0xefff69f3
 800554c:	40008000 	.word	0x40008000
 8005550:	40013800 	.word	0x40013800
 8005554:	40021000 	.word	0x40021000
 8005558:	40004400 	.word	0x40004400
 800555c:	40004800 	.word	0x40004800
 8005560:	40004c00 	.word	0x40004c00
 8005564:	40005000 	.word	0x40005000
 8005568:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	76bb      	strb	r3, [r7, #26]
        break;
 8005574:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80f1 	beq.w	8005760 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	4413      	add	r3, r2
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	429a      	cmp	r2, r3
 800558c:	d305      	bcc.n	800559a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	429a      	cmp	r2, r3
 8005598:	d902      	bls.n	80055a0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	76bb      	strb	r3, [r7, #26]
 800559e:	e0df      	b.n	8005760 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f04f 0100 	mov.w	r1, #0
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	020b      	lsls	r3, r1, #8
 80055b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055b6:	0202      	lsls	r2, r0, #8
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	6849      	ldr	r1, [r1, #4]
 80055bc:	0849      	lsrs	r1, r1, #1
 80055be:	4608      	mov	r0, r1
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	1814      	adds	r4, r2, r0
 80055c6:	eb43 0501 	adc.w	r5, r3, r1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	4620      	mov	r0, r4
 80055d6:	4629      	mov	r1, r5
 80055d8:	f7fb f958 	bl	800088c <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4613      	mov	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ea:	d308      	bcc.n	80055fe <UART_SetConfig+0x396>
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f2:	d204      	bcs.n	80055fe <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	60da      	str	r2, [r3, #12]
 80055fc:	e0b0      	b.n	8005760 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	76bb      	strb	r3, [r7, #26]
 8005602:	e0ad      	b.n	8005760 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560c:	d15b      	bne.n	80056c6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800560e:	7efb      	ldrb	r3, [r7, #27]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d828      	bhi.n	8005666 <UART_SetConfig+0x3fe>
 8005614:	a201      	add	r2, pc, #4	; (adr r2, 800561c <UART_SetConfig+0x3b4>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	08005641 	.word	0x08005641
 8005620:	08005649 	.word	0x08005649
 8005624:	08005651 	.word	0x08005651
 8005628:	08005667 	.word	0x08005667
 800562c:	08005657 	.word	0x08005657
 8005630:	08005667 	.word	0x08005667
 8005634:	08005667 	.word	0x08005667
 8005638:	08005667 	.word	0x08005667
 800563c:	0800565f 	.word	0x0800565f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005640:	f7fe fce4 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 8005644:	6178      	str	r0, [r7, #20]
        break;
 8005646:	e013      	b.n	8005670 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7fe fcf6 	bl	8004038 <HAL_RCC_GetPCLK2Freq>
 800564c:	6178      	str	r0, [r7, #20]
        break;
 800564e:	e00f      	b.n	8005670 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005650:	4b49      	ldr	r3, [pc, #292]	; (8005778 <UART_SetConfig+0x510>)
 8005652:	617b      	str	r3, [r7, #20]
        break;
 8005654:	e00c      	b.n	8005670 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005656:	f7fe fc41 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 800565a:	6178      	str	r0, [r7, #20]
        break;
 800565c:	e008      	b.n	8005670 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005662:	617b      	str	r3, [r7, #20]
        break;
 8005664:	e004      	b.n	8005670 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	76bb      	strb	r3, [r7, #26]
        break;
 800566e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d074      	beq.n	8005760 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	005a      	lsls	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	441a      	add	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	fbb2 f3f3 	udiv	r3, r2, r3
 800568a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b0f      	cmp	r3, #15
 8005690:	d916      	bls.n	80056c0 <UART_SetConfig+0x458>
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005698:	d212      	bcs.n	80056c0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f023 030f 	bic.w	r3, r3, #15
 80056a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	89fb      	ldrh	r3, [r7, #14]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	89fa      	ldrh	r2, [r7, #14]
 80056bc:	60da      	str	r2, [r3, #12]
 80056be:	e04f      	b.n	8005760 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	76bb      	strb	r3, [r7, #26]
 80056c4:	e04c      	b.n	8005760 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056c6:	7efb      	ldrb	r3, [r7, #27]
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d828      	bhi.n	800571e <UART_SetConfig+0x4b6>
 80056cc:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <UART_SetConfig+0x46c>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	08005701 	.word	0x08005701
 80056dc:	08005709 	.word	0x08005709
 80056e0:	0800571f 	.word	0x0800571f
 80056e4:	0800570f 	.word	0x0800570f
 80056e8:	0800571f 	.word	0x0800571f
 80056ec:	0800571f 	.word	0x0800571f
 80056f0:	0800571f 	.word	0x0800571f
 80056f4:	08005717 	.word	0x08005717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f8:	f7fe fc88 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 80056fc:	6178      	str	r0, [r7, #20]
        break;
 80056fe:	e013      	b.n	8005728 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005700:	f7fe fc9a 	bl	8004038 <HAL_RCC_GetPCLK2Freq>
 8005704:	6178      	str	r0, [r7, #20]
        break;
 8005706:	e00f      	b.n	8005728 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005708:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <UART_SetConfig+0x510>)
 800570a:	617b      	str	r3, [r7, #20]
        break;
 800570c:	e00c      	b.n	8005728 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570e:	f7fe fbe5 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8005712:	6178      	str	r0, [r7, #20]
        break;
 8005714:	e008      	b.n	8005728 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571a:	617b      	str	r3, [r7, #20]
        break;
 800571c:	e004      	b.n	8005728 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	76bb      	strb	r3, [r7, #26]
        break;
 8005726:	bf00      	nop
    }

    if (pclk != 0U)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	085a      	lsrs	r2, r3, #1
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	441a      	add	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005740:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b0f      	cmp	r3, #15
 8005746:	d909      	bls.n	800575c <UART_SetConfig+0x4f4>
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574e:	d205      	bcs.n	800575c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60da      	str	r2, [r3, #12]
 800575a:	e001      	b.n	8005760 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800576c:	7ebb      	ldrb	r3, [r7, #26]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bdb0      	pop	{r4, r5, r7, pc}
 8005776:	bf00      	nop
 8005778:	00f42400 	.word	0x00f42400

0800577c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01a      	beq.n	8005892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800587a:	d10a      	bne.n	8005892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058d0:	f7fb ff4a 	bl	8001768 <HAL_GetTick>
 80058d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d10e      	bne.n	8005902 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f82d 	bl	8005952 <UART_WaitOnFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e023      	b.n	800594a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d10e      	bne.n	800592e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f817 	bl	8005952 <UART_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e00d      	b.n	800594a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b09c      	sub	sp, #112	; 0x70
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4613      	mov	r3, r2
 8005960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	e0a5      	b.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800596a:	f000 80a1 	beq.w	8005ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596e:	f7fb fefb 	bl	8001768 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <UART_WaitOnFlagUntilTimeout+0x32>
 800597e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005980:	2b00      	cmp	r3, #0
 8005982:	d13e      	bne.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005998:	667b      	str	r3, [r7, #100]	; 0x64
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e6      	bne.n	8005984 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3308      	adds	r3, #8
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	663b      	str	r3, [r7, #96]	; 0x60
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3308      	adds	r3, #8
 80059d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80059d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e5      	bne.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e067      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d04f      	beq.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1e:	d147      	bne.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a28:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e6      	bne.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3308      	adds	r3, #8
 8005a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f023 0301 	bic.w	r3, r3, #1
 8005a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a7c:	623a      	str	r2, [r7, #32]
 8005a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	69f9      	ldr	r1, [r7, #28]
 8005a82:	6a3a      	ldr	r2, [r7, #32]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e5      	bne.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e010      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	bf0c      	ite	eq
 8005ac0:	2301      	moveq	r3, #1
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	f43f af4a 	beq.w	8005964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3770      	adds	r7, #112	; 0x70
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ada:	b084      	sub	sp, #16
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	f107 001c 	add.w	r0, r7, #28
 8005ae8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f99d 	bl	8005e38 <USB_CoreReset>
 8005afe:	4603      	mov	r3, r0
 8005b00:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38
 8005b14:	e005      	b.n	8005b22 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b2e:	b004      	add	sp, #16
 8005b30:	4770      	bx	lr

08005b32 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f043 0201 	orr.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f023 0201 	bic.w	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d115      	bne.n	8005bc4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	f7fb fdeb 	bl	8001780 <HAL_Delay>
      ms++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f932 	bl	8005e1a <USB_GetMode>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d01e      	beq.n	8005bfa <USB_SetCurrentMode+0x84>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b31      	cmp	r3, #49	; 0x31
 8005bc0:	d9f0      	bls.n	8005ba4 <USB_SetCurrentMode+0x2e>
 8005bc2:	e01a      	b.n	8005bfa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d115      	bne.n	8005bf6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	f7fb fdd2 	bl	8001780 <HAL_Delay>
      ms++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f919 	bl	8005e1a <USB_GetMode>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <USB_SetCurrentMode+0x84>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b31      	cmp	r3, #49	; 0x31
 8005bf2:	d9f0      	bls.n	8005bd6 <USB_SetCurrentMode+0x60>
 8005bf4:	e001      	b.n	8005bfa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e005      	b.n	8005c06 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b32      	cmp	r3, #50	; 0x32
 8005bfe:	d101      	bne.n	8005c04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	4a12      	ldr	r2, [pc, #72]	; (8005c70 <USB_FlushTxFifo+0x60>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e01a      	b.n	8005c64 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	daf3      	bge.n	8005c1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	019b      	lsls	r3, r3, #6
 8005c3e:	f043 0220 	orr.w	r2, r3, #32
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <USB_FlushTxFifo+0x60>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e006      	b.n	8005c64 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d0f1      	beq.n	8005c46 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	00030d40 	.word	0x00030d40

08005c74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	4a11      	ldr	r2, [pc, #68]	; (8005ccc <USB_FlushRxFifo+0x58>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e017      	b.n	8005cc0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	daf3      	bge.n	8005c80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <USB_FlushRxFifo+0x58>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e006      	b.n	8005cc0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b10      	cmp	r3, #16
 8005cbc:	d0f1      	beq.n	8005ca2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	00030d40 	.word	0x00030d40

08005cd0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b089      	sub	sp, #36	; 0x24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	460b      	mov	r3, r1
 8005ce0:	71fb      	strb	r3, [r7, #7]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005cee:	88bb      	ldrh	r3, [r7, #4]
 8005cf0:	3303      	adds	r3, #3
 8005cf2:	089b      	lsrs	r3, r3, #2
 8005cf4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	e018      	b.n	8005d2e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	031a      	lsls	r2, r3, #12
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d08:	461a      	mov	r2, r3
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	3301      	adds	r3, #1
 8005d14:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	3301      	adds	r3, #1
 8005d26:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d3e2      	bcc.n	8005cfc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3724      	adds	r7, #36	; 0x24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b08b      	sub	sp, #44	; 0x2c
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	089b      	lsrs	r3, r3, #2
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	623b      	str	r3, [r7, #32]
 8005d6e:	e014      	b.n	8005d9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	3301      	adds	r3, #1
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	3301      	adds	r3, #1
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	3301      	adds	r3, #1
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	3301      	adds	r3, #1
 8005d98:	623b      	str	r3, [r7, #32]
 8005d9a:	6a3a      	ldr	r2, [r7, #32]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d3e6      	bcc.n	8005d70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005da2:	8bfb      	ldrh	r3, [r7, #30]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01e      	beq.n	8005de6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db2:	461a      	mov	r2, r3
 8005db4:	f107 0310 	add.w	r3, r7, #16
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	701a      	strb	r2, [r3, #0]
      i++;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005dda:	8bfb      	ldrh	r3, [r7, #30]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005de0:	8bfb      	ldrh	r3, [r7, #30]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1ea      	bne.n	8005dbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	372c      	adds	r7, #44	; 0x2c
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0301 	and.w	r3, r3, #1
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3301      	adds	r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <USB_CoreReset+0x60>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e01a      	b.n	8005e8a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	daf3      	bge.n	8005e44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f043 0201 	orr.w	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	4a09      	ldr	r2, [pc, #36]	; (8005e98 <USB_CoreReset+0x60>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d901      	bls.n	8005e7c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e006      	b.n	8005e8a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d0f1      	beq.n	8005e6c <USB_CoreReset+0x34>

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	00030d40 	.word	0x00030d40

08005e9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ee8:	f023 0304 	bic.w	r3, r3, #4
 8005eec:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005eee:	2110      	movs	r1, #16
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fe8d 	bl	8005c10 <USB_FlushTxFifo>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff feb7 	bl	8005c74 <USB_FlushRxFifo>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	e015      	b.n	8005f42 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f22:	461a      	mov	r2, r3
 8005f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f28:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f36:	461a      	mov	r2, r3
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d3e5      	bcc.n	8005f16 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f56:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a0c      	ldr	r2, [pc, #48]	; (8005f94 <USB_HostInit+0xf8>)
 8005f62:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a0c      	ldr	r2, [pc, #48]	; (8005f98 <USB_HostInit+0xfc>)
 8005f68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f043 0210 	orr.w	r2, r3, #16
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699a      	ldr	r2, [r3, #24]
 8005f7c:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <USB_HostInit+0x100>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f90:	b004      	add	sp, #16
 8005f92:	4770      	bx	lr
 8005f94:	00600080 	.word	0x00600080
 8005f98:	004000e0 	.word	0x004000e0
 8005f9c:	a3200008 	.word	0xa3200008

08005fa0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fbe:	f023 0303 	bic.w	r3, r3, #3
 8005fc2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005fee:	6053      	str	r3, [r2, #4]
 8005ff0:	e009      	b.n	8006006 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d106      	bne.n	8006006 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ffe:	461a      	mov	r2, r3
 8006000:	f241 7370 	movw	r3, #6000	; 0x1770
 8006004:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006034:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800603e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006042:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006044:	2064      	movs	r0, #100	; 0x64
 8006046:	f7fb fb9b 	bl	8001780 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006056:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006058:	200a      	movs	r0, #10
 800605a:	f7fb fb91 	bl	8001780 <HAL_Delay>

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800608c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <USB_DriveVbus+0x44>
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d106      	bne.n	80060ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b6:	d109      	bne.n	80060cc <USB_DriveVbus+0x64>
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	0c5b      	lsrs	r3, r3, #17
 80060f8:	f003 0303 	and.w	r3, r3, #3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	b29b      	uxth	r3, r3
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	4608      	mov	r0, r1
 8006136:	4611      	mov	r1, r2
 8006138:	461a      	mov	r2, r3
 800613a:	4603      	mov	r3, r0
 800613c:	70fb      	strb	r3, [r7, #3]
 800613e:	460b      	mov	r3, r1
 8006140:	70bb      	strb	r3, [r7, #2]
 8006142:	4613      	mov	r3, r2
 8006144:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4413      	add	r3, r2
 8006156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615a:	461a      	mov	r2, r3
 800615c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006160:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006162:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006166:	2b03      	cmp	r3, #3
 8006168:	d867      	bhi.n	800623a <USB_HC_Init+0x10e>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <USB_HC_Init+0x44>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006181 	.word	0x08006181
 8006174:	080061fd 	.word	0x080061fd
 8006178:	08006181 	.word	0x08006181
 800617c:	080061bf 	.word	0x080061bf
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4413      	add	r3, r2
 8006188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618c:	461a      	mov	r2, r3
 800618e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006192:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006194:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006198:	2b00      	cmp	r3, #0
 800619a:	da51      	bge.n	8006240 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ba:	60d3      	str	r3, [r2, #12]
      }
      break;
 80061bc:	e040      	b.n	8006240 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ca:	461a      	mov	r2, r3
 80061cc:	f240 639d 	movw	r3, #1693	; 0x69d
 80061d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	da34      	bge.n	8006244 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f8:	60d3      	str	r3, [r2, #12]
      }

      break;
 80061fa:	e023      	b.n	8006244 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	461a      	mov	r2, r3
 800620a:	f240 2325 	movw	r3, #549	; 0x225
 800620e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006210:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006214:	2b00      	cmp	r3, #0
 8006216:	da17      	bge.n	8006248 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4413      	add	r3, r2
 8006220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	78fa      	ldrb	r2, [r7, #3]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	440a      	add	r2, r1
 800622e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006232:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006236:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006238:	e006      	b.n	8006248 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	77fb      	strb	r3, [r7, #31]
      break;
 800623e:	e004      	b.n	800624a <USB_HC_Init+0x11e>
      break;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <USB_HC_Init+0x11e>
      break;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <USB_HC_Init+0x11e>
      break;
 8006248:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	440a      	add	r2, r1
 8006260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006264:	f043 0302 	orr.w	r3, r3, #2
 8006268:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	2101      	movs	r1, #1
 800627a:	fa01 f303 	lsl.w	r3, r1, r3
 800627e:	6939      	ldr	r1, [r7, #16]
 8006280:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006284:	4313      	orrs	r3, r2
 8006286:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006294:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006298:	2b00      	cmp	r3, #0
 800629a:	da03      	bge.n	80062a4 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800629c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e001      	b.n	80062a8 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff ff16 	bl	80060da <USB_GetHostSpeed>
 80062ae:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80062b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d106      	bne.n	80062c6 <USB_HC_Init+0x19a>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d003      	beq.n	80062c6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e001      	b.n	80062ca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062ca:	787b      	ldrb	r3, [r7, #1]
 80062cc:	059b      	lsls	r3, r3, #22
 80062ce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062d2:	78bb      	ldrb	r3, [r7, #2]
 80062d4:	02db      	lsls	r3, r3, #11
 80062d6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062da:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062e0:	049b      	lsls	r3, r3, #18
 80062e2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062e6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80062ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	0159      	lsls	r1, r3, #5
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	440b      	add	r3, r1
 80062fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006300:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006306:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006308:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800630c:	2b03      	cmp	r3, #3
 800630e:	d10f      	bne.n	8006330 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	4413      	add	r3, r2
 8006318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	78fa      	ldrb	r2, [r7, #3]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	440a      	add	r2, r1
 8006326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800632e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006330:	7ffb      	ldrb	r3, [r7, #31]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop

0800633c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006354:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d018      	beq.n	8006390 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	8912      	ldrh	r2, [r2, #8]
 8006366:	4413      	add	r3, r2
 8006368:	3b01      	subs	r3, #1
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	8912      	ldrh	r2, [r2, #8]
 800636e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006372:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006374:	8bfa      	ldrh	r2, [r7, #30]
 8006376:	8a7b      	ldrh	r3, [r7, #18]
 8006378:	429a      	cmp	r2, r3
 800637a:	d90b      	bls.n	8006394 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800637c:	8a7b      	ldrh	r3, [r7, #18]
 800637e:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006380:	8bfb      	ldrh	r3, [r7, #30]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	8912      	ldrh	r2, [r2, #8]
 8006386:	fb02 f203 	mul.w	r2, r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	611a      	str	r2, [r3, #16]
 800638e:	e001      	b.n	8006394 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006390:	2301      	movs	r3, #1
 8006392:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d007      	beq.n	80063ac <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800639c:	8bfb      	ldrh	r3, [r7, #30]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	8912      	ldrh	r2, [r2, #8]
 80063a2:	fb02 f203 	mul.w	r2, r2, r3
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	611a      	str	r2, [r3, #16]
 80063aa:	e003      	b.n	80063b4 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695a      	ldr	r2, [r3, #20]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063bc:	8bfb      	ldrh	r3, [r7, #30]
 80063be:	04d9      	lsls	r1, r3, #19
 80063c0:	4b59      	ldr	r3, [pc, #356]	; (8006528 <USB_HC_StartXfer+0x1ec>)
 80063c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	7a9b      	ldrb	r3, [r3, #10]
 80063ca:	075b      	lsls	r3, r3, #29
 80063cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063d0:	6979      	ldr	r1, [r7, #20]
 80063d2:	0148      	lsls	r0, r1, #5
 80063d4:	69b9      	ldr	r1, [r7, #24]
 80063d6:	4401      	add	r1, r0
 80063d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063de:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	440a      	add	r2, r1
 800640e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006412:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006416:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	7c7b      	ldrb	r3, [r7, #17]
 8006428:	075b      	lsls	r3, r3, #29
 800642a:	6979      	ldr	r1, [r7, #20]
 800642c:	0148      	lsls	r0, r1, #5
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	4401      	add	r1, r0
 8006432:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006436:	4313      	orrs	r3, r2
 8006438:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006450:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	78db      	ldrb	r3, [r3, #3]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	e003      	b.n	800646c <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800646a:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006472:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006480:	461a      	mov	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	78db      	ldrb	r3, [r3, #3]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d147      	bne.n	800651e <USB_HC_StartXfer+0x1e2>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d043      	beq.n	800651e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	79db      	ldrb	r3, [r3, #7]
 800649a:	2b03      	cmp	r3, #3
 800649c:	d830      	bhi.n	8006500 <USB_HC_StartXfer+0x1c4>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <USB_HC_StartXfer+0x168>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064b5 	.word	0x080064b5
 80064a8:	080064d9 	.word	0x080064d9
 80064ac:	080064b5 	.word	0x080064b5
 80064b0:	080064d9 	.word	0x080064d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	3303      	adds	r3, #3
 80064ba:	089b      	lsrs	r3, r3, #2
 80064bc:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80064be:	89fa      	ldrh	r2, [r7, #14]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d91c      	bls.n	8006504 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f043 0220 	orr.w	r2, r3, #32
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80064d6:	e015      	b.n	8006504 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	3303      	adds	r3, #3
 80064de:	089b      	lsrs	r3, r3, #2
 80064e0:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80064e2:	89fa      	ldrh	r2, [r7, #14]
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d90a      	bls.n	8006508 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80064fe:	e003      	b.n	8006508 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006500:	bf00      	nop
 8006502:	e002      	b.n	800650a <USB_HC_StartXfer+0x1ce>
        break;
 8006504:	bf00      	nop
 8006506:	e000      	b.n	800650a <USB_HC_StartXfer+0x1ce>
        break;
 8006508:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68d9      	ldr	r1, [r3, #12]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	785a      	ldrb	r2, [r3, #1]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	b29b      	uxth	r3, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff fbd9 	bl	8005cd0 <USB_WritePacket>
  }

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	1ff80000 	.word	0x1ff80000

0800652c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	b29b      	uxth	r3, r3
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800654e:	b480      	push	{r7}
 8006550:	b089      	sub	sp, #36	; 0x24
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	0c9b      	lsrs	r3, r3, #18
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	0fdb      	lsrs	r3, r3, #31
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b20      	cmp	r3, #32
 800659c:	d104      	bne.n	80065a8 <USB_HC_Halt+0x5a>
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	e0c6      	b.n	8006736 <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <USB_HC_Halt+0x66>
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d162      	bne.n	800667a <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f040 80a9 	bne.w	8006734 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d132      	bne.n	8006654 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	440a      	add	r2, r1
 8006604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800660c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	440a      	add	r2, r1
 8006624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800662c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006638:	d81d      	bhi.n	8006676 <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	4413      	add	r3, r2
 8006642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800664c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006650:	d0ed      	beq.n	800662e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006652:	e06f      	b.n	8006734 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	0151      	lsls	r1, r2, #5
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	440a      	add	r2, r1
 800666a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800666e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006672:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006674:	e05e      	b.n	8006734 <USB_HC_Halt+0x1e6>
            break;
 8006676:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006678:	e05c      	b.n	8006734 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	440a      	add	r2, r1
 8006690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006698:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d132      	bne.n	8006710 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066c8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3301      	adds	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f4:	d81d      	bhi.n	8006732 <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800670c:	d0ed      	beq.n	80066ea <USB_HC_Halt+0x19c>
 800670e:	e011      	b.n	8006734 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	440a      	add	r2, r1
 8006726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800672a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	e000      	b.n	8006734 <USB_HC_Halt+0x1e6>
          break;
 8006732:	bf00      	nop
    }
  }

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3724      	adds	r7, #36	; 0x24
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b088      	sub	sp, #32
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff f9fc 	bl	8005b54 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800675c:	2110      	movs	r1, #16
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff fa56 	bl	8005c10 <USB_FlushTxFifo>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff fa80 	bl	8005c74 <USB_FlushRxFifo>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800677e:	2300      	movs	r3, #0
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	e01f      	b.n	80067c4 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	4413      	add	r3, r2
 800678c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800679a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067a2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067aa:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b8:	461a      	mov	r2, r3
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	3301      	adds	r3, #1
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d9dc      	bls.n	8006784 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	e033      	b.n	8006838 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067ee:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067f6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006804:	461a      	mov	r2, r3
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3301      	adds	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006814:	d80c      	bhi.n	8006830 <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800682c:	d0ed      	beq.n	800680a <USB_StopHost+0xc8>
 800682e:	e000      	b.n	8006832 <USB_StopHost+0xf0>
        break;
 8006830:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	3301      	adds	r3, #1
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b0f      	cmp	r3, #15
 800683c:	d9c8      	bls.n	80067d0 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006844:	461a      	mov	r2, r3
 8006846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800684a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006852:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff f96c 	bl	8005b32 <USB_EnableGlobalInt>

  return ret;
 800685a:	7ffb      	ldrb	r3, [r7, #31]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3720      	adds	r7, #32
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006868:	4904      	ldr	r1, [pc, #16]	; (800687c <MX_FATFS_Init+0x18>)
 800686a:	4805      	ldr	r0, [pc, #20]	; (8006880 <MX_FATFS_Init+0x1c>)
 800686c:	f005 fc06 	bl	800c07c <FATFS_LinkDriver>
 8006870:	4603      	mov	r3, r0
 8006872:	461a      	mov	r2, r3
 8006874:	4b03      	ldr	r3, [pc, #12]	; (8006884 <MX_FATFS_Init+0x20>)
 8006876:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006878:	bf00      	nop
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200001f8 	.word	0x200001f8
 8006880:	0800d75c 	.word	0x0800d75c
 8006884:	2000065c 	.word	0x2000065c

08006888 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800688c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800688e:	4618      	mov	r0, r3
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	4619      	mov	r1, r3
 80068c2:	4808      	ldr	r0, [pc, #32]	; (80068e4 <USBH_status+0x34>)
 80068c4:	f000 fe1a 	bl	80074fc <USBH_MSC_UnitIsReady>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <USBH_status+0x24>
  {
    res = RES_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
 80068d2:	e001      	b.n	80068d8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000660 	.word	0x20000660

080068e8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b094      	sub	sp, #80	; 0x50
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80068fe:	7bf9      	ldrb	r1, [r7, #15]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	4813      	ldr	r0, [pc, #76]	; (8006958 <USBH_read+0x70>)
 800690a:	f000 fe41 	bl	8007590 <USBH_MSC_Read>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d103      	bne.n	800691c <USBH_read+0x34>
  {
    res = RES_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800691a:	e017      	b.n	800694c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800691c:	f107 0210 	add.w	r2, r7, #16
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	4619      	mov	r1, r3
 8006924:	480c      	ldr	r0, [pc, #48]	; (8006958 <USBH_read+0x70>)
 8006926:	f000 fe0f 	bl	8007548 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800692a:	7f7b      	ldrb	r3, [r7, #29]
 800692c:	2b3a      	cmp	r3, #58	; 0x3a
 800692e:	d005      	beq.n	800693c <USBH_read+0x54>
 8006930:	2b3a      	cmp	r3, #58	; 0x3a
 8006932:	dc07      	bgt.n	8006944 <USBH_read+0x5c>
 8006934:	2b04      	cmp	r3, #4
 8006936:	d001      	beq.n	800693c <USBH_read+0x54>
 8006938:	2b28      	cmp	r3, #40	; 0x28
 800693a:	d103      	bne.n	8006944 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800693c:	2303      	movs	r3, #3
 800693e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006942:	e003      	b.n	800694c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800694a:	bf00      	nop
    }
  }

  return res;
 800694c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006950:	4618      	mov	r0, r3
 8006952:	3748      	adds	r7, #72	; 0x48
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	20000660 	.word	0x20000660

0800695c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b094      	sub	sp, #80	; 0x50
 8006960:	af02      	add	r7, sp, #8
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006972:	7bf9      	ldrb	r1, [r7, #15]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4817      	ldr	r0, [pc, #92]	; (80069dc <USBH_write+0x80>)
 800697e:	f000 fe70 	bl	8007662 <USBH_MSC_Write>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <USBH_write+0x34>
  {
    res = RES_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800698e:	e01f      	b.n	80069d0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006990:	f107 0210 	add.w	r2, r7, #16
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	4619      	mov	r1, r3
 8006998:	4810      	ldr	r0, [pc, #64]	; (80069dc <USBH_write+0x80>)
 800699a:	f000 fdd5 	bl	8007548 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800699e:	7f7b      	ldrb	r3, [r7, #29]
 80069a0:	2b3a      	cmp	r3, #58	; 0x3a
 80069a2:	d00d      	beq.n	80069c0 <USBH_write+0x64>
 80069a4:	2b3a      	cmp	r3, #58	; 0x3a
 80069a6:	dc0f      	bgt.n	80069c8 <USBH_write+0x6c>
 80069a8:	2b28      	cmp	r3, #40	; 0x28
 80069aa:	d009      	beq.n	80069c0 <USBH_write+0x64>
 80069ac:	2b28      	cmp	r3, #40	; 0x28
 80069ae:	dc0b      	bgt.n	80069c8 <USBH_write+0x6c>
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d005      	beq.n	80069c0 <USBH_write+0x64>
 80069b4:	2b27      	cmp	r3, #39	; 0x27
 80069b6:	d107      	bne.n	80069c8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80069b8:	2302      	movs	r3, #2
 80069ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80069be:	e007      	b.n	80069d0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80069c0:	2303      	movs	r3, #3
 80069c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80069c6:	e003      	b.n	80069d0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80069ce:	bf00      	nop
    }
  }

  return res;
 80069d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3748      	adds	r7, #72	; 0x48
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000660 	.word	0x20000660

080069e0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b090      	sub	sp, #64	; 0x40
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	603a      	str	r2, [r7, #0]
 80069ea:	71fb      	strb	r3, [r7, #7]
 80069ec:	460b      	mov	r3, r1
 80069ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80069f6:	79bb      	ldrb	r3, [r7, #6]
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d852      	bhi.n	8006aa2 <USBH_ioctl+0xc2>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <USBH_ioctl+0x24>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a1d 	.word	0x08006a1d
 8006a0c:	08006a47 	.word	0x08006a47
 8006a10:	08006a73 	.word	0x08006a73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006a1a:	e045      	b.n	8006aa8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006a1c:	f107 0208 	add.w	r2, r7, #8
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	4619      	mov	r1, r3
 8006a24:	4823      	ldr	r0, [pc, #140]	; (8006ab4 <USBH_ioctl+0xd4>)
 8006a26:	f000 fd8f 	bl	8007548 <USBH_MSC_GetLUNInfo>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006a3c:	e034      	b.n	8006aa8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006a44:	e030      	b.n	8006aa8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006a46:	f107 0208 	add.w	r2, r7, #8
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4819      	ldr	r0, [pc, #100]	; (8006ab4 <USBH_ioctl+0xd4>)
 8006a50:	f000 fd7a 	bl	8007548 <USBH_MSC_GetLUNInfo>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d107      	bne.n	8006a6a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006a5a:	8a3b      	ldrh	r3, [r7, #16]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006a68:	e01e      	b.n	8006aa8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006a70:	e01a      	b.n	8006aa8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006a72:	f107 0208 	add.w	r2, r7, #8
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	480e      	ldr	r0, [pc, #56]	; (8006ab4 <USBH_ioctl+0xd4>)
 8006a7c:	f000 fd64 	bl	8007548 <USBH_MSC_GetLUNInfo>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006a86:	8a3b      	ldrh	r3, [r7, #16]
 8006a88:	0a5b      	lsrs	r3, r3, #9
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006a98:	e006      	b.n	8006aa8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006aa0:	e002      	b.n	8006aa8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006aa2:	2304      	movs	r3, #4
 8006aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3740      	adds	r7, #64	; 0x40
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20000660 	.word	0x20000660

08006ab8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b089      	sub	sp, #36	; 0x24
 8006abc:	af04      	add	r7, sp, #16
 8006abe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac6:	7919      	ldrb	r1, [r3, #4]
 8006ac8:	2350      	movs	r3, #80	; 0x50
 8006aca:	2206      	movs	r2, #6
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 fc53 	bl	8008378 <USBH_FindInterface>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2bff      	cmp	r3, #255	; 0xff
 8006ada:	d002      	beq.n	8006ae2 <USBH_MSC_InterfaceInit+0x2a>
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d901      	bls.n	8006ae6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e0ef      	b.n	8006cc6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fc28 	bl	8008340 <USBH_SelectInterface>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006afa:	2302      	movs	r3, #2
 8006afc:	e0e3      	b.n	8006cc6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006b08:	f005 fe94 	bl	800c834 <malloc>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006b20:	2302      	movs	r3, #2
 8006b22:	e0d0      	b.n	8006cc6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b28:	2100      	movs	r1, #0
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f005 fea0 	bl	800c870 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	211a      	movs	r1, #26
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	b25b      	sxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da16      	bge.n	8006b76 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	211a      	movs	r1, #26
 8006b4e:	fb01 f303 	mul.w	r3, r1, r3
 8006b52:	4413      	add	r3, r2
 8006b54:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b58:	781a      	ldrb	r2, [r3, #0]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	211a      	movs	r1, #26
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b6e:	881a      	ldrh	r2, [r3, #0]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	815a      	strh	r2, [r3, #10]
 8006b74:	e015      	b.n	8006ba2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	211a      	movs	r1, #26
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	4413      	add	r3, r2
 8006b82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b86:	781a      	ldrb	r2, [r3, #0]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	211a      	movs	r1, #26
 8006b92:	fb01 f303 	mul.w	r3, r1, r3
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b9c:	881a      	ldrh	r2, [r3, #0]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	211a      	movs	r1, #26
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	b25b      	sxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	da16      	bge.n	8006be8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	211a      	movs	r1, #26
 8006bc0:	fb01 f303 	mul.w	r3, r1, r3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	211a      	movs	r1, #26
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006be0:	881a      	ldrh	r2, [r3, #0]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	815a      	strh	r2, [r3, #10]
 8006be6:	e015      	b.n	8006c14 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	211a      	movs	r1, #26
 8006bee:	fb01 f303 	mul.w	r3, r1, r3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bf8:	781a      	ldrb	r2, [r3, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	211a      	movs	r1, #26
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c0e:	881a      	ldrh	r2, [r3, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2200      	movs	r2, #0
 8006c18:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2200      	movs	r2, #0
 8006c24:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	799b      	ldrb	r3, [r3, #6]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f002 fdc4 	bl	80097ba <USBH_AllocPipe>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	79db      	ldrb	r3, [r3, #7]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f002 fdba 	bl	80097ba <USBH_AllocPipe>
 8006c46:	4603      	mov	r3, r0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fdac 	bl	80077ac <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	7959      	ldrb	r1, [r3, #5]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	7998      	ldrb	r0, [r3, #6]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	8912      	ldrh	r2, [r2, #8]
 8006c6c:	9202      	str	r2, [sp, #8]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	9201      	str	r2, [sp, #4]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	4623      	mov	r3, r4
 8006c76:	4602      	mov	r2, r0
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f002 fd6f 	bl	800975c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	7919      	ldrb	r1, [r3, #4]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	79d8      	ldrb	r0, [r3, #7]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	8952      	ldrh	r2, [r2, #10]
 8006c96:	9202      	str	r2, [sp, #8]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	9201      	str	r2, [sp, #4]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f002 fd5a 	bl	800975c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	791b      	ldrb	r3, [r3, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f005 fce1 	bl	800c678 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	795b      	ldrb	r3, [r3, #5]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f005 fcda 	bl	800c678 <USBH_LL_SetToggle>

  return USBH_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd90      	pop	{r4, r7, pc}

08006cce <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	795b      	ldrb	r3, [r3, #5]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00e      	beq.n	8006d06 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	795b      	ldrb	r3, [r3, #5]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f002 fd53 	bl	800979a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	795b      	ldrb	r3, [r3, #5]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f002 fd7e 	bl	80097fc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	791b      	ldrb	r3, [r3, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00e      	beq.n	8006d2c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	791b      	ldrb	r3, [r3, #4]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f002 fd40 	bl	800979a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	791b      	ldrb	r3, [r3, #4]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f002 fd6b 	bl	80097fc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f005 fd7f 	bl	800c844 <free>
    phost->pActiveClass->pData = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	7b9b      	ldrb	r3, [r3, #14]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d041      	beq.n	8006dfc <USBH_MSC_ClassRequest+0xa2>
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	dc4b      	bgt.n	8006e14 <USBH_MSC_ClassRequest+0xba>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <USBH_MSC_ClassRequest+0x2a>
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d147      	bne.n	8006e14 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fcf0 	bl	800776e <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d104      	bne.n	8006da2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d137      	bne.n	8006e18 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d804      	bhi.n	8006dba <USBH_MSC_ClassRequest+0x60>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	e000      	b.n	8006dbc <USBH_MSC_ClassRequest+0x62>
 8006dba:	2202      	movs	r2, #2
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73bb      	strb	r3, [r7, #14]
 8006dc4:	e014      	b.n	8006df0 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	2134      	movs	r1, #52	; 0x34
 8006dcc:	fb01 f303 	mul.w	r3, r1, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3392      	adds	r3, #146	; 0x92
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	2134      	movs	r1, #52	; 0x34
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	4413      	add	r3, r2
 8006de4:	33c1      	adds	r3, #193	; 0xc1
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	3301      	adds	r3, #1
 8006dee:	73bb      	strb	r3, [r7, #14]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	7bba      	ldrb	r2, [r7, #14]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d3e5      	bcc.n	8006dc6 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8006dfa:	e00d      	b.n	8006e18 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f002 f87b 	bl	8008efa <USBH_ClrFeature>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d108      	bne.n	8006e1c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	7bda      	ldrb	r2, [r3, #15]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	739a      	strb	r2, [r3, #14]
      }
      break;
 8006e12:	e003      	b.n	8006e1c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8006e14:	bf00      	nop
 8006e16:	e002      	b.n	8006e1e <USBH_MSC_ClassRequest+0xc4>
      break;
 8006e18:	bf00      	nop
 8006e1a:	e000      	b.n	8006e1e <USBH_MSC_ClassRequest+0xc4>
      break;
 8006e1c:	bf00      	nop
  }

  return status;
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006e42:	2301      	movs	r3, #1
 8006e44:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	7b1b      	ldrb	r3, [r3, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <USBH_MSC_Process+0x2e>
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	f000 8271 	beq.w	8007336 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006e54:	e272      	b.n	800733c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	429a      	cmp	r2, r3
 8006e64:	f080 824f 	bcs.w	8007306 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e6e:	4619      	mov	r1, r3
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	2334      	movs	r3, #52	; 0x34
 8006e74:	fb03 f301 	mul.w	r3, r3, r1
 8006e78:	4413      	add	r3, r2
 8006e7a:	3391      	adds	r3, #145	; 0x91
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e86:	4619      	mov	r1, r3
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	2334      	movs	r3, #52	; 0x34
 8006e8c:	fb03 f301 	mul.w	r3, r3, r1
 8006e90:	4413      	add	r3, r2
 8006e92:	3390      	adds	r3, #144	; 0x90
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	f200 8243 	bhi.w	8007322 <USBH_MSC_Process+0x4fa>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <USBH_MSC_Process+0x7c>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006ec9 	.word	0x08006ec9
 8006ea8:	08007323 	.word	0x08007323
 8006eac:	08006f91 	.word	0x08006f91
 8006eb0:	08007115 	.word	0x08007115
 8006eb4:	08006eef 	.word	0x08006eef
 8006eb8:	080071e1 	.word	0x080071e1
 8006ebc:	08007323 	.word	0x08007323
 8006ec0:	08007323 	.word	0x08007323
 8006ec4:	080072f5 	.word	0x080072f5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ece:	4619      	mov	r1, r3
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	2334      	movs	r3, #52	; 0x34
 8006ed4:	fb03 f301 	mul.w	r3, r3, r1
 8006ed8:	4413      	add	r3, r2
 8006eda:	3390      	adds	r3, #144	; 0x90
 8006edc:	2204      	movs	r2, #4
 8006ede:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8006eec:	e222      	b.n	8007334 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ef4:	b2d9      	uxtb	r1, r3
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006efc:	461a      	mov	r2, r3
 8006efe:	2334      	movs	r3, #52	; 0x34
 8006f00:	fb03 f302 	mul.w	r3, r3, r2
 8006f04:	3398      	adds	r3, #152	; 0x98
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4413      	add	r3, r2
 8006f0a:	3307      	adds	r3, #7
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 ff6a 	bl	8007de8 <USBH_MSC_SCSI_Inquiry>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006f24:	4619      	mov	r1, r3
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	2334      	movs	r3, #52	; 0x34
 8006f2a:	fb03 f301 	mul.w	r3, r3, r1
 8006f2e:	4413      	add	r3, r2
 8006f30:	3390      	adds	r3, #144	; 0x90
 8006f32:	2202      	movs	r2, #2
 8006f34:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d10c      	bne.n	8006f56 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006f42:	4619      	mov	r1, r3
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	2334      	movs	r3, #52	; 0x34
 8006f48:	fb03 f301 	mul.w	r3, r3, r1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3390      	adds	r3, #144	; 0x90
 8006f50:	2205      	movs	r2, #5
 8006f52:	701a      	strb	r2, [r3, #0]
            break;
 8006f54:	e1e7      	b.n	8007326 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	f040 81e4 	bne.w	8007326 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006f64:	4619      	mov	r1, r3
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	2334      	movs	r3, #52	; 0x34
 8006f6a:	fb03 f301 	mul.w	r3, r3, r1
 8006f6e:	4413      	add	r3, r2
 8006f70:	3390      	adds	r3, #144	; 0x90
 8006f72:	2201      	movs	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	2334      	movs	r3, #52	; 0x34
 8006f82:	fb03 f301 	mul.w	r3, r3, r1
 8006f86:	4413      	add	r3, r2
 8006f88:	3391      	adds	r3, #145	; 0x91
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	701a      	strb	r2, [r3, #0]
            break;
 8006f8e:	e1ca      	b.n	8007326 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fe66 	bl	8007c6c <USBH_MSC_SCSI_TestUnitReady>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d149      	bne.n	800703e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	2334      	movs	r3, #52	; 0x34
 8006fb6:	fb03 f301 	mul.w	r3, r3, r1
 8006fba:	4413      	add	r3, r2
 8006fbc:	3392      	adds	r3, #146	; 0x92
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00c      	beq.n	8006fde <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006fca:	4619      	mov	r1, r3
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	2334      	movs	r3, #52	; 0x34
 8006fd0:	fb03 f301 	mul.w	r3, r3, r1
 8006fd4:	4413      	add	r3, r2
 8006fd6:	33c1      	adds	r3, #193	; 0xc1
 8006fd8:	2201      	movs	r2, #1
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	e00b      	b.n	8006ff6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	2334      	movs	r3, #52	; 0x34
 8006fea:	fb03 f301 	mul.w	r3, r3, r1
 8006fee:	4413      	add	r3, r2
 8006ff0:	33c1      	adds	r3, #193	; 0xc1
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	2334      	movs	r3, #52	; 0x34
 8007002:	fb03 f301 	mul.w	r3, r3, r1
 8007006:	4413      	add	r3, r2
 8007008:	3390      	adds	r3, #144	; 0x90
 800700a:	2203      	movs	r2, #3
 800700c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007014:	4619      	mov	r1, r3
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	2334      	movs	r3, #52	; 0x34
 800701a:	fb03 f301 	mul.w	r3, r3, r1
 800701e:	4413      	add	r3, r2
 8007020:	3391      	adds	r3, #145	; 0x91
 8007022:	2200      	movs	r2, #0
 8007024:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800702c:	4619      	mov	r1, r3
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	2334      	movs	r3, #52	; 0x34
 8007032:	fb03 f301 	mul.w	r3, r3, r1
 8007036:	4413      	add	r3, r2
 8007038:	3392      	adds	r3, #146	; 0x92
 800703a:	2200      	movs	r2, #0
 800703c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d14a      	bne.n	80070da <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800704a:	4619      	mov	r1, r3
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	2334      	movs	r3, #52	; 0x34
 8007050:	fb03 f301 	mul.w	r3, r3, r1
 8007054:	4413      	add	r3, r2
 8007056:	3392      	adds	r3, #146	; 0x92
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d00c      	beq.n	8007078 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007064:	4619      	mov	r1, r3
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	2334      	movs	r3, #52	; 0x34
 800706a:	fb03 f301 	mul.w	r3, r3, r1
 800706e:	4413      	add	r3, r2
 8007070:	33c1      	adds	r3, #193	; 0xc1
 8007072:	2201      	movs	r2, #1
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	e00b      	b.n	8007090 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800707e:	4619      	mov	r1, r3
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	2334      	movs	r3, #52	; 0x34
 8007084:	fb03 f301 	mul.w	r3, r3, r1
 8007088:	4413      	add	r3, r2
 800708a:	33c1      	adds	r3, #193	; 0xc1
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007096:	4619      	mov	r1, r3
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	2334      	movs	r3, #52	; 0x34
 800709c:	fb03 f301 	mul.w	r3, r3, r1
 80070a0:	4413      	add	r3, r2
 80070a2:	3390      	adds	r3, #144	; 0x90
 80070a4:	2205      	movs	r2, #5
 80070a6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070ae:	4619      	mov	r1, r3
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	2334      	movs	r3, #52	; 0x34
 80070b4:	fb03 f301 	mul.w	r3, r3, r1
 80070b8:	4413      	add	r3, r2
 80070ba:	3391      	adds	r3, #145	; 0x91
 80070bc:	2201      	movs	r2, #1
 80070be:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070c6:	4619      	mov	r1, r3
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	2334      	movs	r3, #52	; 0x34
 80070cc:	fb03 f301 	mul.w	r3, r3, r1
 80070d0:	4413      	add	r3, r2
 80070d2:	3392      	adds	r3, #146	; 0x92
 80070d4:	2202      	movs	r2, #2
 80070d6:	701a      	strb	r2, [r3, #0]
            break;
 80070d8:	e127      	b.n	800732a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	f040 8124 	bne.w	800732a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070e8:	4619      	mov	r1, r3
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	2334      	movs	r3, #52	; 0x34
 80070ee:	fb03 f301 	mul.w	r3, r3, r1
 80070f2:	4413      	add	r3, r2
 80070f4:	3390      	adds	r3, #144	; 0x90
 80070f6:	2201      	movs	r2, #1
 80070f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007100:	4619      	mov	r1, r3
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	2334      	movs	r3, #52	; 0x34
 8007106:	fb03 f301 	mul.w	r3, r3, r1
 800710a:	4413      	add	r3, r2
 800710c:	3391      	adds	r3, #145	; 0x91
 800710e:	2202      	movs	r2, #2
 8007110:	701a      	strb	r2, [r3, #0]
            break;
 8007112:	e10a      	b.n	800732a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800711a:	b2d9      	uxtb	r1, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007122:	461a      	mov	r2, r3
 8007124:	2334      	movs	r3, #52	; 0x34
 8007126:	fb03 f302 	mul.w	r3, r3, r2
 800712a:	3390      	adds	r3, #144	; 0x90
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	4413      	add	r3, r2
 8007130:	3304      	adds	r3, #4
 8007132:	461a      	mov	r2, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fddc 	bl	8007cf2 <USBH_MSC_SCSI_ReadCapacity>
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d120      	bne.n	8007186 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800714a:	4619      	mov	r1, r3
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	2334      	movs	r3, #52	; 0x34
 8007150:	fb03 f301 	mul.w	r3, r3, r1
 8007154:	4413      	add	r3, r2
 8007156:	3390      	adds	r3, #144	; 0x90
 8007158:	2201      	movs	r2, #1
 800715a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007162:	4619      	mov	r1, r3
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	2334      	movs	r3, #52	; 0x34
 8007168:	fb03 f301 	mul.w	r3, r3, r1
 800716c:	4413      	add	r3, r2
 800716e:	3391      	adds	r3, #145	; 0x91
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800717a:	3301      	adds	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007184:	e0d3      	b.n	800732e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d10c      	bne.n	80071a6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007192:	4619      	mov	r1, r3
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	2334      	movs	r3, #52	; 0x34
 8007198:	fb03 f301 	mul.w	r3, r3, r1
 800719c:	4413      	add	r3, r2
 800719e:	3390      	adds	r3, #144	; 0x90
 80071a0:	2205      	movs	r2, #5
 80071a2:	701a      	strb	r2, [r3, #0]
            break;
 80071a4:	e0c3      	b.n	800732e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	f040 80c0 	bne.w	800732e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071b4:	4619      	mov	r1, r3
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	2334      	movs	r3, #52	; 0x34
 80071ba:	fb03 f301 	mul.w	r3, r3, r1
 80071be:	4413      	add	r3, r2
 80071c0:	3390      	adds	r3, #144	; 0x90
 80071c2:	2201      	movs	r2, #1
 80071c4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071cc:	4619      	mov	r1, r3
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	2334      	movs	r3, #52	; 0x34
 80071d2:	fb03 f301 	mul.w	r3, r3, r1
 80071d6:	4413      	add	r3, r2
 80071d8:	3391      	adds	r3, #145	; 0x91
 80071da:	2202      	movs	r2, #2
 80071dc:	701a      	strb	r2, [r3, #0]
            break;
 80071de:	e0a6      	b.n	800732e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071e6:	b2d9      	uxtb	r1, r3
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071ee:	461a      	mov	r2, r3
 80071f0:	2334      	movs	r3, #52	; 0x34
 80071f2:	fb03 f302 	mul.w	r3, r3, r2
 80071f6:	3398      	adds	r3, #152	; 0x98
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4413      	add	r3, r2
 80071fc:	3304      	adds	r3, #4
 80071fe:	461a      	mov	r2, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fe96 	bl	8007f32 <USBH_MSC_SCSI_RequestSense>
 8007206:	4603      	mov	r3, r0
 8007208:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d145      	bne.n	800729c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007216:	4619      	mov	r1, r3
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	2334      	movs	r3, #52	; 0x34
 800721c:	fb03 f301 	mul.w	r3, r3, r1
 8007220:	4413      	add	r3, r2
 8007222:	339c      	adds	r3, #156	; 0x9c
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b06      	cmp	r3, #6
 8007228:	d00c      	beq.n	8007244 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007230:	4619      	mov	r1, r3
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	2334      	movs	r3, #52	; 0x34
 8007236:	fb03 f301 	mul.w	r3, r3, r1
 800723a:	4413      	add	r3, r2
 800723c:	339c      	adds	r3, #156	; 0x9c
 800723e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007240:	2b02      	cmp	r3, #2
 8007242:	d117      	bne.n	8007274 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	f242 720f 	movw	r2, #9999	; 0x270f
 8007256:	4293      	cmp	r3, r2
 8007258:	d80c      	bhi.n	8007274 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007260:	4619      	mov	r1, r3
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	2334      	movs	r3, #52	; 0x34
 8007266:	fb03 f301 	mul.w	r3, r3, r1
 800726a:	4413      	add	r3, r2
 800726c:	3390      	adds	r3, #144	; 0x90
 800726e:	2202      	movs	r2, #2
 8007270:	701a      	strb	r2, [r3, #0]
                  break;
 8007272:	e05f      	b.n	8007334 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800727a:	4619      	mov	r1, r3
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	2334      	movs	r3, #52	; 0x34
 8007280:	fb03 f301 	mul.w	r3, r3, r1
 8007284:	4413      	add	r3, r2
 8007286:	3390      	adds	r3, #144	; 0x90
 8007288:	2201      	movs	r2, #1
 800728a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007292:	3301      	adds	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d10c      	bne.n	80072bc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072a8:	4619      	mov	r1, r3
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	2334      	movs	r3, #52	; 0x34
 80072ae:	fb03 f301 	mul.w	r3, r3, r1
 80072b2:	4413      	add	r3, r2
 80072b4:	3390      	adds	r3, #144	; 0x90
 80072b6:	2208      	movs	r2, #8
 80072b8:	701a      	strb	r2, [r3, #0]
            break;
 80072ba:	e03a      	b.n	8007332 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d137      	bne.n	8007332 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072c8:	4619      	mov	r1, r3
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	2334      	movs	r3, #52	; 0x34
 80072ce:	fb03 f301 	mul.w	r3, r3, r1
 80072d2:	4413      	add	r3, r2
 80072d4:	3390      	adds	r3, #144	; 0x90
 80072d6:	2201      	movs	r2, #1
 80072d8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072e0:	4619      	mov	r1, r3
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	2334      	movs	r3, #52	; 0x34
 80072e6:	fb03 f301 	mul.w	r3, r3, r1
 80072ea:	4413      	add	r3, r2
 80072ec:	3391      	adds	r3, #145	; 0x91
 80072ee:	2202      	movs	r2, #2
 80072f0:	701a      	strb	r2, [r3, #0]
            break;
 80072f2:	e01e      	b.n	8007332 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072fa:	3301      	adds	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007304:	e016      	b.n	8007334 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2200      	movs	r2, #0
 800730a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2201      	movs	r2, #1
 8007312:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800731a:	2102      	movs	r1, #2
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
      break;
 8007320:	e00c      	b.n	800733c <USBH_MSC_Process+0x514>
            break;
 8007322:	bf00      	nop
 8007324:	e00a      	b.n	800733c <USBH_MSC_Process+0x514>
            break;
 8007326:	bf00      	nop
 8007328:	e008      	b.n	800733c <USBH_MSC_Process+0x514>
            break;
 800732a:	bf00      	nop
 800732c:	e006      	b.n	800733c <USBH_MSC_Process+0x514>
            break;
 800732e:	bf00      	nop
 8007330:	e004      	b.n	800733c <USBH_MSC_Process+0x514>
            break;
 8007332:	bf00      	nop
      break;
 8007334:	e002      	b.n	800733c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	75fb      	strb	r3, [r7, #23]
      break;
 800733a:	bf00      	nop
  }
  return error;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b088      	sub	sp, #32
 8007362:	af02      	add	r7, sp, #8
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007374:	2301      	movs	r3, #1
 8007376:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	2134      	movs	r1, #52	; 0x34
 8007382:	fb01 f303 	mul.w	r3, r1, r3
 8007386:	4413      	add	r3, r2
 8007388:	3390      	adds	r3, #144	; 0x90
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b07      	cmp	r3, #7
 800738e:	d03c      	beq.n	800740a <USBH_MSC_RdWrProcess+0xac>
 8007390:	2b07      	cmp	r3, #7
 8007392:	f300 80a7 	bgt.w	80074e4 <USBH_MSC_RdWrProcess+0x186>
 8007396:	2b05      	cmp	r3, #5
 8007398:	d06c      	beq.n	8007474 <USBH_MSC_RdWrProcess+0x116>
 800739a:	2b06      	cmp	r3, #6
 800739c:	f040 80a2 	bne.w	80074e4 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80073a0:	78f9      	ldrb	r1, [r7, #3]
 80073a2:	2300      	movs	r3, #0
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	2300      	movs	r3, #0
 80073a8:	2200      	movs	r2, #0
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fea5 	bl	80080fa <USBH_MSC_SCSI_Read>
 80073b0:	4603      	mov	r3, r0
 80073b2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	2134      	movs	r1, #52	; 0x34
 80073c0:	fb01 f303 	mul.w	r3, r1, r3
 80073c4:	4413      	add	r3, r2
 80073c6:	3390      	adds	r3, #144	; 0x90
 80073c8:	2201      	movs	r2, #1
 80073ca:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073d0:	e08a      	b.n	80074e8 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d109      	bne.n	80073ec <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	2134      	movs	r1, #52	; 0x34
 80073de:	fb01 f303 	mul.w	r3, r1, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	3390      	adds	r3, #144	; 0x90
 80073e6:	2205      	movs	r2, #5
 80073e8:	701a      	strb	r2, [r3, #0]
      break;
 80073ea:	e07d      	b.n	80074e8 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d17a      	bne.n	80074e8 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	2134      	movs	r1, #52	; 0x34
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
 80073fc:	4413      	add	r3, r2
 80073fe:	3390      	adds	r3, #144	; 0x90
 8007400:	2208      	movs	r2, #8
 8007402:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007404:	2302      	movs	r3, #2
 8007406:	75fb      	strb	r3, [r7, #23]
      break;
 8007408:	e06e      	b.n	80074e8 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800740a:	78f9      	ldrb	r1, [r7, #3]
 800740c:	2300      	movs	r3, #0
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	2300      	movs	r3, #0
 8007412:	2200      	movs	r2, #0
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fe05 	bl	8008024 <USBH_MSC_SCSI_Write>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10b      	bne.n	800743c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	2134      	movs	r1, #52	; 0x34
 800742a:	fb01 f303 	mul.w	r3, r1, r3
 800742e:	4413      	add	r3, r2
 8007430:	3390      	adds	r3, #144	; 0x90
 8007432:	2201      	movs	r2, #1
 8007434:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800743a:	e057      	b.n	80074ec <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d109      	bne.n	8007456 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	2134      	movs	r1, #52	; 0x34
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	4413      	add	r3, r2
 800744e:	3390      	adds	r3, #144	; 0x90
 8007450:	2205      	movs	r2, #5
 8007452:	701a      	strb	r2, [r3, #0]
      break;
 8007454:	e04a      	b.n	80074ec <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b04      	cmp	r3, #4
 800745a:	d147      	bne.n	80074ec <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	2134      	movs	r1, #52	; 0x34
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	4413      	add	r3, r2
 8007468:	3390      	adds	r3, #144	; 0x90
 800746a:	2208      	movs	r2, #8
 800746c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800746e:	2302      	movs	r3, #2
 8007470:	75fb      	strb	r3, [r7, #23]
      break;
 8007472:	e03b      	b.n	80074ec <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	2234      	movs	r2, #52	; 0x34
 8007478:	fb02 f303 	mul.w	r3, r2, r3
 800747c:	3398      	adds	r3, #152	; 0x98
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4413      	add	r3, r2
 8007482:	1d1a      	adds	r2, r3, #4
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fd52 	bl	8007f32 <USBH_MSC_SCSI_RequestSense>
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d113      	bne.n	80074c0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	2134      	movs	r1, #52	; 0x34
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	3390      	adds	r3, #144	; 0x90
 80074a6:	2201      	movs	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	2134      	movs	r1, #52	; 0x34
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	3391      	adds	r3, #145	; 0x91
 80074b8:	2202      	movs	r2, #2
 80074ba:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80074bc:	2302      	movs	r3, #2
 80074be:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d014      	beq.n	80074f0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d111      	bne.n	80074f0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	2134      	movs	r1, #52	; 0x34
 80074d2:	fb01 f303 	mul.w	r3, r1, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	3390      	adds	r3, #144	; 0x90
 80074da:	2208      	movs	r2, #8
 80074dc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80074de:	2302      	movs	r3, #2
 80074e0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074e2:	e005      	b.n	80074f0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80074e4:	bf00      	nop
 80074e6:	e004      	b.n	80074f2 <USBH_MSC_RdWrProcess+0x194>
      break;
 80074e8:	bf00      	nop
 80074ea:	e002      	b.n	80074f2 <USBH_MSC_RdWrProcess+0x194>
      break;
 80074ec:	bf00      	nop
 80074ee:	e000      	b.n	80074f2 <USBH_MSC_RdWrProcess+0x194>
      break;
 80074f0:	bf00      	nop

  }
  return error;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b0b      	cmp	r3, #11
 800751a:	d10c      	bne.n	8007536 <USBH_MSC_UnitIsReady+0x3a>
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	2134      	movs	r1, #52	; 0x34
 8007522:	fb01 f303 	mul.w	r3, r1, r3
 8007526:	4413      	add	r3, r2
 8007528:	3391      	adds	r3, #145	; 0x91
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
 8007534:	e001      	b.n	800753a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	460b      	mov	r3, r1
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b0b      	cmp	r3, #11
 8007568:	d10d      	bne.n	8007586 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800756a:	7afb      	ldrb	r3, [r7, #11]
 800756c:	2234      	movs	r2, #52	; 0x34
 800756e:	fb02 f303 	mul.w	r3, r2, r3
 8007572:	3390      	adds	r3, #144	; 0x90
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4413      	add	r3, r2
 8007578:	2234      	movs	r2, #52	; 0x34
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f005 f969 	bl	800c854 <memcpy>
    return USBH_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	e000      	b.n	8007588 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007586:	2302      	movs	r3, #2
  }
}
 8007588:	4618      	mov	r0, r3
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	607a      	str	r2, [r7, #4]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	460b      	mov	r3, r1
 800759e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80075bc:	2b0b      	cmp	r3, #11
 80075be:	d109      	bne.n	80075d4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	2134      	movs	r1, #52	; 0x34
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	4413      	add	r3, r2
 80075cc:	3390      	adds	r3, #144	; 0x90
 80075ce:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d001      	beq.n	80075d8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80075d4:	2302      	movs	r3, #2
 80075d6:	e040      	b.n	800765a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2206      	movs	r2, #6
 80075dc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	2134      	movs	r1, #52	; 0x34
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	4413      	add	r3, r2
 80075ea:	3390      	adds	r3, #144	; 0x90
 80075ec:	2206      	movs	r2, #6
 80075ee:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80075fa:	7af9      	ldrb	r1, [r7, #11]
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fd78 	bl	80080fa <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007610:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007612:	e016      	b.n	8007642 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad2      	subs	r2, r2, r3
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f242 7110 	movw	r1, #10000	; 0x2710
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	429a      	cmp	r2, r3
 800762a:	d805      	bhi.n	8007638 <USBH_MSC_Read+0xa8>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d104      	bne.n	8007642 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2201      	movs	r2, #1
 800763c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800763e:	2302      	movs	r3, #2
 8007640:	e00b      	b.n	800765a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	4619      	mov	r1, r3
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fe89 	bl	800735e <USBH_MSC_RdWrProcess>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d0e0      	beq.n	8007614 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2201      	movs	r2, #1
 8007656:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b088      	sub	sp, #32
 8007666:	af02      	add	r7, sp, #8
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	460b      	mov	r3, r1
 8007670:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00e      	beq.n	80076a6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800768e:	2b0b      	cmp	r3, #11
 8007690:	d109      	bne.n	80076a6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	2134      	movs	r1, #52	; 0x34
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	4413      	add	r3, r2
 800769e:	3390      	adds	r3, #144	; 0x90
 80076a0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d001      	beq.n	80076aa <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80076a6:	2302      	movs	r3, #2
 80076a8:	e040      	b.n	800772c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2207      	movs	r2, #7
 80076ae:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	2134      	movs	r1, #52	; 0x34
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	4413      	add	r3, r2
 80076bc:	3390      	adds	r3, #144	; 0x90
 80076be:	2207      	movs	r2, #7
 80076c0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80076cc:	7af9      	ldrb	r1, [r7, #11]
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fca4 	bl	8008024 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076e2:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80076e4:	e016      	b.n	8007714 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d805      	bhi.n	800770a <USBH_MSC_Write+0xa8>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2201      	movs	r2, #1
 800770e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007710:	2302      	movs	r3, #2
 8007712:	e00b      	b.n	800772c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	4619      	mov	r1, r3
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f7ff fe20 	bl	800735e <USBH_MSC_RdWrProcess>
 800771e:	4603      	mov	r3, r0
 8007720:	2b01      	cmp	r3, #1
 8007722:	d0e0      	beq.n	80076e6 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2201      	movs	r2, #1
 8007728:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2221      	movs	r2, #33	; 0x21
 8007740:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	22ff      	movs	r2, #255	; 0xff
 8007746:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800775a:	2200      	movs	r2, #0
 800775c:	2100      	movs	r1, #0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fdab 	bl	80092ba <USBH_CtlReq>
 8007764:	4603      	mov	r3, r0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	22a1      	movs	r2, #161	; 0xa1
 800777c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	22fe      	movs	r2, #254	; 0xfe
 8007782:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007796:	2201      	movs	r2, #1
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 fd8d 	bl	80092ba <USBH_CtlReq>
 80077a0:	4603      	mov	r3, r0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4a09      	ldr	r2, [pc, #36]	; (80077e8 <USBH_MSC_BOT_Init+0x3c>)
 80077c2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4a09      	ldr	r2, [pc, #36]	; (80077ec <USBH_MSC_BOT_Init+0x40>)
 80077c8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	43425355 	.word	0x43425355
 80077ec:	20304050 	.word	0x20304050

080077f0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80077fc:	2301      	movs	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007800:	2301      	movs	r3, #1
 8007802:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007804:	2301      	movs	r3, #1
 8007806:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007808:	2300      	movs	r3, #0
 800780a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007820:	3b01      	subs	r3, #1
 8007822:	2b0a      	cmp	r3, #10
 8007824:	f200 819e 	bhi.w	8007b64 <USBH_MSC_BOT_Process+0x374>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <USBH_MSC_BOT_Process+0x40>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	0800785d 	.word	0x0800785d
 8007834:	08007885 	.word	0x08007885
 8007838:	080078ef 	.word	0x080078ef
 800783c:	0800790d 	.word	0x0800790d
 8007840:	08007991 	.word	0x08007991
 8007844:	080079b3 	.word	0x080079b3
 8007848:	08007a4b 	.word	0x08007a4b
 800784c:	08007a67 	.word	0x08007a67
 8007850:	08007ab9 	.word	0x08007ab9
 8007854:	08007ae9 	.word	0x08007ae9
 8007858:	08007b4b 	.word	0x08007b4b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	795b      	ldrb	r3, [r3, #5]
 8007876:	2201      	movs	r2, #1
 8007878:	9200      	str	r2, [sp, #0]
 800787a:	221f      	movs	r2, #31
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 ff2a 	bl	80096d6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007882:	e17e      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	795b      	ldrb	r3, [r3, #5]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f004 feca 	bl	800c624 <USBH_LL_GetURBState>
 8007890:	4603      	mov	r3, r0
 8007892:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007894:	7d3b      	ldrb	r3, [r7, #20]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d118      	bne.n	80078cc <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00f      	beq.n	80078c2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80078a8:	b25b      	sxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	da04      	bge.n	80078b8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2203      	movs	r2, #3
 80078b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078b6:	e157      	b.n	8007b68 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	2205      	movs	r2, #5
 80078bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80078c0:	e152      	b.n	8007b68 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2207      	movs	r2, #7
 80078c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80078ca:	e14d      	b.n	8007b68 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078cc:	7d3b      	ldrb	r3, [r7, #20]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d104      	bne.n	80078dc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80078da:	e145      	b.n	8007b68 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80078dc:	7d3b      	ldrb	r3, [r7, #20]
 80078de:	2b05      	cmp	r3, #5
 80078e0:	f040 8142 	bne.w	8007b68 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	220a      	movs	r2, #10
 80078e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80078ec:	e13c      	b.n	8007b68 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	895a      	ldrh	r2, [r3, #10]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	791b      	ldrb	r3, [r3, #4]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 ff0f 	bl	8009720 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	2204      	movs	r2, #4
 8007906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800790a:	e13a      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	791b      	ldrb	r3, [r3, #4]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f004 fe86 	bl	800c624 <USBH_LL_GetURBState>
 8007918:	4603      	mov	r3, r0
 800791a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800791c:	7d3b      	ldrb	r3, [r7, #20]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d12d      	bne.n	800797e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	8952      	ldrh	r2, [r2, #10]
 800792a:	4293      	cmp	r3, r2
 800792c:	d910      	bls.n	8007950 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	8952      	ldrh	r2, [r2, #10]
 8007938:	441a      	add	r2, r3
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	8952      	ldrh	r2, [r2, #10]
 8007948:	1a9a      	subs	r2, r3, r2
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	65da      	str	r2, [r3, #92]	; 0x5c
 800794e:	e002      	b.n	8007956 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2200      	movs	r2, #0
 8007954:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	895a      	ldrh	r2, [r3, #10]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	791b      	ldrb	r3, [r3, #4]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fed7 	bl	8009720 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007972:	e0fb      	b.n	8007b6c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2207      	movs	r2, #7
 8007978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800797c:	e0f6      	b.n	8007b6c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800797e:	7d3b      	ldrb	r3, [r7, #20]
 8007980:	2b05      	cmp	r3, #5
 8007982:	f040 80f3 	bne.w	8007b6c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2209      	movs	r2, #9
 800798a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800798e:	e0ed      	b.n	8007b6c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	891a      	ldrh	r2, [r3, #8]
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	795b      	ldrb	r3, [r3, #5]
 800799e:	2001      	movs	r0, #1
 80079a0:	9000      	str	r0, [sp, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fe97 	bl	80096d6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2206      	movs	r2, #6
 80079ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80079b0:	e0e7      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	795b      	ldrb	r3, [r3, #5]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f004 fe33 	bl	800c624 <USBH_LL_GetURBState>
 80079be:	4603      	mov	r3, r0
 80079c0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80079c2:	7d3b      	ldrb	r3, [r7, #20]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d12f      	bne.n	8007a28 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	8912      	ldrh	r2, [r2, #8]
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d910      	bls.n	80079f6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	8912      	ldrh	r2, [r2, #8]
 80079de:	441a      	add	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	8912      	ldrh	r2, [r2, #8]
 80079ee:	1a9a      	subs	r2, r3, r2
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80079f4:	e002      	b.n	80079fc <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2200      	movs	r2, #0
 80079fa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	891a      	ldrh	r2, [r3, #8]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	795b      	ldrb	r3, [r3, #5]
 8007a12:	2001      	movs	r0, #1
 8007a14:	9000      	str	r0, [sp, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fe5d 	bl	80096d6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007a1c:	e0a8      	b.n	8007b70 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2207      	movs	r2, #7
 8007a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a26:	e0a3      	b.n	8007b70 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a28:	7d3b      	ldrb	r3, [r7, #20]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d104      	bne.n	8007a38 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2205      	movs	r2, #5
 8007a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a36:	e09b      	b.n	8007b70 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8007a38:	7d3b      	ldrb	r3, [r7, #20]
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	f040 8098 	bne.w	8007b70 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	220a      	movs	r2, #10
 8007a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a48:	e092      	b.n	8007b70 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	791b      	ldrb	r3, [r3, #4]
 8007a54:	220d      	movs	r2, #13
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 fe62 	bl	8009720 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2208      	movs	r2, #8
 8007a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a64:	e08d      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	791b      	ldrb	r3, [r3, #4]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f004 fdd9 	bl	800c624 <USBH_LL_GetURBState>
 8007a72:	4603      	mov	r3, r0
 8007a74:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007a76:	7d3b      	ldrb	r3, [r7, #20]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d115      	bne.n	8007aa8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f8a9 	bl	8007be4 <USBH_MSC_DecodeCSW>
 8007a92:	4603      	mov	r3, r0
 8007a94:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007a96:	7d7b      	ldrb	r3, [r7, #21]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007aa0:	e068      	b.n	8007b74 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa6:	e065      	b.n	8007b74 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8007aa8:	7d3b      	ldrb	r3, [r7, #20]
 8007aaa:	2b05      	cmp	r3, #5
 8007aac:	d162      	bne.n	8007b74 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2209      	movs	r2, #9
 8007ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ab6:	e05d      	b.n	8007b74 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	2200      	movs	r2, #0
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f864 	bl	8007b8c <USBH_MSC_BOT_Abort>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007ac8:	7dbb      	ldrb	r3, [r7, #22]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d104      	bne.n	8007ad8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007ad6:	e04f      	b.n	8007b78 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007ad8:	7dbb      	ldrb	r3, [r7, #22]
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d14c      	bne.n	8007b78 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	220b      	movs	r2, #11
 8007ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ae6:	e047      	b.n	8007b78 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	2201      	movs	r2, #1
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f84c 	bl	8007b8c <USBH_MSC_BOT_Abort>
 8007af4:	4603      	mov	r3, r0
 8007af6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007af8:	7dbb      	ldrb	r3, [r7, #22]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d11d      	bne.n	8007b3a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	795b      	ldrb	r3, [r3, #5]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f004 fde7 	bl	800c6d8 <USBH_LL_GetToggle>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	7959      	ldrb	r1, [r3, #5]
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	f1c3 0301 	rsb	r3, r3, #1
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f004 fdab 	bl	800c678 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	791b      	ldrb	r3, [r3, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f004 fda4 	bl	800c678 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	2209      	movs	r2, #9
 8007b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007b38:	e020      	b.n	8007b7c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8007b3a:	7dbb      	ldrb	r3, [r7, #22]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d11d      	bne.n	8007b7c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	220b      	movs	r2, #11
 8007b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b48:	e018      	b.n	8007b7c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff fdf2 	bl	8007734 <USBH_MSC_BOT_REQ_Reset>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d112      	bne.n	8007b80 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007b62:	e00d      	b.n	8007b80 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8007b64:	bf00      	nop
 8007b66:	e00c      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b68:	bf00      	nop
 8007b6a:	e00a      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e008      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b70:	bf00      	nop
 8007b72:	e006      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b74:	bf00      	nop
 8007b76:	e004      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b78:	bf00      	nop
 8007b7a:	e002      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b7c:	bf00      	nop
 8007b7e:	e000      	b.n	8007b82 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b80:	bf00      	nop
  }
  return status;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8007baa:	78bb      	ldrb	r3, [r7, #2]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <USBH_MSC_BOT_Abort+0x2a>
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d009      	beq.n	8007bc8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007bb4:	e011      	b.n	8007bda <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	79db      	ldrb	r3, [r3, #7]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f99c 	bl	8008efa <USBH_ClrFeature>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc6:	e008      	b.n	8007bda <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	799b      	ldrb	r3, [r3, #6]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 f993 	bl	8008efa <USBH_ClrFeature>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd8:	bf00      	nop
  }
  return status;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	791b      	ldrb	r3, [r3, #4]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f004 fc7d 	bl	800c500 <USBH_LL_GetLastXferSize>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b0d      	cmp	r3, #13
 8007c0a:	d002      	beq.n	8007c12 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	73fb      	strb	r3, [r7, #15]
 8007c10:	e024      	b.n	8007c5c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c16:	4a14      	ldr	r2, [pc, #80]	; (8007c68 <USBH_MSC_DecodeCSW+0x84>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d11d      	bne.n	8007c58 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d119      	bne.n	8007c5c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d102      	bne.n	8007c38 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
 8007c36:	e011      	b.n	8007c5c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d102      	bne.n	8007c48 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007c42:	2301      	movs	r3, #1
 8007c44:	73fb      	strb	r3, [r7, #15]
 8007c46:	e009      	b.n	8007c5c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d104      	bne.n	8007c5c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007c52:	2302      	movs	r3, #2
 8007c54:	73fb      	strb	r3, [r7, #15]
 8007c56:	e001      	b.n	8007c5c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	53425355 	.word	0x53425355

08007c6c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d002      	beq.n	8007c96 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d021      	beq.n	8007cd8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007c94:	e028      	b.n	8007ce8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	220a      	movs	r2, #10
 8007ca8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	3363      	adds	r3, #99	; 0x63
 8007cb0:	2210      	movs	r2, #16
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f004 fddb 	bl	800c870 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd6:	e007      	b.n	8007ce8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff fd87 	bl	80077f0 <USBH_MSC_BOT_Process>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce6:	bf00      	nop
  }

  return error;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	607a      	str	r2, [r7, #4]
 8007cfe:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8007d00:	2301      	movs	r3, #1
 8007d02:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d002      	beq.n	8007d1e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d027      	beq.n	8007d6c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007d1c:	e05f      	b.n	8007dde <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2208      	movs	r2, #8
 8007d22:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	2280      	movs	r2, #128	; 0x80
 8007d28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	220a      	movs	r2, #10
 8007d30:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	3363      	adds	r3, #99	; 0x63
 8007d38:	2210      	movs	r2, #16
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f004 fd97 	bl	800c870 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	2225      	movs	r2, #37	; 0x25
 8007d46:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f103 0210 	add.w	r2, r3, #16
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007d66:	2301      	movs	r3, #1
 8007d68:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6a:	e038      	b.n	8007dde <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff fd3d 	bl	80077f0 <USBH_MSC_BOT_Process>
 8007d76:	4603      	mov	r3, r0
 8007d78:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d12d      	bne.n	8007ddc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d86:	3303      	adds	r3, #3
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d92:	3302      	adds	r3, #2
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da0:	3301      	adds	r3, #1
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007da6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	061b      	lsls	r3, r3, #24
 8007db2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dbe:	3307      	adds	r3, #7
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dca:	3306      	adds	r3, #6
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	809a      	strh	r2, [r3, #4]
      break;
 8007ddc:	bf00      	nop
  }

  return error;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	460b      	mov	r3, r1
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007df6:	2302      	movs	r3, #2
 8007df8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d002      	beq.n	8007e14 <USBH_MSC_SCSI_Inquiry+0x2c>
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d03d      	beq.n	8007e8e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007e12:	e089      	b.n	8007f28 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2224      	movs	r2, #36	; 0x24
 8007e18:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	220a      	movs	r2, #10
 8007e26:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3363      	adds	r3, #99	; 0x63
 8007e2e:	220a      	movs	r2, #10
 8007e30:	2100      	movs	r1, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f004 fd1c 	bl	800c870 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2212      	movs	r2, #18
 8007e3c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007e40:	7afb      	ldrb	r3, [r7, #11]
 8007e42:	015b      	lsls	r3, r3, #5
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	2224      	movs	r2, #36	; 0x24
 8007e60:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f103 0210 	add.w	r2, r3, #16
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8c:	e04c      	b.n	8007f28 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007e8e:	7afb      	ldrb	r3, [r7, #11]
 8007e90:	4619      	mov	r1, r3
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff fcac 	bl	80077f0 <USBH_MSC_BOT_Process>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d141      	bne.n	8007f26 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007ea2:	2222      	movs	r2, #34	; 0x22
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f004 fce2 	bl	800c870 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	b25b      	sxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da03      	bge.n	8007ee6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	709a      	strb	r2, [r3, #2]
 8007ee4:	e002      	b.n	8007eec <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	1cd8      	adds	r0, r3, #3
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	2208      	movs	r2, #8
 8007efa:	4619      	mov	r1, r3
 8007efc:	f004 fcaa 	bl	800c854 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f103 000c 	add.w	r0, r3, #12
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f0c:	3310      	adds	r3, #16
 8007f0e:	2210      	movs	r2, #16
 8007f10:	4619      	mov	r1, r3
 8007f12:	f004 fc9f 	bl	800c854 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	331d      	adds	r3, #29
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007f20:	3220      	adds	r2, #32
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	601a      	str	r2, [r3, #0]
      break;
 8007f26:	bf00      	nop
  }

  return error;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b086      	sub	sp, #24
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007f40:	2302      	movs	r3, #2
 8007f42:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d002      	beq.n	8007f5e <USBH_MSC_SCSI_RequestSense+0x2c>
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d03d      	beq.n	8007fd8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007f5c:	e05d      	b.n	800801a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	220e      	movs	r2, #14
 8007f62:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2280      	movs	r2, #128	; 0x80
 8007f68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	220a      	movs	r2, #10
 8007f70:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	3363      	adds	r3, #99	; 0x63
 8007f78:	2210      	movs	r2, #16
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f004 fc77 	bl	800c870 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2203      	movs	r2, #3
 8007f86:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007f8a:	7afb      	ldrb	r3, [r7, #11]
 8007f8c:	015b      	lsls	r3, r3, #5
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	220e      	movs	r2, #14
 8007faa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f103 0210 	add.w	r2, r3, #16
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd6:	e020      	b.n	800801a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff fc07 	bl	80077f0 <USBH_MSC_BOT_Process>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d115      	bne.n	8008018 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008006:	7b1a      	ldrb	r2, [r3, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008012:	7b5a      	ldrb	r2, [r3, #13]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	709a      	strb	r2, [r3, #2]
      break;
 8008018:	bf00      	nop
  }

  return error;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	460b      	mov	r3, r1
 8008032:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008034:	2302      	movs	r3, #2
 8008036:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008048:	2b01      	cmp	r3, #1
 800804a:	d002      	beq.n	8008052 <USBH_MSC_SCSI_Write+0x2e>
 800804c:	2b02      	cmp	r3, #2
 800804e:	d047      	beq.n	80080e0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008050:	e04e      	b.n	80080f0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008058:	461a      	mov	r2, r3
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	fb03 f202 	mul.w	r2, r3, r2
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	220a      	movs	r2, #10
 8008070:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	3363      	adds	r3, #99	; 0x63
 8008078:	2210      	movs	r2, #16
 800807a:	2100      	movs	r1, #0
 800807c:	4618      	mov	r0, r3
 800807e:	f004 fbf7 	bl	800c870 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	222a      	movs	r2, #42	; 0x2a
 8008086:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800808a:	79fa      	ldrb	r2, [r7, #7]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008092:	79ba      	ldrb	r2, [r7, #6]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800809a:	797a      	ldrb	r2, [r7, #5]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80080a2:	1d3b      	adds	r3, r7, #4
 80080a4:	781a      	ldrb	r2, [r3, #0]
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80080ac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80080b6:	f107 0320 	add.w	r3, r7, #32
 80080ba:	781a      	ldrb	r2, [r3, #0]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	2202      	movs	r2, #2
 80080ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80080da:	2301      	movs	r3, #1
 80080dc:	75fb      	strb	r3, [r7, #23]
      break;
 80080de:	e007      	b.n	80080f0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80080e0:	7afb      	ldrb	r3, [r7, #11]
 80080e2:	4619      	mov	r1, r3
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7ff fb83 	bl	80077f0 <USBH_MSC_BOT_Process>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]
      break;
 80080ee:	bf00      	nop
  }

  return error;
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b086      	sub	sp, #24
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
 8008106:	460b      	mov	r3, r1
 8008108:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800810a:	2302      	movs	r3, #2
 800810c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800811e:	2b01      	cmp	r3, #1
 8008120:	d002      	beq.n	8008128 <USBH_MSC_SCSI_Read+0x2e>
 8008122:	2b02      	cmp	r3, #2
 8008124:	d047      	beq.n	80081b6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008126:	e04e      	b.n	80081c6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800812e:	461a      	mov	r2, r3
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	fb03 f202 	mul.w	r2, r3, r2
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2280      	movs	r2, #128	; 0x80
 800813e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	220a      	movs	r2, #10
 8008146:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	3363      	adds	r3, #99	; 0x63
 800814e:	2210      	movs	r2, #16
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f004 fb8c 	bl	800c870 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	2228      	movs	r2, #40	; 0x28
 800815c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008160:	79fa      	ldrb	r2, [r7, #7]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008168:	79ba      	ldrb	r2, [r7, #6]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008170:	797a      	ldrb	r2, [r7, #5]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008178:	1d3b      	adds	r3, r7, #4
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008182:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800818c:	f107 0320 	add.w	r3, r7, #32
 8008190:	781a      	ldrb	r2, [r3, #0]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80081b0:	2301      	movs	r3, #1
 80081b2:	75fb      	strb	r3, [r7, #23]
      break;
 80081b4:	e007      	b.n	80081c6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	4619      	mov	r1, r3
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff fb18 	bl	80077f0 <USBH_MSC_BOT_Process>
 80081c0:	4603      	mov	r3, r0
 80081c2:	75fb      	strb	r3, [r7, #23]
      break;
 80081c4:	bf00      	nop
  }

  return error;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80081e4:	2302      	movs	r3, #2
 80081e6:	e029      	b.n	800823c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	79fa      	ldrb	r2, [r7, #7]
 80081ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f81f 	bl	8008244 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f004 f8af 	bl	800c398 <USBH_LL_Init>

  return USBH_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e009      	b.n	800826a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	33e0      	adds	r3, #224	; 0xe0
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	2200      	movs	r2, #0
 8008262:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3301      	adds	r3, #1
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b0e      	cmp	r3, #14
 800826e:	d9f2      	bls.n	8008256 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e009      	b.n	800828a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4413      	add	r3, r2
 800827c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008280:	2200      	movs	r2, #0
 8008282:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008290:	d3f1      	bcc.n	8008276 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2240      	movs	r2, #64	; 0x40
 80082b6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d016      	beq.n	800832e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10e      	bne.n	8008328 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008310:	1c59      	adds	r1, r3, #1
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	33de      	adds	r3, #222	; 0xde
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]
 8008326:	e004      	b.n	8008332 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008328:	2302      	movs	r3, #2
 800832a:	73fb      	strb	r3, [r7, #15]
 800832c:	e001      	b.n	8008332 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800832e:	2302      	movs	r3, #2
 8008330:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008332:	7bfb      	ldrb	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	429a      	cmp	r2, r3
 800835a:	d204      	bcs.n	8008366 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008364:	e001      	b.n	800836a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008366:	2302      	movs	r3, #2
 8008368:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	4608      	mov	r0, r1
 8008382:	4611      	mov	r1, r2
 8008384:	461a      	mov	r2, r3
 8008386:	4603      	mov	r3, r0
 8008388:	70fb      	strb	r3, [r7, #3]
 800838a:	460b      	mov	r3, r1
 800838c:	70bb      	strb	r3, [r7, #2]
 800838e:	4613      	mov	r3, r2
 8008390:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008396:	2300      	movs	r3, #0
 8008398:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80083a0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083a2:	e025      	b.n	80083f0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	221a      	movs	r2, #26
 80083a8:	fb02 f303 	mul.w	r3, r2, r3
 80083ac:	3308      	adds	r3, #8
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	4413      	add	r3, r2
 80083b2:	3302      	adds	r3, #2
 80083b4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	795b      	ldrb	r3, [r3, #5]
 80083ba:	78fa      	ldrb	r2, [r7, #3]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d002      	beq.n	80083c6 <USBH_FindInterface+0x4e>
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	2bff      	cmp	r3, #255	; 0xff
 80083c4:	d111      	bne.n	80083ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083ca:	78ba      	ldrb	r2, [r7, #2]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d002      	beq.n	80083d6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083d0:	78bb      	ldrb	r3, [r7, #2]
 80083d2:	2bff      	cmp	r3, #255	; 0xff
 80083d4:	d109      	bne.n	80083ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083da:	787a      	ldrb	r2, [r7, #1]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d002      	beq.n	80083e6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083e0:	787b      	ldrb	r3, [r7, #1]
 80083e2:	2bff      	cmp	r3, #255	; 0xff
 80083e4:	d101      	bne.n	80083ea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	e006      	b.n	80083f8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	3301      	adds	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d9d6      	bls.n	80083a4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80083f6:	23ff      	movs	r3, #255	; 0xff
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f003 ffff 	bl	800c410 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008412:	2101      	movs	r1, #1
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f004 f918 	bl	800c64a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af04      	add	r7, sp, #16
 800842a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800842c:	2302      	movs	r3, #2
 800842e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b01      	cmp	r3, #1
 800843e:	d102      	bne.n	8008446 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2203      	movs	r2, #3
 8008444:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b0b      	cmp	r3, #11
 800844e:	f200 81b3 	bhi.w	80087b8 <USBH_Process+0x394>
 8008452:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <USBH_Process+0x34>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	08008489 	.word	0x08008489
 800845c:	080084bb 	.word	0x080084bb
 8008460:	08008523 	.word	0x08008523
 8008464:	08008753 	.word	0x08008753
 8008468:	080087b9 	.word	0x080087b9
 800846c:	080085c7 	.word	0x080085c7
 8008470:	080086f9 	.word	0x080086f9
 8008474:	080085fd 	.word	0x080085fd
 8008478:	0800861d 	.word	0x0800861d
 800847c:	0800863d 	.word	0x0800863d
 8008480:	0800866b 	.word	0x0800866b
 8008484:	0800873b 	.word	0x0800873b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8193 	beq.w	80087bc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800849c:	20c8      	movs	r0, #200	; 0xc8
 800849e:	f004 f94b 	bl	800c738 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f004 f811 	bl	800c4ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80084b8:	e180      	b.n	80087bc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d107      	bne.n	80084d4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084d2:	e182      	b.n	80087da <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80084da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084de:	d914      	bls.n	800850a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80084e6:	3301      	adds	r3, #1
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d903      	bls.n	8008502 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	220d      	movs	r2, #13
 80084fe:	701a      	strb	r2, [r3, #0]
      break;
 8008500:	e16b      	b.n	80087da <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
      break;
 8008508:	e167      	b.n	80087da <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008510:	f103 020a 	add.w	r2, r3, #10
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800851a:	200a      	movs	r0, #10
 800851c:	f004 f90c 	bl	800c738 <USBH_Delay>
      break;
 8008520:	e15b      	b.n	80087da <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008532:	2104      	movs	r1, #4
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008538:	2064      	movs	r0, #100	; 0x64
 800853a:	f004 f8fd 	bl	800c738 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f003 ff9c 	bl	800c47c <USBH_LL_GetSpeed>
 8008544:	4603      	mov	r3, r0
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2205      	movs	r2, #5
 8008552:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008554:	2100      	movs	r1, #0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 f92f 	bl	80097ba <USBH_AllocPipe>
 800855c:	4603      	mov	r3, r0
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008564:	2180      	movs	r1, #128	; 0x80
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 f927 	bl	80097ba <USBH_AllocPipe>
 800856c:	4603      	mov	r3, r0
 800856e:	461a      	mov	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	7919      	ldrb	r1, [r3, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008588:	b292      	uxth	r2, r2
 800858a:	9202      	str	r2, [sp, #8]
 800858c:	2200      	movs	r2, #0
 800858e:	9201      	str	r2, [sp, #4]
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4603      	mov	r3, r0
 8008594:	2280      	movs	r2, #128	; 0x80
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 f8e0 	bl	800975c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	7959      	ldrb	r1, [r3, #5]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80085b0:	b292      	uxth	r2, r2
 80085b2:	9202      	str	r2, [sp, #8]
 80085b4:	2200      	movs	r2, #0
 80085b6:	9201      	str	r2, [sp, #4]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	4603      	mov	r3, r0
 80085bc:	2200      	movs	r2, #0
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 f8cc 	bl	800975c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80085c4:	e109      	b.n	80087da <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f90c 	bl	80087e4 <USBH_HandleEnum>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f040 80f3 	bne.w	80087c0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d103      	bne.n	80085f4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2208      	movs	r2, #8
 80085f0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80085f2:	e0e5      	b.n	80087c0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2207      	movs	r2, #7
 80085f8:	701a      	strb	r2, [r3, #0]
      break;
 80085fa:	e0e1      	b.n	80087c0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 80de 	beq.w	80087c4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800860e:	2101      	movs	r1, #1
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2208      	movs	r2, #8
 8008618:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800861a:	e0d3      	b.n	80087c4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008622:	b29b      	uxth	r3, r3
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fc20 	bl	8008e6c <USBH_SetCfg>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	f040 80ca 	bne.w	80087c8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2209      	movs	r2, #9
 8008638:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800863a:	e0c5      	b.n	80087c8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00b      	beq.n	8008662 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800864a:	2101      	movs	r1, #1
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fc30 	bl	8008eb2 <USBH_SetFeature>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	f040 80b9 	bne.w	80087cc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	220a      	movs	r2, #10
 800865e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008660:	e0b4      	b.n	80087cc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	220a      	movs	r2, #10
 8008666:	701a      	strb	r2, [r3, #0]
      break;
 8008668:	e0b0      	b.n	80087cc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 80ad 	beq.w	80087d0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
 8008682:	e016      	b.n	80086b2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008684:	7bfa      	ldrb	r2, [r7, #15]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	32de      	adds	r2, #222	; 0xde
 800868a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868e:	791a      	ldrb	r2, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008696:	429a      	cmp	r2, r3
 8008698:	d108      	bne.n	80086ac <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800869a:	7bfa      	ldrb	r2, [r7, #15]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	32de      	adds	r2, #222	; 0xde
 80086a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80086aa:	e005      	b.n	80086b8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	3301      	adds	r3, #1
 80086b0:	73fb      	strb	r3, [r7, #15]
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0e5      	beq.n	8008684 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d016      	beq.n	80086f0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d109      	bne.n	80086e8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2206      	movs	r2, #6
 80086d8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086e0:	2103      	movs	r1, #3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80086e6:	e073      	b.n	80087d0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	220d      	movs	r2, #13
 80086ec:	701a      	strb	r2, [r3, #0]
      break;
 80086ee:	e06f      	b.n	80087d0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	220d      	movs	r2, #13
 80086f4:	701a      	strb	r2, [r3, #0]
      break;
 80086f6:	e06b      	b.n	80087d0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d017      	beq.n	8008732 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
 800870e:	4603      	mov	r3, r0
 8008710:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d103      	bne.n	8008722 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	220b      	movs	r2, #11
 800871e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008720:	e058      	b.n	80087d4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d154      	bne.n	80087d4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	220d      	movs	r2, #13
 800872e:	701a      	strb	r2, [r3, #0]
      break;
 8008730:	e050      	b.n	80087d4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	220d      	movs	r2, #13
 8008736:	701a      	strb	r2, [r3, #0]
      break;
 8008738:	e04c      	b.n	80087d4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008740:	2b00      	cmp	r3, #0
 8008742:	d049      	beq.n	80087d8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	4798      	blx	r3
      }
      break;
 8008750:	e042      	b.n	80087d8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff fd72 	bl	8008244 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d009      	beq.n	800877e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d005      	beq.n	8008794 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800878e:	2105      	movs	r1, #5
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	d107      	bne.n	80087b0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff fe2b 	bl	8008404 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087ae:	e014      	b.n	80087da <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f003 fe2d 	bl	800c410 <USBH_LL_Start>
      break;
 80087b6:	e010      	b.n	80087da <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80087b8:	bf00      	nop
 80087ba:	e00e      	b.n	80087da <USBH_Process+0x3b6>
      break;
 80087bc:	bf00      	nop
 80087be:	e00c      	b.n	80087da <USBH_Process+0x3b6>
      break;
 80087c0:	bf00      	nop
 80087c2:	e00a      	b.n	80087da <USBH_Process+0x3b6>
    break;
 80087c4:	bf00      	nop
 80087c6:	e008      	b.n	80087da <USBH_Process+0x3b6>
      break;
 80087c8:	bf00      	nop
 80087ca:	e006      	b.n	80087da <USBH_Process+0x3b6>
      break;
 80087cc:	bf00      	nop
 80087ce:	e004      	b.n	80087da <USBH_Process+0x3b6>
      break;
 80087d0:	bf00      	nop
 80087d2:	e002      	b.n	80087da <USBH_Process+0x3b6>
      break;
 80087d4:	bf00      	nop
 80087d6:	e000      	b.n	80087da <USBH_Process+0x3b6>
      break;
 80087d8:	bf00      	nop
  }
  return USBH_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af04      	add	r7, sp, #16
 80087ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80087ec:	2301      	movs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80087f0:	2301      	movs	r3, #1
 80087f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	2b07      	cmp	r3, #7
 80087fa:	f200 81c1 	bhi.w	8008b80 <USBH_HandleEnum+0x39c>
 80087fe:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <USBH_HandleEnum+0x20>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	08008825 	.word	0x08008825
 8008808:	080088e3 	.word	0x080088e3
 800880c:	0800894d 	.word	0x0800894d
 8008810:	080089db 	.word	0x080089db
 8008814:	08008a45 	.word	0x08008a45
 8008818:	08008ab5 	.word	0x08008ab5
 800881c:	08008afb 	.word	0x08008afb
 8008820:	08008b41 	.word	0x08008b41
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008824:	2108      	movs	r1, #8
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa50 	bl	8008ccc <USBH_Get_DevDesc>
 800882c:	4603      	mov	r3, r0
 800882e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d130      	bne.n	8008898 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	7919      	ldrb	r1, [r3, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800885a:	b292      	uxth	r2, r2
 800885c:	9202      	str	r2, [sp, #8]
 800885e:	2200      	movs	r2, #0
 8008860:	9201      	str	r2, [sp, #4]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4603      	mov	r3, r0
 8008866:	2280      	movs	r2, #128	; 0x80
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 ff77 	bl	800975c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	7959      	ldrb	r1, [r3, #5]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008882:	b292      	uxth	r2, r2
 8008884:	9202      	str	r2, [sp, #8]
 8008886:	2200      	movs	r2, #0
 8008888:	9201      	str	r2, [sp, #4]
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	4603      	mov	r3, r0
 800888e:	2200      	movs	r2, #0
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 ff63 	bl	800975c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008896:	e175      	b.n	8008b84 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	2b03      	cmp	r3, #3
 800889c:	f040 8172 	bne.w	8008b84 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088a6:	3301      	adds	r3, #1
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d903      	bls.n	80088c2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	220d      	movs	r2, #13
 80088be:	701a      	strb	r2, [r3, #0]
      break;
 80088c0:	e160      	b.n	8008b84 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	795b      	ldrb	r3, [r3, #5]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 ff97 	bl	80097fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	791b      	ldrb	r3, [r3, #4]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 ff91 	bl	80097fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
      break;
 80088e0:	e150      	b.n	8008b84 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80088e2:	2112      	movs	r1, #18
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f9f1 	bl	8008ccc <USBH_Get_DevDesc>
 80088ea:	4603      	mov	r3, r0
 80088ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d103      	bne.n	80088fc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088fa:	e145      	b.n	8008b88 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b03      	cmp	r3, #3
 8008900:	f040 8142 	bne.w	8008b88 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800890a:	3301      	adds	r3, #1
 800890c:	b2da      	uxtb	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800891a:	2b03      	cmp	r3, #3
 800891c:	d903      	bls.n	8008926 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	220d      	movs	r2, #13
 8008922:	701a      	strb	r2, [r3, #0]
      break;
 8008924:	e130      	b.n	8008b88 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	795b      	ldrb	r3, [r3, #5]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 ff65 	bl	80097fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	791b      	ldrb	r3, [r3, #4]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 ff5f 	bl	80097fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]
      break;
 800894a:	e11d      	b.n	8008b88 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800894c:	2101      	movs	r1, #1
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fa68 	bl	8008e24 <USBH_SetAddress>
 8008954:	4603      	mov	r3, r0
 8008956:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d132      	bne.n	80089c4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800895e:	2002      	movs	r0, #2
 8008960:	f003 feea 	bl	800c738 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2203      	movs	r2, #3
 8008970:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	7919      	ldrb	r1, [r3, #4]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008986:	b292      	uxth	r2, r2
 8008988:	9202      	str	r2, [sp, #8]
 800898a:	2200      	movs	r2, #0
 800898c:	9201      	str	r2, [sp, #4]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4603      	mov	r3, r0
 8008992:	2280      	movs	r2, #128	; 0x80
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fee1 	bl	800975c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	7959      	ldrb	r1, [r3, #5]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089ae:	b292      	uxth	r2, r2
 80089b0:	9202      	str	r2, [sp, #8]
 80089b2:	2200      	movs	r2, #0
 80089b4:	9201      	str	r2, [sp, #4]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	4603      	mov	r3, r0
 80089ba:	2200      	movs	r2, #0
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fecd 	bl	800975c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80089c2:	e0e3      	b.n	8008b8c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	f040 80e0 	bne.w	8008b8c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	220d      	movs	r2, #13
 80089d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	705a      	strb	r2, [r3, #1]
      break;
 80089d8:	e0d8      	b.n	8008b8c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80089da:	2109      	movs	r1, #9
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f99d 	bl	8008d1c <USBH_Get_CfgDesc>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2204      	movs	r2, #4
 80089f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089f2:	e0cd      	b.n	8008b90 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	f040 80ca 	bne.w	8008b90 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a02:	3301      	adds	r3, #1
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d903      	bls.n	8008a1e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	220d      	movs	r2, #13
 8008a1a:	701a      	strb	r2, [r3, #0]
      break;
 8008a1c:	e0b8      	b.n	8008b90 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	795b      	ldrb	r3, [r3, #5]
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fee9 	bl	80097fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	791b      	ldrb	r3, [r3, #4]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fee3 	bl	80097fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	701a      	strb	r2, [r3, #0]
      break;
 8008a42:	e0a5      	b.n	8008b90 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f965 	bl	8008d1c <USBH_Get_CfgDesc>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2205      	movs	r2, #5
 8008a60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a62:	e097      	b.n	8008b94 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	f040 8094 	bne.w	8008b94 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a72:	3301      	adds	r3, #1
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d903      	bls.n	8008a8e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	220d      	movs	r2, #13
 8008a8a:	701a      	strb	r2, [r3, #0]
      break;
 8008a8c:	e082      	b.n	8008b94 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	795b      	ldrb	r3, [r3, #5]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 feb1 	bl	80097fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	791b      	ldrb	r3, [r3, #4]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 feab 	bl	80097fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
      break;
 8008ab2:	e06f      	b.n	8008b94 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d019      	beq.n	8008af2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008aca:	23ff      	movs	r3, #255	; 0xff
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f949 	bl	8008d64 <USBH_Get_StringDesc>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d103      	bne.n	8008ae4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2206      	movs	r2, #6
 8008ae0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008ae2:	e059      	b.n	8008b98 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d156      	bne.n	8008b98 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2206      	movs	r2, #6
 8008aee:	705a      	strb	r2, [r3, #1]
      break;
 8008af0:	e052      	b.n	8008b98 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2206      	movs	r2, #6
 8008af6:	705a      	strb	r2, [r3, #1]
      break;
 8008af8:	e04e      	b.n	8008b98 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d019      	beq.n	8008b38 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b10:	23ff      	movs	r3, #255	; 0xff
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f926 	bl	8008d64 <USBH_Get_StringDesc>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d103      	bne.n	8008b2a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2207      	movs	r2, #7
 8008b26:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b28:	e038      	b.n	8008b9c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d135      	bne.n	8008b9c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2207      	movs	r2, #7
 8008b34:	705a      	strb	r2, [r3, #1]
      break;
 8008b36:	e031      	b.n	8008b9c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2207      	movs	r2, #7
 8008b3c:	705a      	strb	r2, [r3, #1]
      break;
 8008b3e:	e02d      	b.n	8008b9c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d017      	beq.n	8008b7a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b56:	23ff      	movs	r3, #255	; 0xff
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f903 	bl	8008d64 <USBH_Get_StringDesc>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d102      	bne.n	8008b6e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008b6c:	e018      	b.n	8008ba0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d115      	bne.n	8008ba0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
      break;
 8008b78:	e012      	b.n	8008ba0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b7e:	e00f      	b.n	8008ba0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008b80:	bf00      	nop
 8008b82:	e00e      	b.n	8008ba2 <USBH_HandleEnum+0x3be>
      break;
 8008b84:	bf00      	nop
 8008b86:	e00c      	b.n	8008ba2 <USBH_HandleEnum+0x3be>
      break;
 8008b88:	bf00      	nop
 8008b8a:	e00a      	b.n	8008ba2 <USBH_HandleEnum+0x3be>
      break;
 8008b8c:	bf00      	nop
 8008b8e:	e008      	b.n	8008ba2 <USBH_HandleEnum+0x3be>
      break;
 8008b90:	bf00      	nop
 8008b92:	e006      	b.n	8008ba2 <USBH_HandleEnum+0x3be>
      break;
 8008b94:	bf00      	nop
 8008b96:	e004      	b.n	8008ba2 <USBH_HandleEnum+0x3be>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e002      	b.n	8008ba2 <USBH_HandleEnum+0x3be>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e000      	b.n	8008ba2 <USBH_HandleEnum+0x3be>
      break;
 8008ba0:	bf00      	nop
  }
  return Status;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f804 	bl	8008bee <USBH_HandleSof>
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b0b      	cmp	r3, #11
 8008bfe:	d10a      	bne.n	8008c16 <USBH_HandleSof+0x28>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d005      	beq.n	8008c16 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
  }
}
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008c2e:	bf00      	nop
}
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008c4a:	bf00      	nop
}
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f003 fbce 	bl	800c446 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	791b      	ldrb	r3, [r3, #4]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fda3 	bl	80097fc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	795b      	ldrb	r3, [r3, #5]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fd9d 	bl	80097fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cea:	2100      	movs	r1, #0
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f864 	bl	8008dba <USBH_GetDescriptor>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	73fb      	strb	r3, [r7, #15]
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	b292      	uxth	r2, r2
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	f000 f918 	bl	8008f42 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	331c      	adds	r3, #28
 8008d2c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d2e:	887b      	ldrh	r3, [r7, #2]
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d38:	2100      	movs	r1, #0
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f83d 	bl	8008dba <USBH_GetDescriptor>
 8008d40:	4603      	mov	r3, r0
 8008d42:	72fb      	strb	r3, [r7, #11]
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d107      	bne.n	8008d5a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d50:	887a      	ldrh	r2, [r7, #2]
 8008d52:	68f9      	ldr	r1, [r7, #12]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 f964 	bl	8009022 <USBH_ParseCfgDesc>
  }

  return status;
 8008d5a:	7afb      	ldrb	r3, [r7, #11]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	460b      	mov	r3, r1
 8008d72:	72fb      	strb	r3, [r7, #11]
 8008d74:	4613      	mov	r3, r2
 8008d76:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008d80:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008d88:	893b      	ldrh	r3, [r7, #8]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	2100      	movs	r1, #0
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 f812 	bl	8008dba <USBH_GetDescriptor>
 8008d96:	4603      	mov	r3, r0
 8008d98:	75fb      	strb	r3, [r7, #23]
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d107      	bne.n	8008db0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008da6:	893a      	ldrh	r2, [r7, #8]
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fa37 	bl	800921e <USBH_ParseStringDesc>
  }

  return status;
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	607b      	str	r3, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	72fb      	strb	r3, [r7, #11]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	789b      	ldrb	r3, [r3, #2]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d11c      	bne.n	8008e0e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2206      	movs	r2, #6
 8008de4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	893a      	ldrh	r2, [r7, #8]
 8008dea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008dec:	893b      	ldrh	r3, [r7, #8]
 8008dee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008df6:	d104      	bne.n	8008e02 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f240 4209 	movw	r2, #1033	; 0x409
 8008dfe:	829a      	strh	r2, [r3, #20]
 8008e00:	e002      	b.n	8008e08 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8b3a      	ldrh	r2, [r7, #24]
 8008e0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008e0e:	8b3b      	ldrh	r3, [r7, #24]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 fa50 	bl	80092ba <USBH_CtlReq>
 8008e1a:	4603      	mov	r3, r0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	789b      	ldrb	r3, [r3, #2]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d10f      	bne.n	8008e58 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2205      	movs	r2, #5
 8008e42:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fa2c 	bl	80092ba <USBH_CtlReq>
 8008e62:	4603      	mov	r3, r0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	789b      	ldrb	r3, [r3, #2]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d10e      	bne.n	8008e9e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2209      	movs	r2, #9
 8008e8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	887a      	ldrh	r2, [r7, #2]
 8008e90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fa09 	bl	80092ba <USBH_CtlReq>
 8008ea8:	4603      	mov	r3, r0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	789b      	ldrb	r3, [r3, #2]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d10f      	bne.n	8008ee6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2203      	movs	r2, #3
 8008ed0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2100      	movs	r1, #0
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f9e5 	bl	80092ba <USBH_CtlReq>
 8008ef0:	4603      	mov	r3, r0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	789b      	ldrb	r3, [r3, #2]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d10f      	bne.n	8008f2e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2202      	movs	r2, #2
 8008f12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2100      	movs	r1, #0
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f9c1 	bl	80092ba <USBH_CtlReq>
 8008f38:	4603      	mov	r3, r0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	781a      	ldrb	r2, [r3, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	785a      	ldrb	r2, [r3, #1]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	3302      	adds	r3, #2
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	3303      	adds	r3, #3
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	791a      	ldrb	r2, [r3, #4]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	795a      	ldrb	r2, [r3, #5]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	799a      	ldrb	r2, [r3, #6]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	79da      	ldrb	r2, [r3, #7]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	d939      	bls.n	8009016 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	3309      	adds	r3, #9
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	330a      	adds	r3, #10
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	330b      	adds	r3, #11
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	021b      	lsls	r3, r3, #8
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	330c      	adds	r3, #12
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	330d      	adds	r3, #13
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	7b9a      	ldrb	r2, [r3, #14]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	7bda      	ldrb	r2, [r3, #15]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	7c1a      	ldrb	r2, [r3, #16]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	7c5a      	ldrb	r2, [r3, #17]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	745a      	strb	r2, [r3, #17]
  }
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b08a      	sub	sp, #40	; 0x28
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	60b9      	str	r1, [r7, #8]
 800902c:	4613      	mov	r3, r2
 800902e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	781a      	ldrb	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	785a      	ldrb	r2, [r3, #1]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	3302      	adds	r3, #2
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	b29a      	uxth	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	3303      	adds	r3, #3
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b29b      	uxth	r3, r3
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	b29b      	uxth	r3, r3
 8009068:	4313      	orrs	r3, r2
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	791a      	ldrb	r2, [r3, #4]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	795a      	ldrb	r2, [r3, #5]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	799a      	ldrb	r2, [r3, #6]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	79da      	ldrb	r2, [r3, #7]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	7a1a      	ldrb	r2, [r3, #8]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009098:	88fb      	ldrh	r3, [r7, #6]
 800909a:	2b09      	cmp	r3, #9
 800909c:	d95f      	bls.n	800915e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800909e:	2309      	movs	r3, #9
 80090a0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80090a6:	e051      	b.n	800914c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090a8:	f107 0316 	add.w	r3, r7, #22
 80090ac:	4619      	mov	r1, r3
 80090ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090b0:	f000 f8e8 	bl	8009284 <USBH_GetNextDesc>
 80090b4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	785b      	ldrb	r3, [r3, #1]
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	d146      	bne.n	800914c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80090be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090c2:	221a      	movs	r2, #26
 80090c4:	fb02 f303 	mul.w	r3, r2, r3
 80090c8:	3308      	adds	r3, #8
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	4413      	add	r3, r2
 80090ce:	3302      	adds	r3, #2
 80090d0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80090d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090d4:	69f8      	ldr	r0, [r7, #28]
 80090d6:	f000 f846 	bl	8009166 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80090e4:	e022      	b.n	800912c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090e6:	f107 0316 	add.w	r3, r7, #22
 80090ea:	4619      	mov	r1, r3
 80090ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090ee:	f000 f8c9 	bl	8009284 <USBH_GetNextDesc>
 80090f2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2b05      	cmp	r3, #5
 80090fa:	d117      	bne.n	800912c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80090fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009100:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009104:	3201      	adds	r2, #1
 8009106:	00d2      	lsls	r2, r2, #3
 8009108:	211a      	movs	r1, #26
 800910a:	fb01 f303 	mul.w	r3, r1, r3
 800910e:	4413      	add	r3, r2
 8009110:	3308      	adds	r3, #8
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	3304      	adds	r3, #4
 8009118:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800911a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800911c:	69b8      	ldr	r0, [r7, #24]
 800911e:	f000 f851 	bl	80091c4 <USBH_ParseEPDesc>
            ep_ix++;
 8009122:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009126:	3301      	adds	r3, #1
 8009128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	791b      	ldrb	r3, [r3, #4]
 8009130:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009134:	429a      	cmp	r2, r3
 8009136:	d204      	bcs.n	8009142 <USBH_ParseCfgDesc+0x120>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	885a      	ldrh	r2, [r3, #2]
 800913c:	8afb      	ldrh	r3, [r7, #22]
 800913e:	429a      	cmp	r2, r3
 8009140:	d8d1      	bhi.n	80090e6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009146:	3301      	adds	r3, #1
 8009148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800914c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009150:	2b01      	cmp	r3, #1
 8009152:	d804      	bhi.n	800915e <USBH_ParseCfgDesc+0x13c>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	885a      	ldrh	r2, [r3, #2]
 8009158:	8afb      	ldrh	r3, [r7, #22]
 800915a:	429a      	cmp	r2, r3
 800915c:	d8a4      	bhi.n	80090a8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800915e:	bf00      	nop
 8009160:	3728      	adds	r7, #40	; 0x28
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781a      	ldrb	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	785a      	ldrb	r2, [r3, #1]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	789a      	ldrb	r2, [r3, #2]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	78da      	ldrb	r2, [r3, #3]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	791a      	ldrb	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	795a      	ldrb	r2, [r3, #5]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	799a      	ldrb	r2, [r3, #6]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	79da      	ldrb	r2, [r3, #7]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	7a1a      	ldrb	r2, [r3, #8]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	721a      	strb	r2, [r3, #8]
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781a      	ldrb	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	785a      	ldrb	r2, [r3, #1]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	789a      	ldrb	r2, [r3, #2]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	78da      	ldrb	r2, [r3, #3]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	3304      	adds	r3, #4
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	3305      	adds	r3, #5
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	021b      	lsls	r3, r3, #8
 8009200:	b29b      	uxth	r3, r3
 8009202:	4313      	orrs	r3, r2
 8009204:	b29a      	uxth	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	799a      	ldrb	r2, [r3, #6]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	719a      	strb	r2, [r3, #6]
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800921e:	b480      	push	{r7}
 8009220:	b087      	sub	sp, #28
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	4613      	mov	r3, r2
 800922a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b03      	cmp	r3, #3
 8009234:	d120      	bne.n	8009278 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	1e9a      	subs	r2, r3, #2
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	4293      	cmp	r3, r2
 8009240:	bf28      	it	cs
 8009242:	4613      	movcs	r3, r2
 8009244:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3302      	adds	r3, #2
 800924a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800924c:	2300      	movs	r3, #0
 800924e:	82fb      	strh	r3, [r7, #22]
 8009250:	e00b      	b.n	800926a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009252:	8afb      	ldrh	r3, [r7, #22]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	3301      	adds	r3, #1
 8009262:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009264:	8afb      	ldrh	r3, [r7, #22]
 8009266:	3302      	adds	r3, #2
 8009268:	82fb      	strh	r3, [r7, #22]
 800926a:	8afa      	ldrh	r2, [r7, #22]
 800926c:	8abb      	ldrh	r3, [r7, #20]
 800926e:	429a      	cmp	r2, r3
 8009270:	d3ef      	bcc.n	8009252 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
  }
}
 8009278:	bf00      	nop
 800927a:	371c      	adds	r7, #28
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	881a      	ldrh	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	4413      	add	r3, r2
 800929a:	b29a      	uxth	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4413      	add	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092ac:	68fb      	ldr	r3, [r7, #12]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b086      	sub	sp, #24
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	4613      	mov	r3, r2
 80092c6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80092c8:	2301      	movs	r3, #1
 80092ca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	789b      	ldrb	r3, [r3, #2]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d002      	beq.n	80092da <USBH_CtlReq+0x20>
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d00f      	beq.n	80092f8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80092d8:	e027      	b.n	800932a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	88fa      	ldrh	r2, [r7, #6]
 80092e4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2202      	movs	r2, #2
 80092f0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80092f2:	2301      	movs	r3, #1
 80092f4:	75fb      	strb	r3, [r7, #23]
      break;
 80092f6:	e018      	b.n	800932a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 f81b 	bl	8009334 <USBH_HandleControl>
 80092fe:	4603      	mov	r3, r0
 8009300:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <USBH_CtlReq+0x54>
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	2b03      	cmp	r3, #3
 800930c:	d106      	bne.n	800931c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	761a      	strb	r2, [r3, #24]
      break;
 800931a:	e005      	b.n	8009328 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d102      	bne.n	8009328 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2201      	movs	r2, #1
 8009326:	709a      	strb	r2, [r3, #2]
      break;
 8009328:	bf00      	nop
  }
  return status;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af02      	add	r7, sp, #8
 800933a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800933c:	2301      	movs	r3, #1
 800933e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009340:	2300      	movs	r3, #0
 8009342:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	7e1b      	ldrb	r3, [r3, #24]
 8009348:	3b01      	subs	r3, #1
 800934a:	2b0a      	cmp	r3, #10
 800934c:	f200 8156 	bhi.w	80095fc <USBH_HandleControl+0x2c8>
 8009350:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <USBH_HandleControl+0x24>)
 8009352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009356:	bf00      	nop
 8009358:	08009385 	.word	0x08009385
 800935c:	0800939f 	.word	0x0800939f
 8009360:	08009409 	.word	0x08009409
 8009364:	0800942f 	.word	0x0800942f
 8009368:	08009467 	.word	0x08009467
 800936c:	08009491 	.word	0x08009491
 8009370:	080094e3 	.word	0x080094e3
 8009374:	08009505 	.word	0x08009505
 8009378:	08009541 	.word	0x08009541
 800937c:	08009567 	.word	0x08009567
 8009380:	080095a5 	.word	0x080095a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f103 0110 	add.w	r1, r3, #16
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	795b      	ldrb	r3, [r3, #5]
 800938e:	461a      	mov	r2, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f943 	bl	800961c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	761a      	strb	r2, [r3, #24]
      break;
 800939c:	e139      	b.n	8009612 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	795b      	ldrb	r3, [r3, #5]
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f003 f93d 	bl	800c624 <USBH_LL_GetURBState>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d11e      	bne.n	80093f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	7c1b      	ldrb	r3, [r3, #16]
 80093b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	8adb      	ldrh	r3, [r3, #22]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80093c6:	7b7b      	ldrb	r3, [r7, #13]
 80093c8:	2b80      	cmp	r3, #128	; 0x80
 80093ca:	d103      	bne.n	80093d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2203      	movs	r2, #3
 80093d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80093d2:	e115      	b.n	8009600 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2205      	movs	r2, #5
 80093d8:	761a      	strb	r2, [r3, #24]
      break;
 80093da:	e111      	b.n	8009600 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80093dc:	7b7b      	ldrb	r3, [r7, #13]
 80093de:	2b80      	cmp	r3, #128	; 0x80
 80093e0:	d103      	bne.n	80093ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2209      	movs	r2, #9
 80093e6:	761a      	strb	r2, [r3, #24]
      break;
 80093e8:	e10a      	b.n	8009600 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2207      	movs	r2, #7
 80093ee:	761a      	strb	r2, [r3, #24]
      break;
 80093f0:	e106      	b.n	8009600 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d003      	beq.n	8009400 <USBH_HandleControl+0xcc>
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	f040 8100 	bne.w	8009600 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	220b      	movs	r2, #11
 8009404:	761a      	strb	r2, [r3, #24]
      break;
 8009406:	e0fb      	b.n	8009600 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800940e:	b29a      	uxth	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6899      	ldr	r1, [r3, #8]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	899a      	ldrh	r2, [r3, #12]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	791b      	ldrb	r3, [r3, #4]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f93a 	bl	800969a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2204      	movs	r2, #4
 800942a:	761a      	strb	r2, [r3, #24]
      break;
 800942c:	e0f1      	b.n	8009612 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	791b      	ldrb	r3, [r3, #4]
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f003 f8f5 	bl	800c624 <USBH_LL_GetURBState>
 800943a:	4603      	mov	r3, r0
 800943c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d102      	bne.n	800944a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2209      	movs	r2, #9
 8009448:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b05      	cmp	r3, #5
 800944e:	d102      	bne.n	8009456 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009450:	2303      	movs	r3, #3
 8009452:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009454:	e0d6      	b.n	8009604 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	2b04      	cmp	r3, #4
 800945a:	f040 80d3 	bne.w	8009604 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	220b      	movs	r2, #11
 8009462:	761a      	strb	r2, [r3, #24]
      break;
 8009464:	e0ce      	b.n	8009604 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6899      	ldr	r1, [r3, #8]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	899a      	ldrh	r2, [r3, #12]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	795b      	ldrb	r3, [r3, #5]
 8009472:	2001      	movs	r0, #1
 8009474:	9000      	str	r0, [sp, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f8ea 	bl	8009650 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2206      	movs	r2, #6
 800948c:	761a      	strb	r2, [r3, #24]
      break;
 800948e:	e0c0      	b.n	8009612 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	795b      	ldrb	r3, [r3, #5]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f003 f8c4 	bl	800c624 <USBH_LL_GetURBState>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d103      	bne.n	80094ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2207      	movs	r2, #7
 80094aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80094ac:	e0ac      	b.n	8009608 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	2b05      	cmp	r3, #5
 80094b2:	d105      	bne.n	80094c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	220c      	movs	r2, #12
 80094b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80094ba:	2303      	movs	r3, #3
 80094bc:	73fb      	strb	r3, [r7, #15]
      break;
 80094be:	e0a3      	b.n	8009608 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d103      	bne.n	80094ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2205      	movs	r2, #5
 80094ca:	761a      	strb	r2, [r3, #24]
      break;
 80094cc:	e09c      	b.n	8009608 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	2b04      	cmp	r3, #4
 80094d2:	f040 8099 	bne.w	8009608 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	220b      	movs	r2, #11
 80094da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80094dc:	2302      	movs	r3, #2
 80094de:	73fb      	strb	r3, [r7, #15]
      break;
 80094e0:	e092      	b.n	8009608 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	791b      	ldrb	r3, [r3, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	2100      	movs	r1, #0
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f8d5 	bl	800969a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2208      	movs	r2, #8
 8009500:	761a      	strb	r2, [r3, #24]

      break;
 8009502:	e086      	b.n	8009612 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	791b      	ldrb	r3, [r3, #4]
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f003 f88a 	bl	800c624 <USBH_LL_GetURBState>
 8009510:	4603      	mov	r3, r0
 8009512:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d105      	bne.n	8009526 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	220d      	movs	r2, #13
 800951e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009524:	e072      	b.n	800960c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b04      	cmp	r3, #4
 800952a:	d103      	bne.n	8009534 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	220b      	movs	r2, #11
 8009530:	761a      	strb	r2, [r3, #24]
      break;
 8009532:	e06b      	b.n	800960c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	2b05      	cmp	r3, #5
 8009538:	d168      	bne.n	800960c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800953a:	2303      	movs	r3, #3
 800953c:	73fb      	strb	r3, [r7, #15]
      break;
 800953e:	e065      	b.n	800960c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	795b      	ldrb	r3, [r3, #5]
 8009544:	2201      	movs	r2, #1
 8009546:	9200      	str	r2, [sp, #0]
 8009548:	2200      	movs	r2, #0
 800954a:	2100      	movs	r1, #0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f87f 	bl	8009650 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009558:	b29a      	uxth	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	220a      	movs	r2, #10
 8009562:	761a      	strb	r2, [r3, #24]
      break;
 8009564:	e055      	b.n	8009612 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	795b      	ldrb	r3, [r3, #5]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f003 f859 	bl	800c624 <USBH_LL_GetURBState>
 8009572:	4603      	mov	r3, r0
 8009574:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d105      	bne.n	8009588 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	220d      	movs	r2, #13
 8009584:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009586:	e043      	b.n	8009610 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2b02      	cmp	r3, #2
 800958c:	d103      	bne.n	8009596 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2209      	movs	r2, #9
 8009592:	761a      	strb	r2, [r3, #24]
      break;
 8009594:	e03c      	b.n	8009610 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	2b04      	cmp	r3, #4
 800959a:	d139      	bne.n	8009610 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	220b      	movs	r2, #11
 80095a0:	761a      	strb	r2, [r3, #24]
      break;
 80095a2:	e035      	b.n	8009610 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7e5b      	ldrb	r3, [r3, #25]
 80095a8:	3301      	adds	r3, #1
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	765a      	strb	r2, [r3, #25]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	7e5b      	ldrb	r3, [r3, #25]
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d806      	bhi.n	80095c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80095c4:	e025      	b.n	8009612 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095cc:	2106      	movs	r1, #6
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	795b      	ldrb	r3, [r3, #5]
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f90c 	bl	80097fc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	791b      	ldrb	r3, [r3, #4]
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f906 	bl	80097fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80095f6:	2302      	movs	r3, #2
 80095f8:	73fb      	strb	r3, [r7, #15]
      break;
 80095fa:	e00a      	b.n	8009612 <USBH_HandleControl+0x2de>

    default:
      break;
 80095fc:	bf00      	nop
 80095fe:	e008      	b.n	8009612 <USBH_HandleControl+0x2de>
      break;
 8009600:	bf00      	nop
 8009602:	e006      	b.n	8009612 <USBH_HandleControl+0x2de>
      break;
 8009604:	bf00      	nop
 8009606:	e004      	b.n	8009612 <USBH_HandleControl+0x2de>
      break;
 8009608:	bf00      	nop
 800960a:	e002      	b.n	8009612 <USBH_HandleControl+0x2de>
      break;
 800960c:	bf00      	nop
 800960e:	e000      	b.n	8009612 <USBH_HandleControl+0x2de>
      break;
 8009610:	bf00      	nop
  }

  return status;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af04      	add	r7, sp, #16
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	4613      	mov	r3, r2
 8009628:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800962a:	79f9      	ldrb	r1, [r7, #7]
 800962c:	2300      	movs	r3, #0
 800962e:	9303      	str	r3, [sp, #12]
 8009630:	2308      	movs	r3, #8
 8009632:	9302      	str	r3, [sp, #8]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	2300      	movs	r3, #0
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	2300      	movs	r3, #0
 800963e:	2200      	movs	r2, #0
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f002 ffbe 	bl	800c5c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af04      	add	r7, sp, #16
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	4611      	mov	r1, r2
 800965c:	461a      	mov	r2, r3
 800965e:	460b      	mov	r3, r1
 8009660:	80fb      	strh	r3, [r7, #6]
 8009662:	4613      	mov	r3, r2
 8009664:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009674:	7979      	ldrb	r1, [r7, #5]
 8009676:	7e3b      	ldrb	r3, [r7, #24]
 8009678:	9303      	str	r3, [sp, #12]
 800967a:	88fb      	ldrh	r3, [r7, #6]
 800967c:	9302      	str	r3, [sp, #8]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	2301      	movs	r3, #1
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	2300      	movs	r3, #0
 8009688:	2200      	movs	r2, #0
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f002 ff99 	bl	800c5c2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b088      	sub	sp, #32
 800969e:	af04      	add	r7, sp, #16
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	4611      	mov	r1, r2
 80096a6:	461a      	mov	r2, r3
 80096a8:	460b      	mov	r3, r1
 80096aa:	80fb      	strh	r3, [r7, #6]
 80096ac:	4613      	mov	r3, r2
 80096ae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80096b0:	7979      	ldrb	r1, [r7, #5]
 80096b2:	2300      	movs	r3, #0
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	88fb      	ldrh	r3, [r7, #6]
 80096b8:	9302      	str	r3, [sp, #8]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	2301      	movs	r3, #1
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	2300      	movs	r3, #0
 80096c4:	2201      	movs	r2, #1
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f002 ff7b 	bl	800c5c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80096cc:	2300      	movs	r3, #0

}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b088      	sub	sp, #32
 80096da:	af04      	add	r7, sp, #16
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	4611      	mov	r1, r2
 80096e2:	461a      	mov	r2, r3
 80096e4:	460b      	mov	r3, r1
 80096e6:	80fb      	strh	r3, [r7, #6]
 80096e8:	4613      	mov	r3, r2
 80096ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80096fa:	7979      	ldrb	r1, [r7, #5]
 80096fc:	7e3b      	ldrb	r3, [r7, #24]
 80096fe:	9303      	str	r3, [sp, #12]
 8009700:	88fb      	ldrh	r3, [r7, #6]
 8009702:	9302      	str	r3, [sp, #8]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	2301      	movs	r3, #1
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	2302      	movs	r3, #2
 800970e:	2200      	movs	r2, #0
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f002 ff56 	bl	800c5c2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af04      	add	r7, sp, #16
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	4611      	mov	r1, r2
 800972c:	461a      	mov	r2, r3
 800972e:	460b      	mov	r3, r1
 8009730:	80fb      	strh	r3, [r7, #6]
 8009732:	4613      	mov	r3, r2
 8009734:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009736:	7979      	ldrb	r1, [r7, #5]
 8009738:	2300      	movs	r3, #0
 800973a:	9303      	str	r3, [sp, #12]
 800973c:	88fb      	ldrh	r3, [r7, #6]
 800973e:	9302      	str	r3, [sp, #8]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	9301      	str	r3, [sp, #4]
 8009744:	2301      	movs	r3, #1
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	2302      	movs	r3, #2
 800974a:	2201      	movs	r2, #1
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f002 ff38 	bl	800c5c2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af04      	add	r7, sp, #16
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	4608      	mov	r0, r1
 8009766:	4611      	mov	r1, r2
 8009768:	461a      	mov	r2, r3
 800976a:	4603      	mov	r3, r0
 800976c:	70fb      	strb	r3, [r7, #3]
 800976e:	460b      	mov	r3, r1
 8009770:	70bb      	strb	r3, [r7, #2]
 8009772:	4613      	mov	r3, r2
 8009774:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009776:	7878      	ldrb	r0, [r7, #1]
 8009778:	78ba      	ldrb	r2, [r7, #2]
 800977a:	78f9      	ldrb	r1, [r7, #3]
 800977c:	8b3b      	ldrh	r3, [r7, #24]
 800977e:	9302      	str	r3, [sp, #8]
 8009780:	7d3b      	ldrb	r3, [r7, #20]
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	7c3b      	ldrb	r3, [r7, #16]
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	4603      	mov	r3, r0
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f002 fecb 	bl	800c526 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	460b      	mov	r3, r1
 80097a4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80097a6:	78fb      	ldrb	r3, [r7, #3]
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f002 feea 	bl	800c584 <USBH_LL_ClosePipe>

  return USBH_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	460b      	mov	r3, r1
 80097c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f836 	bl	8009838 <USBH_GetFreePipe>
 80097cc:	4603      	mov	r3, r0
 80097ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80097d0:	89fb      	ldrh	r3, [r7, #14]
 80097d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00a      	beq.n	80097f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80097da:	78fa      	ldrb	r2, [r7, #3]
 80097dc:	89fb      	ldrh	r3, [r7, #14]
 80097de:	f003 030f 	and.w	r3, r3, #15
 80097e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	33e0      	adds	r3, #224	; 0xe0
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
 80097ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80097f0:	89fb      	ldrh	r3, [r7, #14]
 80097f2:	b2db      	uxtb	r3, r3
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	2b0a      	cmp	r3, #10
 800980c:	d80d      	bhi.n	800982a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	33e0      	adds	r3, #224	; 0xe0
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	33e0      	adds	r3, #224	; 0xe0
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	440b      	add	r3, r1
 8009828:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
 8009848:	e00f      	b.n	800986a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	33e0      	adds	r3, #224	; 0xe0
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d102      	bne.n	8009864 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	b29b      	uxth	r3, r3
 8009862:	e007      	b.n	8009874 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	3301      	adds	r3, #1
 8009868:	73fb      	strb	r3, [r7, #15]
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b0a      	cmp	r3, #10
 800986e:	d9ec      	bls.n	800984a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009870:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	4a08      	ldr	r2, [pc, #32]	; (80098b0 <disk_status+0x30>)
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	79fa      	ldrb	r2, [r7, #7]
 8009898:	4905      	ldr	r1, [pc, #20]	; (80098b0 <disk_status+0x30>)
 800989a:	440a      	add	r2, r1
 800989c:	7a12      	ldrb	r2, [r2, #8]
 800989e:	4610      	mov	r0, r2
 80098a0:	4798      	blx	r3
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	200000d8 	.word	0x200000d8

080098b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	4a0d      	ldr	r2, [pc, #52]	; (80098fc <disk_initialize+0x48>)
 80098c6:	5cd3      	ldrb	r3, [r2, r3]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d111      	bne.n	80098f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	4a0b      	ldr	r2, [pc, #44]	; (80098fc <disk_initialize+0x48>)
 80098d0:	2101      	movs	r1, #1
 80098d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	4a09      	ldr	r2, [pc, #36]	; (80098fc <disk_initialize+0x48>)
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	79fa      	ldrb	r2, [r7, #7]
 80098e2:	4906      	ldr	r1, [pc, #24]	; (80098fc <disk_initialize+0x48>)
 80098e4:	440a      	add	r2, r1
 80098e6:	7a12      	ldrb	r2, [r2, #8]
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	200000d8 	.word	0x200000d8

08009900 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	4603      	mov	r3, r0
 800990e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	4a0a      	ldr	r2, [pc, #40]	; (800993c <disk_read+0x3c>)
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	689c      	ldr	r4, [r3, #8]
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	4a07      	ldr	r2, [pc, #28]	; (800993c <disk_read+0x3c>)
 8009920:	4413      	add	r3, r2
 8009922:	7a18      	ldrb	r0, [r3, #8]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	68b9      	ldr	r1, [r7, #8]
 800992a:	47a0      	blx	r4
 800992c:	4603      	mov	r3, r0
 800992e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009930:	7dfb      	ldrb	r3, [r7, #23]
}
 8009932:	4618      	mov	r0, r3
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	bd90      	pop	{r4, r7, pc}
 800993a:	bf00      	nop
 800993c:	200000d8 	.word	0x200000d8

08009940 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009940:	b590      	push	{r4, r7, lr}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60b9      	str	r1, [r7, #8]
 8009948:	607a      	str	r2, [r7, #4]
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4a0a      	ldr	r2, [pc, #40]	; (800997c <disk_write+0x3c>)
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	68dc      	ldr	r4, [r3, #12]
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	4a07      	ldr	r2, [pc, #28]	; (800997c <disk_write+0x3c>)
 8009960:	4413      	add	r3, r2
 8009962:	7a18      	ldrb	r0, [r3, #8]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	47a0      	blx	r4
 800996c:	4603      	mov	r3, r0
 800996e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
}
 8009972:	4618      	mov	r0, r3
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	bd90      	pop	{r4, r7, pc}
 800997a:	bf00      	nop
 800997c:	200000d8 	.word	0x200000d8

08009980 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	603a      	str	r2, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
 800998c:	460b      	mov	r3, r1
 800998e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	4a09      	ldr	r2, [pc, #36]	; (80099b8 <disk_ioctl+0x38>)
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	79fa      	ldrb	r2, [r7, #7]
 800999e:	4906      	ldr	r1, [pc, #24]	; (80099b8 <disk_ioctl+0x38>)
 80099a0:	440a      	add	r2, r1
 80099a2:	7a10      	ldrb	r0, [r2, #8]
 80099a4:	79b9      	ldrb	r1, [r7, #6]
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	4798      	blx	r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	200000d8 	.word	0x200000d8

080099bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3301      	adds	r3, #1
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80099cc:	89fb      	ldrh	r3, [r7, #14]
 80099ce:	021b      	lsls	r3, r3, #8
 80099d0:	b21a      	sxth	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	b21b      	sxth	r3, r3
 80099d8:	4313      	orrs	r3, r2
 80099da:	b21b      	sxth	r3, r3
 80099dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80099de:	89fb      	ldrh	r3, [r7, #14]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	3303      	adds	r3, #3
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	021b      	lsls	r3, r3, #8
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	3202      	adds	r2, #2
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	021b      	lsls	r3, r3, #8
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	3201      	adds	r2, #1
 8009a12:	7812      	ldrb	r2, [r2, #0]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
	return rv;
 8009a24:	68fb      	ldr	r3, [r7, #12]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	887a      	ldrh	r2, [r7, #2]
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	887b      	ldrh	r3, [r7, #2]
 8009a4c:	0a1b      	lsrs	r3, r3, #8
 8009a4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	887a      	ldrh	r2, [r7, #2]
 8009a58:	b2d2      	uxtb	r2, r2
 8009a5a:	701a      	strb	r2, [r3, #0]
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	0a1b      	lsrs	r3, r3, #8
 8009a82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	607a      	str	r2, [r7, #4]
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	b2d2      	uxtb	r2, r2
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	0a1b      	lsrs	r3, r3, #8
 8009a94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	0a1b      	lsrs	r3, r3, #8
 8009aa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	607a      	str	r2, [r7, #4]
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	701a      	strb	r2, [r3, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00d      	beq.n	8009af6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	1c53      	adds	r3, r2, #1
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	1c59      	adds	r1, r3, #1
 8009ae4:	6179      	str	r1, [r7, #20]
 8009ae6:	7812      	ldrb	r2, [r2, #0]
 8009ae8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1f1      	bne.n	8009ada <mem_cpy+0x1a>
	}
}
 8009af6:	bf00      	nop
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b02:	b480      	push	{r7}
 8009b04:	b087      	sub	sp, #28
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	617a      	str	r2, [r7, #20]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	b2d2      	uxtb	r2, r2
 8009b1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	607b      	str	r3, [r7, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1f3      	bne.n	8009b12 <mem_set+0x10>
}
 8009b2a:	bf00      	nop
 8009b2c:	bf00      	nop
 8009b2e:	371c      	adds	r7, #28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009b38:	b480      	push	{r7}
 8009b3a:	b089      	sub	sp, #36	; 0x24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	61fb      	str	r3, [r7, #28]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	61fa      	str	r2, [r7, #28]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	4619      	mov	r1, r3
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	61ba      	str	r2, [r7, #24]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	1acb      	subs	r3, r1, r3
 8009b64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	607b      	str	r3, [r7, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <mem_cmp+0x40>
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0eb      	beq.n	8009b50 <mem_cmp+0x18>

	return r;
 8009b78:	697b      	ldr	r3, [r7, #20]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3724      	adds	r7, #36	; 0x24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009b90:	e002      	b.n	8009b98 <chk_chr+0x12>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3301      	adds	r3, #1
 8009b96:	607b      	str	r3, [r7, #4]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <chk_chr+0x26>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d1f2      	bne.n	8009b92 <chk_chr+0xc>
	return *str;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	781b      	ldrb	r3, [r3, #0]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	60fb      	str	r3, [r7, #12]
 8009bce:	e029      	b.n	8009c24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009bd0:	4a27      	ldr	r2, [pc, #156]	; (8009c70 <chk_lock+0xb4>)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	4413      	add	r3, r2
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d01d      	beq.n	8009c1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009bde:	4a24      	ldr	r2, [pc, #144]	; (8009c70 <chk_lock+0xb4>)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	4413      	add	r3, r2
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d116      	bne.n	8009c1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009bf0:	4a1f      	ldr	r2, [pc, #124]	; (8009c70 <chk_lock+0xb4>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	4413      	add	r3, r2
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d10c      	bne.n	8009c1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c04:	4a1a      	ldr	r2, [pc, #104]	; (8009c70 <chk_lock+0xb4>)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d102      	bne.n	8009c1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c18:	e007      	b.n	8009c2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3301      	adds	r3, #1
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d9d2      	bls.n	8009bd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d109      	bne.n	8009c44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <chk_lock+0x80>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d101      	bne.n	8009c40 <chk_lock+0x84>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e010      	b.n	8009c62 <chk_lock+0xa6>
 8009c40:	2312      	movs	r3, #18
 8009c42:	e00e      	b.n	8009c62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d108      	bne.n	8009c5c <chk_lock+0xa0>
 8009c4a:	4a09      	ldr	r2, [pc, #36]	; (8009c70 <chk_lock+0xb4>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	4413      	add	r3, r2
 8009c52:	330c      	adds	r3, #12
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5a:	d101      	bne.n	8009c60 <chk_lock+0xa4>
 8009c5c:	2310      	movs	r3, #16
 8009c5e:	e000      	b.n	8009c62 <chk_lock+0xa6>
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	200000b8 	.word	0x200000b8

08009c74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	607b      	str	r3, [r7, #4]
 8009c7e:	e002      	b.n	8009c86 <enq_lock+0x12>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3301      	adds	r3, #1
 8009c84:	607b      	str	r3, [r7, #4]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d806      	bhi.n	8009c9a <enq_lock+0x26>
 8009c8c:	4a09      	ldr	r2, [pc, #36]	; (8009cb4 <enq_lock+0x40>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	011b      	lsls	r3, r3, #4
 8009c92:	4413      	add	r3, r2
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1f2      	bne.n	8009c80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	bf14      	ite	ne
 8009ca0:	2301      	movne	r3, #1
 8009ca2:	2300      	moveq	r3, #0
 8009ca4:	b2db      	uxtb	r3, r3
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	200000b8 	.word	0x200000b8

08009cb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	e01f      	b.n	8009d08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009cc8:	4a41      	ldr	r2, [pc, #260]	; (8009dd0 <inc_lock+0x118>)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	4413      	add	r3, r2
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d113      	bne.n	8009d02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009cda:	4a3d      	ldr	r2, [pc, #244]	; (8009dd0 <inc_lock+0x118>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	4413      	add	r3, r2
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d109      	bne.n	8009d02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009cee:	4a38      	ldr	r2, [pc, #224]	; (8009dd0 <inc_lock+0x118>)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	4413      	add	r3, r2
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d006      	beq.n	8009d10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d9dc      	bls.n	8009cc8 <inc_lock+0x10>
 8009d0e:	e000      	b.n	8009d12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d132      	bne.n	8009d7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	e002      	b.n	8009d24 <inc_lock+0x6c>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3301      	adds	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d806      	bhi.n	8009d38 <inc_lock+0x80>
 8009d2a:	4a29      	ldr	r2, [pc, #164]	; (8009dd0 <inc_lock+0x118>)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	011b      	lsls	r3, r3, #4
 8009d30:	4413      	add	r3, r2
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1f2      	bne.n	8009d1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d101      	bne.n	8009d42 <inc_lock+0x8a>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e040      	b.n	8009dc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	4922      	ldr	r1, [pc, #136]	; (8009dd0 <inc_lock+0x118>)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	440b      	add	r3, r1
 8009d4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	491e      	ldr	r1, [pc, #120]	; (8009dd0 <inc_lock+0x118>)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	440b      	add	r3, r1
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	695a      	ldr	r2, [r3, #20]
 8009d64:	491a      	ldr	r1, [pc, #104]	; (8009dd0 <inc_lock+0x118>)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	011b      	lsls	r3, r3, #4
 8009d6a:	440b      	add	r3, r1
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d70:	4a17      	ldr	r2, [pc, #92]	; (8009dd0 <inc_lock+0x118>)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	011b      	lsls	r3, r3, #4
 8009d76:	4413      	add	r3, r2
 8009d78:	330c      	adds	r3, #12
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d009      	beq.n	8009d98 <inc_lock+0xe0>
 8009d84:	4a12      	ldr	r2, [pc, #72]	; (8009dd0 <inc_lock+0x118>)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	011b      	lsls	r3, r3, #4
 8009d8a:	4413      	add	r3, r2
 8009d8c:	330c      	adds	r3, #12
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <inc_lock+0xe0>
 8009d94:	2300      	movs	r3, #0
 8009d96:	e015      	b.n	8009dc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d108      	bne.n	8009db0 <inc_lock+0xf8>
 8009d9e:	4a0c      	ldr	r2, [pc, #48]	; (8009dd0 <inc_lock+0x118>)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	4413      	add	r3, r2
 8009da6:	330c      	adds	r3, #12
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	3301      	adds	r3, #1
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	e001      	b.n	8009db4 <inc_lock+0xfc>
 8009db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009db4:	4906      	ldr	r1, [pc, #24]	; (8009dd0 <inc_lock+0x118>)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	440b      	add	r3, r1
 8009dbc:	330c      	adds	r3, #12
 8009dbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3301      	adds	r3, #1
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	200000b8 	.word	0x200000b8

08009dd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	607b      	str	r3, [r7, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d825      	bhi.n	8009e34 <dec_lock+0x60>
		n = Files[i].ctr;
 8009de8:	4a17      	ldr	r2, [pc, #92]	; (8009e48 <dec_lock+0x74>)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	011b      	lsls	r3, r3, #4
 8009dee:	4413      	add	r3, r2
 8009df0:	330c      	adds	r3, #12
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009df6:	89fb      	ldrh	r3, [r7, #14]
 8009df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dfc:	d101      	bne.n	8009e02 <dec_lock+0x2e>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e02:	89fb      	ldrh	r3, [r7, #14]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <dec_lock+0x3a>
 8009e08:	89fb      	ldrh	r3, [r7, #14]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e0e:	4a0e      	ldr	r2, [pc, #56]	; (8009e48 <dec_lock+0x74>)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	4413      	add	r3, r2
 8009e16:	330c      	adds	r3, #12
 8009e18:	89fa      	ldrh	r2, [r7, #14]
 8009e1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009e1c:	89fb      	ldrh	r3, [r7, #14]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d105      	bne.n	8009e2e <dec_lock+0x5a>
 8009e22:	4a09      	ldr	r2, [pc, #36]	; (8009e48 <dec_lock+0x74>)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	011b      	lsls	r3, r3, #4
 8009e28:	4413      	add	r3, r2
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	737b      	strb	r3, [r7, #13]
 8009e32:	e001      	b.n	8009e38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009e34:	2302      	movs	r3, #2
 8009e36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009e38:	7b7b      	ldrb	r3, [r7, #13]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	200000b8 	.word	0x200000b8

08009e4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	e010      	b.n	8009e7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009e5a:	4a0d      	ldr	r2, [pc, #52]	; (8009e90 <clear_lock+0x44>)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	011b      	lsls	r3, r3, #4
 8009e60:	4413      	add	r3, r2
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d105      	bne.n	8009e76 <clear_lock+0x2a>
 8009e6a:	4a09      	ldr	r2, [pc, #36]	; (8009e90 <clear_lock+0x44>)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	4413      	add	r3, r2
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d9eb      	bls.n	8009e5a <clear_lock+0xe>
	}
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	200000b8 	.word	0x200000b8

08009e94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	78db      	ldrb	r3, [r3, #3]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d034      	beq.n	8009f12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	7858      	ldrb	r0, [r3, #1]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009eb8:	2301      	movs	r3, #1
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	f7ff fd40 	bl	8009940 <disk_write>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d002      	beq.n	8009ecc <sync_window+0x38>
			res = FR_DISK_ERR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	73fb      	strb	r3, [r7, #15]
 8009eca:	e022      	b.n	8009f12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	1ad2      	subs	r2, r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d217      	bcs.n	8009f12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	789b      	ldrb	r3, [r3, #2]
 8009ee6:	613b      	str	r3, [r7, #16]
 8009ee8:	e010      	b.n	8009f0c <sync_window+0x78>
					wsect += fs->fsize;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	7858      	ldrb	r0, [r3, #1]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009efe:	2301      	movs	r3, #1
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	f7ff fd1d 	bl	8009940 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d8eb      	bhi.n	8009eea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d01b      	beq.n	8009f6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff ffad 	bl	8009e94 <sync_window>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d113      	bne.n	8009f6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	7858      	ldrb	r0, [r3, #1]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f4e:	2301      	movs	r3, #1
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	f7ff fcd5 	bl	8009900 <disk_read>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d004      	beq.n	8009f66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7ff ff87 	bl	8009e94 <sync_window>
 8009f86:	4603      	mov	r3, r0
 8009f88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d158      	bne.n	800a042 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b03      	cmp	r3, #3
 8009f96:	d148      	bne.n	800a02a <sync_fs+0xb2>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	791b      	ldrb	r3, [r3, #4]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d144      	bne.n	800a02a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3330      	adds	r3, #48	; 0x30
 8009fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fa8:	2100      	movs	r1, #0
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff fda9 	bl	8009b02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3330      	adds	r3, #48	; 0x30
 8009fb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fb8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7ff fd38 	bl	8009a32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3330      	adds	r3, #48	; 0x30
 8009fc6:	4921      	ldr	r1, [pc, #132]	; (800a04c <sync_fs+0xd4>)
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fd4d 	bl	8009a68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3330      	adds	r3, #48	; 0x30
 8009fd2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009fd6:	491e      	ldr	r1, [pc, #120]	; (800a050 <sync_fs+0xd8>)
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff fd45 	bl	8009a68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3330      	adds	r3, #48	; 0x30
 8009fe2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f7ff fd3b 	bl	8009a68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3330      	adds	r3, #48	; 0x30
 8009ff6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	4619      	mov	r1, r3
 800a000:	4610      	mov	r0, r2
 800a002:	f7ff fd31 	bl	8009a68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	7858      	ldrb	r0, [r3, #1]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01e:	2301      	movs	r3, #1
 800a020:	f7ff fc8e 	bl	8009940 <disk_write>
			fs->fsi_flag = 0;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	785b      	ldrb	r3, [r3, #1]
 800a02e:	2200      	movs	r2, #0
 800a030:	2100      	movs	r1, #0
 800a032:	4618      	mov	r0, r3
 800a034:	f7ff fca4 	bl	8009980 <disk_ioctl>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <sync_fs+0xca>
 800a03e:	2301      	movs	r3, #1
 800a040:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a042:	7bfb      	ldrb	r3, [r7, #15]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	41615252 	.word	0x41615252
 800a050:	61417272 	.word	0x61417272

0800a054 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	3b02      	subs	r3, #2
 800a062:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	3b02      	subs	r3, #2
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d301      	bcc.n	800a074 <clust2sect+0x20>
 800a070:	2300      	movs	r3, #0
 800a072:	e008      	b.n	800a086 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	895b      	ldrh	r3, [r3, #10]
 800a078:	461a      	mov	r2, r3
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	fb03 f202 	mul.w	r2, r3, r2
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a084:	4413      	add	r3, r2
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b086      	sub	sp, #24
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d904      	bls.n	800a0b2 <get_fat+0x20>
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d302      	bcc.n	800a0b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	617b      	str	r3, [r7, #20]
 800a0b6:	e08f      	b.n	800a1d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a0b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d062      	beq.n	800a18c <get_fat+0xfa>
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	dc7c      	bgt.n	800a1c4 <get_fat+0x132>
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d002      	beq.n	800a0d4 <get_fat+0x42>
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d042      	beq.n	800a158 <get_fat+0xc6>
 800a0d2:	e077      	b.n	800a1c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	60fb      	str	r3, [r7, #12]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	085b      	lsrs	r3, r3, #1
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	4413      	add	r3, r2
 800a0e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	6a1a      	ldr	r2, [r3, #32]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	0a5b      	lsrs	r3, r3, #9
 800a0ea:	4413      	add	r3, r2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6938      	ldr	r0, [r7, #16]
 800a0f0:	f7ff ff14 	bl	8009f1c <move_window>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d167      	bne.n	800a1ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	60fa      	str	r2, [r7, #12]
 800a100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4413      	add	r3, r2
 800a108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a10c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	6a1a      	ldr	r2, [r3, #32]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	0a5b      	lsrs	r3, r3, #9
 800a116:	4413      	add	r3, r2
 800a118:	4619      	mov	r1, r3
 800a11a:	6938      	ldr	r0, [r7, #16]
 800a11c:	f7ff fefe 	bl	8009f1c <move_window>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d153      	bne.n	800a1ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	4413      	add	r3, r2
 800a130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a134:	021b      	lsls	r3, r3, #8
 800a136:	461a      	mov	r2, r3
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <get_fat+0xbc>
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	091b      	lsrs	r3, r3, #4
 800a14c:	e002      	b.n	800a154 <get_fat+0xc2>
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a154:	617b      	str	r3, [r7, #20]
			break;
 800a156:	e03f      	b.n	800a1d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6a1a      	ldr	r2, [r3, #32]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	0a1b      	lsrs	r3, r3, #8
 800a160:	4413      	add	r3, r2
 800a162:	4619      	mov	r1, r3
 800a164:	6938      	ldr	r0, [r7, #16]
 800a166:	f7ff fed9 	bl	8009f1c <move_window>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d130      	bne.n	800a1d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a17e:	4413      	add	r3, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff fc1b 	bl	80099bc <ld_word>
 800a186:	4603      	mov	r3, r0
 800a188:	617b      	str	r3, [r7, #20]
			break;
 800a18a:	e025      	b.n	800a1d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	6a1a      	ldr	r2, [r3, #32]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	09db      	lsrs	r3, r3, #7
 800a194:	4413      	add	r3, r2
 800a196:	4619      	mov	r1, r3
 800a198:	6938      	ldr	r0, [r7, #16]
 800a19a:	f7ff febf 	bl	8009f1c <move_window>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d118      	bne.n	800a1d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a1b2:	4413      	add	r3, r2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fc19 	bl	80099ec <ld_dword>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a1c0:	617b      	str	r3, [r7, #20]
			break;
 800a1c2:	e009      	b.n	800a1d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	617b      	str	r3, [r7, #20]
 800a1c8:	e006      	b.n	800a1d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1ca:	bf00      	nop
 800a1cc:	e004      	b.n	800a1d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1ce:	bf00      	nop
 800a1d0:	e002      	b.n	800a1d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1d2:	bf00      	nop
 800a1d4:	e000      	b.n	800a1d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a1d6:	bf00      	nop
		}
	}

	return val;
 800a1d8:	697b      	ldr	r3, [r7, #20]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a1e2:	b590      	push	{r4, r7, lr}
 800a1e4:	b089      	sub	sp, #36	; 0x24
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	f240 80d2 	bls.w	800a39e <put_fat+0x1bc>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	429a      	cmp	r2, r3
 800a202:	f080 80cc 	bcs.w	800a39e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	f000 8096 	beq.w	800a33c <put_fat+0x15a>
 800a210:	2b03      	cmp	r3, #3
 800a212:	f300 80cd 	bgt.w	800a3b0 <put_fat+0x1ce>
 800a216:	2b01      	cmp	r3, #1
 800a218:	d002      	beq.n	800a220 <put_fat+0x3e>
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d06e      	beq.n	800a2fc <put_fat+0x11a>
 800a21e:	e0c7      	b.n	800a3b0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	61bb      	str	r3, [r7, #24]
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	085b      	lsrs	r3, r3, #1
 800a228:	69ba      	ldr	r2, [r7, #24]
 800a22a:	4413      	add	r3, r2
 800a22c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a1a      	ldr	r2, [r3, #32]
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	0a5b      	lsrs	r3, r3, #9
 800a236:	4413      	add	r3, r2
 800a238:	4619      	mov	r1, r3
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7ff fe6e 	bl	8009f1c <move_window>
 800a240:	4603      	mov	r3, r0
 800a242:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a244:	7ffb      	ldrb	r3, [r7, #31]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f040 80ab 	bne.w	800a3a2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	1c59      	adds	r1, r3, #1
 800a256:	61b9      	str	r1, [r7, #24]
 800a258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25c:	4413      	add	r3, r2
 800a25e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00d      	beq.n	800a286 <put_fat+0xa4>
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b25b      	sxtb	r3, r3
 800a270:	f003 030f 	and.w	r3, r3, #15
 800a274:	b25a      	sxtb	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	b25b      	sxtb	r3, r3
 800a27e:	4313      	orrs	r3, r2
 800a280:	b25b      	sxtb	r3, r3
 800a282:	b2db      	uxtb	r3, r3
 800a284:	e001      	b.n	800a28a <put_fat+0xa8>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2201      	movs	r2, #1
 800a292:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a1a      	ldr	r2, [r3, #32]
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	0a5b      	lsrs	r3, r3, #9
 800a29c:	4413      	add	r3, r2
 800a29e:	4619      	mov	r1, r3
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f7ff fe3b 	bl	8009f1c <move_window>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2aa:	7ffb      	ldrb	r3, [r7, #31]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d17a      	bne.n	800a3a6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2bc:	4413      	add	r3, r2
 800a2be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <put_fat+0xf0>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	091b      	lsrs	r3, r3, #4
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	e00e      	b.n	800a2f0 <put_fat+0x10e>
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	b25b      	sxtb	r3, r3
 800a2d8:	f023 030f 	bic.w	r3, r3, #15
 800a2dc:	b25a      	sxtb	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	0a1b      	lsrs	r3, r3, #8
 800a2e2:	b25b      	sxtb	r3, r3
 800a2e4:	f003 030f 	and.w	r3, r3, #15
 800a2e8:	b25b      	sxtb	r3, r3
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	b25b      	sxtb	r3, r3
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	70da      	strb	r2, [r3, #3]
			break;
 800a2fa:	e059      	b.n	800a3b0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6a1a      	ldr	r2, [r3, #32]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	0a1b      	lsrs	r3, r3, #8
 800a304:	4413      	add	r3, r2
 800a306:	4619      	mov	r1, r3
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff fe07 	bl	8009f1c <move_window>
 800a30e:	4603      	mov	r3, r0
 800a310:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a312:	7ffb      	ldrb	r3, [r7, #31]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d148      	bne.n	800a3aa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a326:	4413      	add	r3, r2
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	b292      	uxth	r2, r2
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff fb7f 	bl	8009a32 <st_word>
			fs->wflag = 1;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2201      	movs	r2, #1
 800a338:	70da      	strb	r2, [r3, #3]
			break;
 800a33a:	e039      	b.n	800a3b0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6a1a      	ldr	r2, [r3, #32]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	09db      	lsrs	r3, r3, #7
 800a344:	4413      	add	r3, r2
 800a346:	4619      	mov	r1, r3
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7ff fde7 	bl	8009f1c <move_window>
 800a34e:	4603      	mov	r3, r0
 800a350:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a352:	7ffb      	ldrb	r3, [r7, #31]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d12a      	bne.n	800a3ae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a36c:	4413      	add	r3, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fb3c 	bl	80099ec <ld_dword>
 800a374:	4603      	mov	r3, r0
 800a376:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a37a:	4323      	orrs	r3, r4
 800a37c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a38c:	4413      	add	r3, r2
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	f7ff fb69 	bl	8009a68 <st_dword>
			fs->wflag = 1;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	70da      	strb	r2, [r3, #3]
			break;
 800a39c:	e008      	b.n	800a3b0 <put_fat+0x1ce>
		}
	}
 800a39e:	bf00      	nop
 800a3a0:	e006      	b.n	800a3b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a3a2:	bf00      	nop
 800a3a4:	e004      	b.n	800a3b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a3a6:	bf00      	nop
 800a3a8:	e002      	b.n	800a3b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a3aa:	bf00      	nop
 800a3ac:	e000      	b.n	800a3b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a3ae:	bf00      	nop
	return res;
 800a3b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3724      	adds	r7, #36	; 0x24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd90      	pop	{r4, r7, pc}

0800a3ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b088      	sub	sp, #32
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	60b9      	str	r1, [r7, #8]
 800a3c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d904      	bls.n	800a3e0 <remove_chain+0x26>
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d301      	bcc.n	800a3e4 <remove_chain+0x2a>
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e04b      	b.n	800a47c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00c      	beq.n	800a404 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a3ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	69b8      	ldr	r0, [r7, #24]
 800a3f2:	f7ff fef6 	bl	800a1e2 <put_fat>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a3fa:	7ffb      	ldrb	r3, [r7, #31]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <remove_chain+0x4a>
 800a400:	7ffb      	ldrb	r3, [r7, #31]
 800a402:	e03b      	b.n	800a47c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a404:	68b9      	ldr	r1, [r7, #8]
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff fe43 	bl	800a092 <get_fat>
 800a40c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d031      	beq.n	800a478 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d101      	bne.n	800a41e <remove_chain+0x64>
 800a41a:	2302      	movs	r3, #2
 800a41c:	e02e      	b.n	800a47c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a424:	d101      	bne.n	800a42a <remove_chain+0x70>
 800a426:	2301      	movs	r3, #1
 800a428:	e028      	b.n	800a47c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a42a:	2200      	movs	r2, #0
 800a42c:	68b9      	ldr	r1, [r7, #8]
 800a42e:	69b8      	ldr	r0, [r7, #24]
 800a430:	f7ff fed7 	bl	800a1e2 <put_fat>
 800a434:	4603      	mov	r3, r0
 800a436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a438:	7ffb      	ldrb	r3, [r7, #31]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <remove_chain+0x88>
 800a43e:	7ffb      	ldrb	r3, [r7, #31]
 800a440:	e01c      	b.n	800a47c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	691a      	ldr	r2, [r3, #16]
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	3b02      	subs	r3, #2
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d20b      	bcs.n	800a468 <remove_chain+0xae>
			fs->free_clst++;
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	1c5a      	adds	r2, r3, #1
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	791b      	ldrb	r3, [r3, #4]
 800a45e:	f043 0301 	orr.w	r3, r3, #1
 800a462:	b2da      	uxtb	r2, r3
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	429a      	cmp	r2, r3
 800a474:	d3c6      	bcc.n	800a404 <remove_chain+0x4a>
 800a476:	e000      	b.n	800a47a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a478:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10d      	bne.n	800a4b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d004      	beq.n	800a4b0 <create_chain+0x2c>
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	69ba      	ldr	r2, [r7, #24]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d31b      	bcc.n	800a4e8 <create_chain+0x64>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	61bb      	str	r3, [r7, #24]
 800a4b4:	e018      	b.n	800a4e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff fdea 	bl	800a092 <get_fat>
 800a4be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d801      	bhi.n	800a4ca <create_chain+0x46>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e070      	b.n	800a5ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4d0:	d101      	bne.n	800a4d6 <create_chain+0x52>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	e06a      	b.n	800a5ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d201      	bcs.n	800a4e4 <create_chain+0x60>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	e063      	b.n	800a5ac <create_chain+0x128>
		scl = clst;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	69fa      	ldr	r2, [r7, #28]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d307      	bcc.n	800a50c <create_chain+0x88>
				ncl = 2;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a500:	69fa      	ldr	r2, [r7, #28]
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	429a      	cmp	r2, r3
 800a506:	d901      	bls.n	800a50c <create_chain+0x88>
 800a508:	2300      	movs	r3, #0
 800a50a:	e04f      	b.n	800a5ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a50c:	69f9      	ldr	r1, [r7, #28]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff fdbf 	bl	800a092 <get_fat>
 800a514:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00e      	beq.n	800a53a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d003      	beq.n	800a52a <create_chain+0xa6>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a528:	d101      	bne.n	800a52e <create_chain+0xaa>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	e03e      	b.n	800a5ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a52e:	69fa      	ldr	r2, [r7, #28]
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	429a      	cmp	r2, r3
 800a534:	d1da      	bne.n	800a4ec <create_chain+0x68>
 800a536:	2300      	movs	r3, #0
 800a538:	e038      	b.n	800a5ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a53a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a53c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a540:	69f9      	ldr	r1, [r7, #28]
 800a542:	6938      	ldr	r0, [r7, #16]
 800a544:	f7ff fe4d 	bl	800a1e2 <put_fat>
 800a548:	4603      	mov	r3, r0
 800a54a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a54c:	7dfb      	ldrb	r3, [r7, #23]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d109      	bne.n	800a566 <create_chain+0xe2>
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d006      	beq.n	800a566 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a558:	69fa      	ldr	r2, [r7, #28]
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6938      	ldr	r0, [r7, #16]
 800a55e:	f7ff fe40 	bl	800a1e2 <put_fat>
 800a562:	4603      	mov	r3, r0
 800a564:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a566:	7dfb      	ldrb	r3, [r7, #23]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d116      	bne.n	800a59a <create_chain+0x116>
		fs->last_clst = ncl;
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	69fa      	ldr	r2, [r7, #28]
 800a570:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	691a      	ldr	r2, [r3, #16]
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	3b02      	subs	r3, #2
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d804      	bhi.n	800a58a <create_chain+0x106>
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	791b      	ldrb	r3, [r3, #4]
 800a58e:	f043 0301 	orr.w	r3, r3, #1
 800a592:	b2da      	uxtb	r2, r3
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	711a      	strb	r2, [r3, #4]
 800a598:	e007      	b.n	800a5aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d102      	bne.n	800a5a6 <create_chain+0x122>
 800a5a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5a4:	e000      	b.n	800a5a8 <create_chain+0x124>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a5aa:	69fb      	ldr	r3, [r7, #28]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3720      	adds	r7, #32
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	0a5b      	lsrs	r3, r3, #9
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	8952      	ldrh	r2, [r2, #10]
 800a5d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	1d1a      	adds	r2, r3, #4
 800a5de:	613a      	str	r2, [r7, #16]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <clmt_clust+0x3a>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	e010      	b.n	800a610 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d307      	bcc.n	800a606 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	3304      	adds	r3, #4
 800a602:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a604:	e7e9      	b.n	800a5da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a606:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	4413      	add	r3, r2
}
 800a610:	4618      	mov	r0, r3
 800a612:	371c      	adds	r7, #28
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a632:	d204      	bcs.n	800a63e <dir_sdi+0x22>
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	f003 031f 	and.w	r3, r3, #31
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a63e:	2302      	movs	r3, #2
 800a640:	e063      	b.n	800a70a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d106      	bne.n	800a662 <dir_sdi+0x46>
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d902      	bls.n	800a662 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10c      	bne.n	800a682 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	095b      	lsrs	r3, r3, #5
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	8912      	ldrh	r2, [r2, #8]
 800a670:	4293      	cmp	r3, r2
 800a672:	d301      	bcc.n	800a678 <dir_sdi+0x5c>
 800a674:	2302      	movs	r3, #2
 800a676:	e048      	b.n	800a70a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	61da      	str	r2, [r3, #28]
 800a680:	e029      	b.n	800a6d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	895b      	ldrh	r3, [r3, #10]
 800a686:	025b      	lsls	r3, r3, #9
 800a688:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a68a:	e019      	b.n	800a6c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6979      	ldr	r1, [r7, #20]
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff fcfe 	bl	800a092 <get_fat>
 800a696:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a69e:	d101      	bne.n	800a6a4 <dir_sdi+0x88>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e032      	b.n	800a70a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d904      	bls.n	800a6b4 <dir_sdi+0x98>
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d301      	bcc.n	800a6b8 <dir_sdi+0x9c>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e028      	b.n	800a70a <dir_sdi+0xee>
			ofs -= csz;
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d2e1      	bcs.n	800a68c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a6c8:	6979      	ldr	r1, [r7, #20]
 800a6ca:	6938      	ldr	r0, [r7, #16]
 800a6cc:	f7ff fcc2 	bl	800a054 <clust2sect>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <dir_sdi+0xcc>
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	e010      	b.n	800a70a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	69da      	ldr	r2, [r3, #28]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	0a5b      	lsrs	r3, r3, #9
 800a6f0:	441a      	add	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a702:	441a      	add	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b086      	sub	sp, #24
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	3320      	adds	r3, #32
 800a728:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d003      	beq.n	800a73a <dir_next+0x28>
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a738:	d301      	bcc.n	800a73e <dir_next+0x2c>
 800a73a:	2304      	movs	r3, #4
 800a73c:	e0aa      	b.n	800a894 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a744:	2b00      	cmp	r3, #0
 800a746:	f040 8098 	bne.w	800a87a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10b      	bne.n	800a774 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	095b      	lsrs	r3, r3, #5
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	8912      	ldrh	r2, [r2, #8]
 800a764:	4293      	cmp	r3, r2
 800a766:	f0c0 8088 	bcc.w	800a87a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	61da      	str	r2, [r3, #28]
 800a770:	2304      	movs	r3, #4
 800a772:	e08f      	b.n	800a894 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	0a5b      	lsrs	r3, r3, #9
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	8952      	ldrh	r2, [r2, #10]
 800a77c:	3a01      	subs	r2, #1
 800a77e:	4013      	ands	r3, r2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d17a      	bne.n	800a87a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	4619      	mov	r1, r3
 800a78c:	4610      	mov	r0, r2
 800a78e:	f7ff fc80 	bl	800a092 <get_fat>
 800a792:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d801      	bhi.n	800a79e <dir_next+0x8c>
 800a79a:	2302      	movs	r3, #2
 800a79c:	e07a      	b.n	800a894 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7a4:	d101      	bne.n	800a7aa <dir_next+0x98>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e074      	b.n	800a894 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d358      	bcc.n	800a866 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d104      	bne.n	800a7c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	61da      	str	r2, [r3, #28]
 800a7c0:	2304      	movs	r3, #4
 800a7c2:	e067      	b.n	800a894 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	f7ff fe59 	bl	800a484 <create_chain>
 800a7d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <dir_next+0xcc>
 800a7da:	2307      	movs	r3, #7
 800a7dc:	e05a      	b.n	800a894 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <dir_next+0xd6>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e055      	b.n	800a894 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ee:	d101      	bne.n	800a7f4 <dir_next+0xe2>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e04f      	b.n	800a894 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff fb4d 	bl	8009e94 <sync_window>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <dir_next+0xf2>
 800a800:	2301      	movs	r3, #1
 800a802:	e047      	b.n	800a894 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3330      	adds	r3, #48	; 0x30
 800a808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a80c:	2100      	movs	r1, #0
 800a80e:	4618      	mov	r0, r3
 800a810:	f7ff f977 	bl	8009b02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a814:	2300      	movs	r3, #0
 800a816:	613b      	str	r3, [r7, #16]
 800a818:	6979      	ldr	r1, [r7, #20]
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7ff fc1a 	bl	800a054 <clust2sect>
 800a820:	4602      	mov	r2, r0
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	62da      	str	r2, [r3, #44]	; 0x2c
 800a826:	e012      	b.n	800a84e <dir_next+0x13c>
						fs->wflag = 1;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2201      	movs	r2, #1
 800a82c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f7ff fb30 	bl	8009e94 <sync_window>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <dir_next+0x12c>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e02a      	b.n	800a894 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	3301      	adds	r3, #1
 800a842:	613b      	str	r3, [r7, #16]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	895b      	ldrh	r3, [r3, #10]
 800a852:	461a      	mov	r2, r3
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	4293      	cmp	r3, r2
 800a858:	d3e6      	bcc.n	800a828 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	1ad2      	subs	r2, r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a86c:	6979      	ldr	r1, [r7, #20]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f7ff fbf0 	bl	800a054 <clust2sect>
 800a874:	4602      	mov	r2, r0
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88c:	441a      	add	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3718      	adds	r7, #24
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7ff feb4 	bl	800a61c <dir_sdi>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d12b      	bne.n	800a916 <dir_alloc+0x7a>
		n = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7ff fb27 	bl	8009f1c <move_window>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d11d      	bne.n	800a914 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2be5      	cmp	r3, #229	; 0xe5
 800a8e0:	d004      	beq.n	800a8ec <dir_alloc+0x50>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d107      	bne.n	800a8fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	613b      	str	r3, [r7, #16]
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d102      	bne.n	800a900 <dir_alloc+0x64>
 800a8fa:	e00c      	b.n	800a916 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a900:	2101      	movs	r1, #1
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7ff ff05 	bl	800a712 <dir_next>
 800a908:	4603      	mov	r3, r0
 800a90a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0d7      	beq.n	800a8c2 <dir_alloc+0x26>
 800a912:	e000      	b.n	800a916 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a914:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a916:	7dfb      	ldrb	r3, [r7, #23]
 800a918:	2b04      	cmp	r3, #4
 800a91a:	d101      	bne.n	800a920 <dir_alloc+0x84>
 800a91c:	2307      	movs	r3, #7
 800a91e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a920:	7dfb      	ldrb	r3, [r7, #23]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	331a      	adds	r3, #26
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff f83f 	bl	80099bc <ld_word>
 800a93e:	4603      	mov	r3, r0
 800a940:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b03      	cmp	r3, #3
 800a948:	d109      	bne.n	800a95e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	3314      	adds	r3, #20
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff f834 	bl	80099bc <ld_word>
 800a954:	4603      	mov	r3, r0
 800a956:	041b      	lsls	r3, r3, #16
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a95e:	68fb      	ldr	r3, [r7, #12]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	331a      	adds	r3, #26
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	b292      	uxth	r2, r2
 800a97c:	4611      	mov	r1, r2
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff f857 	bl	8009a32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d109      	bne.n	800a9a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	f103 0214 	add.w	r2, r3, #20
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	0c1b      	lsrs	r3, r3, #16
 800a996:	b29b      	uxth	r3, r3
 800a998:	4619      	mov	r1, r3
 800a99a:	4610      	mov	r0, r2
 800a99c:	f7ff f849 	bl	8009a32 <st_word>
	}
}
 800a9a0:	bf00      	nop
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7ff fe2f 	bl	800a61c <dir_sdi>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <dir_find+0x24>
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ca:	e03e      	b.n	800aa4a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6938      	ldr	r0, [r7, #16]
 800a9d4:	f7ff faa2 	bl	8009f1c <move_window>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d12f      	bne.n	800aa42 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d102      	bne.n	800a9f6 <dir_find+0x4e>
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	75fb      	strb	r3, [r7, #23]
 800a9f4:	e028      	b.n	800aa48 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	330b      	adds	r3, #11
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	330b      	adds	r3, #11
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	f003 0308 	and.w	r3, r3, #8
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10a      	bne.n	800aa2e <dir_find+0x86>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a18      	ldr	r0, [r3, #32]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3324      	adds	r3, #36	; 0x24
 800aa20:	220b      	movs	r2, #11
 800aa22:	4619      	mov	r1, r3
 800aa24:	f7ff f888 	bl	8009b38 <mem_cmp>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00b      	beq.n	800aa46 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aa2e:	2100      	movs	r1, #0
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff fe6e 	bl	800a712 <dir_next>
 800aa36:	4603      	mov	r3, r0
 800aa38:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d0c5      	beq.n	800a9cc <dir_find+0x24>
 800aa40:	e002      	b.n	800aa48 <dir_find+0xa0>
		if (res != FR_OK) break;
 800aa42:	bf00      	nop
 800aa44:	e000      	b.n	800aa48 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa46:	bf00      	nop

	return res;
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aa60:	2101      	movs	r1, #1
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7ff ff1a 	bl	800a89c <dir_alloc>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d11c      	bne.n	800aaac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	4619      	mov	r1, r3
 800aa78:	68b8      	ldr	r0, [r7, #8]
 800aa7a:	f7ff fa4f 	bl	8009f1c <move_window>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d111      	bne.n	800aaac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	2220      	movs	r2, #32
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7ff f836 	bl	8009b02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a18      	ldr	r0, [r3, #32]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3324      	adds	r3, #36	; 0x24
 800aa9e:	220b      	movs	r2, #11
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	f7ff f80d 	bl	8009ac0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b086      	sub	sp, #24
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2200      	movs	r2, #0
 800aac4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d04e      	beq.n	800ab6c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	613b      	str	r3, [r7, #16]
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800aad6:	e021      	b.n	800ab1c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a1a      	ldr	r2, [r3, #32]
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	1c59      	adds	r1, r3, #1
 800aae0:	6179      	str	r1, [r7, #20]
 800aae2:	4413      	add	r3, r2
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	2b20      	cmp	r3, #32
 800aaec:	d100      	bne.n	800aaf0 <get_fileinfo+0x3a>
 800aaee:	e015      	b.n	800ab1c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	2b05      	cmp	r3, #5
 800aaf4:	d101      	bne.n	800aafa <get_fileinfo+0x44>
 800aaf6:	23e5      	movs	r3, #229	; 0xe5
 800aaf8:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2b09      	cmp	r3, #9
 800aafe:	d106      	bne.n	800ab0e <get_fileinfo+0x58>
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	613a      	str	r2, [r7, #16]
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	4413      	add	r3, r2
 800ab0a:	222e      	movs	r2, #46	; 0x2e
 800ab0c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	613a      	str	r2, [r7, #16]
 800ab14:	683a      	ldr	r2, [r7, #0]
 800ab16:	4413      	add	r3, r2
 800ab18:	7bfa      	ldrb	r2, [r7, #15]
 800ab1a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2b0a      	cmp	r3, #10
 800ab20:	d9da      	bls.n	800aad8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	4413      	add	r3, r2
 800ab28:	3309      	adds	r3, #9
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	7ada      	ldrb	r2, [r3, #11]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	331c      	adds	r3, #28
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fe ff54 	bl	80099ec <ld_dword>
 800ab44:	4602      	mov	r2, r0
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	3316      	adds	r3, #22
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe ff4b 	bl	80099ec <ld_dword>
 800ab56:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	80da      	strh	r2, [r3, #6]
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	0c1b      	lsrs	r3, r3, #16
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	809a      	strh	r2, [r3, #4]
 800ab6a:	e000      	b.n	800ab6e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ab6c:	bf00      	nop
}
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	3324      	adds	r3, #36	; 0x24
 800ab88:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab8a:	220b      	movs	r2, #11
 800ab8c:	2120      	movs	r1, #32
 800ab8e:	68b8      	ldr	r0, [r7, #8]
 800ab90:	f7fe ffb7 	bl	8009b02 <mem_set>
	si = i = 0; ni = 8;
 800ab94:	2300      	movs	r3, #0
 800ab96:	613b      	str	r3, [r7, #16]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	2308      	movs	r3, #8
 800ab9e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	1c5a      	adds	r2, r3, #1
 800aba4:	61fa      	str	r2, [r7, #28]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	4413      	add	r3, r2
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800abae:	7efb      	ldrb	r3, [r7, #27]
 800abb0:	2b20      	cmp	r3, #32
 800abb2:	d94e      	bls.n	800ac52 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800abb4:	7efb      	ldrb	r3, [r7, #27]
 800abb6:	2b2f      	cmp	r3, #47	; 0x2f
 800abb8:	d006      	beq.n	800abc8 <create_name+0x54>
 800abba:	7efb      	ldrb	r3, [r7, #27]
 800abbc:	2b5c      	cmp	r3, #92	; 0x5c
 800abbe:	d110      	bne.n	800abe2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800abc0:	e002      	b.n	800abc8 <create_name+0x54>
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	3301      	adds	r3, #1
 800abc6:	61fb      	str	r3, [r7, #28]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	4413      	add	r3, r2
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b2f      	cmp	r3, #47	; 0x2f
 800abd2:	d0f6      	beq.n	800abc2 <create_name+0x4e>
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4413      	add	r3, r2
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b5c      	cmp	r3, #92	; 0x5c
 800abde:	d0f0      	beq.n	800abc2 <create_name+0x4e>
			break;
 800abe0:	e038      	b.n	800ac54 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800abe2:	7efb      	ldrb	r3, [r7, #27]
 800abe4:	2b2e      	cmp	r3, #46	; 0x2e
 800abe6:	d003      	beq.n	800abf0 <create_name+0x7c>
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	429a      	cmp	r2, r3
 800abee:	d30c      	bcc.n	800ac0a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2b0b      	cmp	r3, #11
 800abf4:	d002      	beq.n	800abfc <create_name+0x88>
 800abf6:	7efb      	ldrb	r3, [r7, #27]
 800abf8:	2b2e      	cmp	r3, #46	; 0x2e
 800abfa:	d001      	beq.n	800ac00 <create_name+0x8c>
 800abfc:	2306      	movs	r3, #6
 800abfe:	e044      	b.n	800ac8a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ac00:	2308      	movs	r3, #8
 800ac02:	613b      	str	r3, [r7, #16]
 800ac04:	230b      	movs	r3, #11
 800ac06:	617b      	str	r3, [r7, #20]
			continue;
 800ac08:	e022      	b.n	800ac50 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ac0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	da04      	bge.n	800ac1c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ac12:	7efb      	ldrb	r3, [r7, #27]
 800ac14:	3b80      	subs	r3, #128	; 0x80
 800ac16:	4a1f      	ldr	r2, [pc, #124]	; (800ac94 <create_name+0x120>)
 800ac18:	5cd3      	ldrb	r3, [r2, r3]
 800ac1a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ac1c:	7efb      	ldrb	r3, [r7, #27]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	481d      	ldr	r0, [pc, #116]	; (800ac98 <create_name+0x124>)
 800ac22:	f7fe ffb0 	bl	8009b86 <chk_chr>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d001      	beq.n	800ac30 <create_name+0xbc>
 800ac2c:	2306      	movs	r3, #6
 800ac2e:	e02c      	b.n	800ac8a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ac30:	7efb      	ldrb	r3, [r7, #27]
 800ac32:	2b60      	cmp	r3, #96	; 0x60
 800ac34:	d905      	bls.n	800ac42 <create_name+0xce>
 800ac36:	7efb      	ldrb	r3, [r7, #27]
 800ac38:	2b7a      	cmp	r3, #122	; 0x7a
 800ac3a:	d802      	bhi.n	800ac42 <create_name+0xce>
 800ac3c:	7efb      	ldrb	r3, [r7, #27]
 800ac3e:	3b20      	subs	r3, #32
 800ac40:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	613a      	str	r2, [r7, #16]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	7efa      	ldrb	r2, [r7, #27]
 800ac4e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ac50:	e7a6      	b.n	800aba0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac52:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	441a      	add	r2, r3
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <create_name+0xf4>
 800ac64:	2306      	movs	r3, #6
 800ac66:	e010      	b.n	800ac8a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2be5      	cmp	r3, #229	; 0xe5
 800ac6e:	d102      	bne.n	800ac76 <create_name+0x102>
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2205      	movs	r2, #5
 800ac74:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ac76:	7efb      	ldrb	r3, [r7, #27]
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d801      	bhi.n	800ac80 <create_name+0x10c>
 800ac7c:	2204      	movs	r2, #4
 800ac7e:	e000      	b.n	800ac82 <create_name+0x10e>
 800ac80:	2200      	movs	r2, #0
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	330b      	adds	r3, #11
 800ac86:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ac88:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3720      	adds	r7, #32
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	0800d770 	.word	0x0800d770
 800ac98:	0800d58c 	.word	0x0800d58c

0800ac9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800acb0:	e002      	b.n	800acb8 <follow_path+0x1c>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	3301      	adds	r3, #1
 800acb6:	603b      	str	r3, [r7, #0]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	2b2f      	cmp	r3, #47	; 0x2f
 800acbe:	d0f8      	beq.n	800acb2 <follow_path+0x16>
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	2b5c      	cmp	r3, #92	; 0x5c
 800acc6:	d0f4      	beq.n	800acb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	2200      	movs	r2, #0
 800accc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	2b1f      	cmp	r3, #31
 800acd4:	d80a      	bhi.n	800acec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2280      	movs	r2, #128	; 0x80
 800acda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800acde:	2100      	movs	r1, #0
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff fc9b 	bl	800a61c <dir_sdi>
 800ace6:	4603      	mov	r3, r0
 800ace8:	75fb      	strb	r3, [r7, #23]
 800acea:	e043      	b.n	800ad74 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800acec:	463b      	mov	r3, r7
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff ff3f 	bl	800ab74 <create_name>
 800acf6:	4603      	mov	r3, r0
 800acf8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d134      	bne.n	800ad6a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff fe51 	bl	800a9a8 <dir_find>
 800ad06:	4603      	mov	r3, r0
 800ad08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad10:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00a      	beq.n	800ad2e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d127      	bne.n	800ad6e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ad1e:	7afb      	ldrb	r3, [r7, #11]
 800ad20:	f003 0304 	and.w	r3, r3, #4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d122      	bne.n	800ad6e <follow_path+0xd2>
 800ad28:	2305      	movs	r3, #5
 800ad2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ad2c:	e01f      	b.n	800ad6e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad2e:	7afb      	ldrb	r3, [r7, #11]
 800ad30:	f003 0304 	and.w	r3, r3, #4
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d11c      	bne.n	800ad72 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	799b      	ldrb	r3, [r3, #6]
 800ad3c:	f003 0310 	and.w	r3, r3, #16
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d102      	bne.n	800ad4a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ad44:	2305      	movs	r3, #5
 800ad46:	75fb      	strb	r3, [r7, #23]
 800ad48:	e014      	b.n	800ad74 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad58:	4413      	add	r3, r2
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7ff fde4 	bl	800a92a <ld_clust>
 800ad62:	4602      	mov	r2, r0
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad68:	e7c0      	b.n	800acec <follow_path+0x50>
			if (res != FR_OK) break;
 800ad6a:	bf00      	nop
 800ad6c:	e002      	b.n	800ad74 <follow_path+0xd8>
				break;
 800ad6e:	bf00      	nop
 800ad70:	e000      	b.n	800ad74 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad72:	bf00      	nop
			}
		}
	}

	return res;
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b087      	sub	sp, #28
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ad86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad8a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d031      	beq.n	800adf8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	617b      	str	r3, [r7, #20]
 800ad9a:	e002      	b.n	800ada2 <get_ldnumber+0x24>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	617b      	str	r3, [r7, #20]
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b20      	cmp	r3, #32
 800ada8:	d903      	bls.n	800adb2 <get_ldnumber+0x34>
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b3a      	cmp	r3, #58	; 0x3a
 800adb0:	d1f4      	bne.n	800ad9c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	2b3a      	cmp	r3, #58	; 0x3a
 800adb8:	d11c      	bne.n	800adf4 <get_ldnumber+0x76>
			tp = *path;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	60fa      	str	r2, [r7, #12]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	3b30      	subs	r3, #48	; 0x30
 800adca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b09      	cmp	r3, #9
 800add0:	d80e      	bhi.n	800adf0 <get_ldnumber+0x72>
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	429a      	cmp	r2, r3
 800add8:	d10a      	bne.n	800adf0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d107      	bne.n	800adf0 <get_ldnumber+0x72>
					vol = (int)i;
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	3301      	adds	r3, #1
 800ade8:	617b      	str	r3, [r7, #20]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	e002      	b.n	800adfa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800adf4:	2300      	movs	r3, #0
 800adf6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800adf8:	693b      	ldr	r3, [r7, #16]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
	...

0800ae08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	70da      	strb	r2, [r3, #3]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae1e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff f87a 	bl	8009f1c <move_window>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <check_fs+0x2a>
 800ae2e:	2304      	movs	r3, #4
 800ae30:	e038      	b.n	800aea4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	3330      	adds	r3, #48	; 0x30
 800ae36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe fdbe 	bl	80099bc <ld_word>
 800ae40:	4603      	mov	r3, r0
 800ae42:	461a      	mov	r2, r3
 800ae44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d001      	beq.n	800ae50 <check_fs+0x48>
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e029      	b.n	800aea4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae56:	2be9      	cmp	r3, #233	; 0xe9
 800ae58:	d009      	beq.n	800ae6e <check_fs+0x66>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae60:	2beb      	cmp	r3, #235	; 0xeb
 800ae62:	d11e      	bne.n	800aea2 <check_fs+0x9a>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ae6a:	2b90      	cmp	r3, #144	; 0x90
 800ae6c:	d119      	bne.n	800aea2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3330      	adds	r3, #48	; 0x30
 800ae72:	3336      	adds	r3, #54	; 0x36
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fe fdb9 	bl	80099ec <ld_dword>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae80:	4a0a      	ldr	r2, [pc, #40]	; (800aeac <check_fs+0xa4>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d101      	bne.n	800ae8a <check_fs+0x82>
 800ae86:	2300      	movs	r3, #0
 800ae88:	e00c      	b.n	800aea4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3330      	adds	r3, #48	; 0x30
 800ae8e:	3352      	adds	r3, #82	; 0x52
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe fdab 	bl	80099ec <ld_dword>
 800ae96:	4603      	mov	r3, r0
 800ae98:	4a05      	ldr	r2, [pc, #20]	; (800aeb0 <check_fs+0xa8>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d101      	bne.n	800aea2 <check_fs+0x9a>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e000      	b.n	800aea4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aea2:	2302      	movs	r3, #2
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	00544146 	.word	0x00544146
 800aeb0:	33544146 	.word	0x33544146

0800aeb4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b096      	sub	sp, #88	; 0x58
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	4613      	mov	r3, r2
 800aec0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	2200      	movs	r2, #0
 800aec6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f7ff ff58 	bl	800ad7e <get_ldnumber>
 800aece:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da01      	bge.n	800aeda <find_volume+0x26>
 800aed6:	230b      	movs	r3, #11
 800aed8:	e22e      	b.n	800b338 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aeda:	4aa8      	ldr	r2, [pc, #672]	; (800b17c <find_volume+0x2c8>)
 800aedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <find_volume+0x3a>
 800aeea:	230c      	movs	r3, #12
 800aeec:	e224      	b.n	800b338 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aef2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aef4:	79fb      	ldrb	r3, [r7, #7]
 800aef6:	f023 0301 	bic.w	r3, r3, #1
 800aefa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01a      	beq.n	800af3a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800af04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe fcb9 	bl	8009880 <disk_status>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800af14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10c      	bne.n	800af3a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d007      	beq.n	800af36 <find_volume+0x82>
 800af26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af2a:	f003 0304 	and.w	r3, r3, #4
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800af32:	230a      	movs	r3, #10
 800af34:	e200      	b.n	800b338 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800af36:	2300      	movs	r3, #0
 800af38:	e1fe      	b.n	800b338 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3c:	2200      	movs	r2, #0
 800af3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af42:	b2da      	uxtb	r2, r3
 800af44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	785b      	ldrb	r3, [r3, #1]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fe fcb1 	bl	80098b4 <disk_initialize>
 800af52:	4603      	mov	r3, r0
 800af54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800af58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af64:	2303      	movs	r3, #3
 800af66:	e1e7      	b.n	800b338 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d007      	beq.n	800af7e <find_volume+0xca>
 800af6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af72:	f003 0304 	and.w	r3, r3, #4
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800af7a:	230a      	movs	r3, #10
 800af7c:	e1dc      	b.n	800b338 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800af82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af86:	f7ff ff3f 	bl	800ae08 <check_fs>
 800af8a:	4603      	mov	r3, r0
 800af8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800af90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af94:	2b02      	cmp	r3, #2
 800af96:	d14b      	bne.n	800b030 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af98:	2300      	movs	r3, #0
 800af9a:	643b      	str	r3, [r7, #64]	; 0x40
 800af9c:	e01f      	b.n	800afde <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800afa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800afac:	4413      	add	r3, r2
 800afae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	3304      	adds	r3, #4
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d006      	beq.n	800afc8 <find_volume+0x114>
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	3308      	adds	r3, #8
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fe fd14 	bl	80099ec <ld_dword>
 800afc4:	4602      	mov	r2, r0
 800afc6:	e000      	b.n	800afca <find_volume+0x116>
 800afc8:	2200      	movs	r2, #0
 800afca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800afd2:	440b      	add	r3, r1
 800afd4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800afd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afda:	3301      	adds	r3, #1
 800afdc:	643b      	str	r3, [r7, #64]	; 0x40
 800afde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d9dc      	bls.n	800af9e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800afe4:	2300      	movs	r3, #0
 800afe6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800afe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <find_volume+0x140>
 800afee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff0:	3b01      	subs	r3, #1
 800aff2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800aff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800affc:	4413      	add	r3, r2
 800affe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b002:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b006:	2b00      	cmp	r3, #0
 800b008:	d005      	beq.n	800b016 <find_volume+0x162>
 800b00a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b00c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b00e:	f7ff fefb 	bl	800ae08 <check_fs>
 800b012:	4603      	mov	r3, r0
 800b014:	e000      	b.n	800b018 <find_volume+0x164>
 800b016:	2303      	movs	r3, #3
 800b018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b01c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b020:	2b01      	cmp	r3, #1
 800b022:	d905      	bls.n	800b030 <find_volume+0x17c>
 800b024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b026:	3301      	adds	r3, #1
 800b028:	643b      	str	r3, [r7, #64]	; 0x40
 800b02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d9e1      	bls.n	800aff4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b034:	2b04      	cmp	r3, #4
 800b036:	d101      	bne.n	800b03c <find_volume+0x188>
 800b038:	2301      	movs	r3, #1
 800b03a:	e17d      	b.n	800b338 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b03c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b040:	2b01      	cmp	r3, #1
 800b042:	d901      	bls.n	800b048 <find_volume+0x194>
 800b044:	230d      	movs	r3, #13
 800b046:	e177      	b.n	800b338 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	3330      	adds	r3, #48	; 0x30
 800b04c:	330b      	adds	r3, #11
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fe fcb4 	bl	80099bc <ld_word>
 800b054:	4603      	mov	r3, r0
 800b056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b05a:	d001      	beq.n	800b060 <find_volume+0x1ac>
 800b05c:	230d      	movs	r3, #13
 800b05e:	e16b      	b.n	800b338 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	3330      	adds	r3, #48	; 0x30
 800b064:	3316      	adds	r3, #22
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fca8 	bl	80099bc <ld_word>
 800b06c:	4603      	mov	r3, r0
 800b06e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <find_volume+0x1d0>
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	3330      	adds	r3, #48	; 0x30
 800b07a:	3324      	adds	r3, #36	; 0x24
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fe fcb5 	bl	80099ec <ld_dword>
 800b082:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b088:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b096:	789b      	ldrb	r3, [r3, #2]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d005      	beq.n	800b0a8 <find_volume+0x1f4>
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	789b      	ldrb	r3, [r3, #2]
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d001      	beq.n	800b0a8 <find_volume+0x1f4>
 800b0a4:	230d      	movs	r3, #13
 800b0a6:	e147      	b.n	800b338 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	789b      	ldrb	r3, [r3, #2]
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b0:	fb02 f303 	mul.w	r3, r2, r3
 800b0b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c4:	895b      	ldrh	r3, [r3, #10]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d008      	beq.n	800b0dc <find_volume+0x228>
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	895b      	ldrh	r3, [r3, #10]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	895b      	ldrh	r3, [r3, #10]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <find_volume+0x22c>
 800b0dc:	230d      	movs	r3, #13
 800b0de:	e12b      	b.n	800b338 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e2:	3330      	adds	r3, #48	; 0x30
 800b0e4:	3311      	adds	r3, #17
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe fc68 	bl	80099bc <ld_word>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	891b      	ldrh	r3, [r3, #8]
 800b0f8:	f003 030f 	and.w	r3, r3, #15
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <find_volume+0x252>
 800b102:	230d      	movs	r3, #13
 800b104:	e118      	b.n	800b338 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	3330      	adds	r3, #48	; 0x30
 800b10a:	3313      	adds	r3, #19
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fe fc55 	bl	80099bc <ld_word>
 800b112:	4603      	mov	r3, r0
 800b114:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d106      	bne.n	800b12a <find_volume+0x276>
 800b11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11e:	3330      	adds	r3, #48	; 0x30
 800b120:	3320      	adds	r3, #32
 800b122:	4618      	mov	r0, r3
 800b124:	f7fe fc62 	bl	80099ec <ld_dword>
 800b128:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12c:	3330      	adds	r3, #48	; 0x30
 800b12e:	330e      	adds	r3, #14
 800b130:	4618      	mov	r0, r3
 800b132:	f7fe fc43 	bl	80099bc <ld_word>
 800b136:	4603      	mov	r3, r0
 800b138:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b13a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <find_volume+0x290>
 800b140:	230d      	movs	r3, #13
 800b142:	e0f9      	b.n	800b338 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b144:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b148:	4413      	add	r3, r2
 800b14a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b14c:	8912      	ldrh	r2, [r2, #8]
 800b14e:	0912      	lsrs	r2, r2, #4
 800b150:	b292      	uxth	r2, r2
 800b152:	4413      	add	r3, r2
 800b154:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d201      	bcs.n	800b162 <find_volume+0x2ae>
 800b15e:	230d      	movs	r3, #13
 800b160:	e0ea      	b.n	800b338 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b16a:	8952      	ldrh	r2, [r2, #10]
 800b16c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b170:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	d103      	bne.n	800b180 <find_volume+0x2cc>
 800b178:	230d      	movs	r3, #13
 800b17a:	e0dd      	b.n	800b338 <find_volume+0x484>
 800b17c:	200000b0 	.word	0x200000b0
		fmt = FS_FAT32;
 800b180:	2303      	movs	r3, #3
 800b182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d802      	bhi.n	800b196 <find_volume+0x2e2>
 800b190:	2302      	movs	r3, #2
 800b192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d802      	bhi.n	800b1a6 <find_volume+0x2f2>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	1c9a      	adds	r2, r3, #2
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1b2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b1b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1b8:	441a      	add	r2, r3
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1bc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b1be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	441a      	add	r2, r3
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b1c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1cc:	2b03      	cmp	r3, #3
 800b1ce:	d11e      	bne.n	800b20e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	3330      	adds	r3, #48	; 0x30
 800b1d4:	332a      	adds	r3, #42	; 0x2a
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe fbf0 	bl	80099bc <ld_word>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <find_volume+0x332>
 800b1e2:	230d      	movs	r3, #13
 800b1e4:	e0a8      	b.n	800b338 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	891b      	ldrh	r3, [r3, #8]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <find_volume+0x33e>
 800b1ee:	230d      	movs	r3, #13
 800b1f0:	e0a2      	b.n	800b338 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	3330      	adds	r3, #48	; 0x30
 800b1f6:	332c      	adds	r3, #44	; 0x2c
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fe fbf7 	bl	80099ec <ld_dword>
 800b1fe:	4602      	mov	r2, r0
 800b200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b202:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	647b      	str	r3, [r7, #68]	; 0x44
 800b20c:	e01f      	b.n	800b24e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	891b      	ldrh	r3, [r3, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <find_volume+0x366>
 800b216:	230d      	movs	r3, #13
 800b218:	e08e      	b.n	800b338 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	6a1a      	ldr	r2, [r3, #32]
 800b21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b220:	441a      	add	r2, r3
 800b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b224:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b226:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d103      	bne.n	800b236 <find_volume+0x382>
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	e00a      	b.n	800b24c <find_volume+0x398>
 800b236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b238:	695a      	ldr	r2, [r3, #20]
 800b23a:	4613      	mov	r3, r2
 800b23c:	005b      	lsls	r3, r3, #1
 800b23e:	4413      	add	r3, r2
 800b240:	085a      	lsrs	r2, r3, #1
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b24c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	699a      	ldr	r2, [r3, #24]
 800b252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b254:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b258:	0a5b      	lsrs	r3, r3, #9
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d201      	bcs.n	800b262 <find_volume+0x3ae>
 800b25e:	230d      	movs	r3, #13
 800b260:	e06a      	b.n	800b338 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b268:	611a      	str	r2, [r3, #16]
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	691a      	ldr	r2, [r3, #16]
 800b26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b270:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b274:	2280      	movs	r2, #128	; 0x80
 800b276:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b278:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d149      	bne.n	800b314 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	3330      	adds	r3, #48	; 0x30
 800b284:	3330      	adds	r3, #48	; 0x30
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe fb98 	bl	80099bc <ld_word>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d140      	bne.n	800b314 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b294:	3301      	adds	r3, #1
 800b296:	4619      	mov	r1, r3
 800b298:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b29a:	f7fe fe3f 	bl	8009f1c <move_window>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d137      	bne.n	800b314 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	3330      	adds	r3, #48	; 0x30
 800b2ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe fb82 	bl	80099bc <ld_word>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d127      	bne.n	800b314 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	3330      	adds	r3, #48	; 0x30
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe fb8f 	bl	80099ec <ld_dword>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	4a1b      	ldr	r2, [pc, #108]	; (800b340 <find_volume+0x48c>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d11e      	bne.n	800b314 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	3330      	adds	r3, #48	; 0x30
 800b2da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fe fb84 	bl	80099ec <ld_dword>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	4a17      	ldr	r2, [pc, #92]	; (800b344 <find_volume+0x490>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d113      	bne.n	800b314 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	3330      	adds	r3, #48	; 0x30
 800b2f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fe fb79 	bl	80099ec <ld_dword>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fe:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	3330      	adds	r3, #48	; 0x30
 800b304:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fe fb6f 	bl	80099ec <ld_dword>
 800b30e:	4602      	mov	r2, r0
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b31a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b31c:	4b0a      	ldr	r3, [pc, #40]	; (800b348 <find_volume+0x494>)
 800b31e:	881b      	ldrh	r3, [r3, #0]
 800b320:	3301      	adds	r3, #1
 800b322:	b29a      	uxth	r2, r3
 800b324:	4b08      	ldr	r3, [pc, #32]	; (800b348 <find_volume+0x494>)
 800b326:	801a      	strh	r2, [r3, #0]
 800b328:	4b07      	ldr	r3, [pc, #28]	; (800b348 <find_volume+0x494>)
 800b32a:	881a      	ldrh	r2, [r3, #0]
 800b32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b330:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b332:	f7fe fd8b 	bl	8009e4c <clear_lock>
#endif
	return FR_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3758      	adds	r7, #88	; 0x58
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	41615252 	.word	0x41615252
 800b344:	61417272 	.word	0x61417272
 800b348:	200000b4 	.word	0x200000b4

0800b34c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b356:	2309      	movs	r3, #9
 800b358:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d01c      	beq.n	800b39a <validate+0x4e>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d018      	beq.n	800b39a <validate+0x4e>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d013      	beq.n	800b39a <validate+0x4e>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	889a      	ldrh	r2, [r3, #4]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	88db      	ldrh	r3, [r3, #6]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d10c      	bne.n	800b39a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	785b      	ldrb	r3, [r3, #1]
 800b386:	4618      	mov	r0, r3
 800b388:	f7fe fa7a 	bl	8009880 <disk_status>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <validate+0x4e>
			res = FR_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <validate+0x5a>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	e000      	b.n	800b3a8 <validate+0x5c>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	6013      	str	r3, [r2, #0]
	return res;
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b088      	sub	sp, #32
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b3ca:	f107 0310 	add.w	r3, r7, #16
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff fcd5 	bl	800ad7e <get_ldnumber>
 800b3d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	da01      	bge.n	800b3e0 <f_mount+0x28>
 800b3dc:	230b      	movs	r3, #11
 800b3de:	e02b      	b.n	800b438 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b3e0:	4a17      	ldr	r2, [pc, #92]	; (800b440 <f_mount+0x88>)
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d005      	beq.n	800b3fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b3f0:	69b8      	ldr	r0, [r7, #24]
 800b3f2:	f7fe fd2b 	bl	8009e4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d002      	beq.n	800b408 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	490d      	ldr	r1, [pc, #52]	; (800b440 <f_mount+0x88>)
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <f_mount+0x66>
 800b418:	79fb      	ldrb	r3, [r7, #7]
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d001      	beq.n	800b422 <f_mount+0x6a>
 800b41e:	2300      	movs	r3, #0
 800b420:	e00a      	b.n	800b438 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b422:	f107 010c 	add.w	r1, r7, #12
 800b426:	f107 0308 	add.w	r3, r7, #8
 800b42a:	2200      	movs	r2, #0
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7ff fd41 	bl	800aeb4 <find_volume>
 800b432:	4603      	mov	r3, r0
 800b434:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b436:	7dfb      	ldrb	r3, [r7, #23]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3720      	adds	r7, #32
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	200000b0 	.word	0x200000b0

0800b444 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b098      	sub	sp, #96	; 0x60
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <f_open+0x18>
 800b458:	2309      	movs	r3, #9
 800b45a:	e1ad      	b.n	800b7b8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b462:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b464:	79fa      	ldrb	r2, [r7, #7]
 800b466:	f107 0110 	add.w	r1, r7, #16
 800b46a:	f107 0308 	add.w	r3, r7, #8
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff fd20 	bl	800aeb4 <find_volume>
 800b474:	4603      	mov	r3, r0
 800b476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b47a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f040 8191 	bne.w	800b7a6 <f_open+0x362>
		dj.obj.fs = fs;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	f107 0314 	add.w	r3, r7, #20
 800b48e:	4611      	mov	r1, r2
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff fc03 	bl	800ac9c <follow_path>
 800b496:	4603      	mov	r3, r0
 800b498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b49c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d11a      	bne.n	800b4da <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b4a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b4a8:	b25b      	sxtb	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	da03      	bge.n	800b4b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b4ae:	2306      	movs	r3, #6
 800b4b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b4b4:	e011      	b.n	800b4da <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
 800b4b8:	f023 0301 	bic.w	r3, r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	bf14      	ite	ne
 800b4c0:	2301      	movne	r3, #1
 800b4c2:	2300      	moveq	r3, #0
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f107 0314 	add.w	r3, r7, #20
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe fb74 	bl	8009bbc <chk_lock>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4da:	79fb      	ldrb	r3, [r7, #7]
 800b4dc:	f003 031c 	and.w	r3, r3, #28
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d07f      	beq.n	800b5e4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b4e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d017      	beq.n	800b51c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4f0:	2b04      	cmp	r3, #4
 800b4f2:	d10e      	bne.n	800b512 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4f4:	f7fe fbbe 	bl	8009c74 <enq_lock>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d006      	beq.n	800b50c <f_open+0xc8>
 800b4fe:	f107 0314 	add.w	r3, r7, #20
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff faa5 	bl	800aa52 <dir_register>
 800b508:	4603      	mov	r3, r0
 800b50a:	e000      	b.n	800b50e <f_open+0xca>
 800b50c:	2312      	movs	r3, #18
 800b50e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	f043 0308 	orr.w	r3, r3, #8
 800b518:	71fb      	strb	r3, [r7, #7]
 800b51a:	e010      	b.n	800b53e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b51c:	7ebb      	ldrb	r3, [r7, #26]
 800b51e:	f003 0311 	and.w	r3, r3, #17
 800b522:	2b00      	cmp	r3, #0
 800b524:	d003      	beq.n	800b52e <f_open+0xea>
					res = FR_DENIED;
 800b526:	2307      	movs	r3, #7
 800b528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b52c:	e007      	b.n	800b53e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <f_open+0xfa>
 800b538:	2308      	movs	r3, #8
 800b53a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b53e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b542:	2b00      	cmp	r3, #0
 800b544:	d168      	bne.n	800b618 <f_open+0x1d4>
 800b546:	79fb      	ldrb	r3, [r7, #7]
 800b548:	f003 0308 	and.w	r3, r3, #8
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d063      	beq.n	800b618 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b550:	f7fb f99a 	bl	8006888 <get_fattime>
 800b554:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b558:	330e      	adds	r3, #14
 800b55a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe fa83 	bl	8009a68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b564:	3316      	adds	r3, #22
 800b566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe fa7d 	bl	8009a68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b570:	330b      	adds	r3, #11
 800b572:	2220      	movs	r2, #32
 800b574:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b57a:	4611      	mov	r1, r2
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff f9d4 	bl	800a92a <ld_clust>
 800b582:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b588:	2200      	movs	r2, #0
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7ff f9ec 	bl	800a968 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b592:	331c      	adds	r3, #28
 800b594:	2100      	movs	r1, #0
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe fa66 	bl	8009a68 <st_dword>
					fs->wflag = 1;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d037      	beq.n	800b618 <f_open+0x1d4>
						dw = fs->winsect;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ac:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b5ae:	f107 0314 	add.w	r3, r7, #20
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe feff 	bl	800a3ba <remove_chain>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b5c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d126      	bne.n	800b618 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7fe fca4 	bl	8009f1c <move_window>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5de:	3a01      	subs	r2, #1
 800b5e0:	60da      	str	r2, [r3, #12]
 800b5e2:	e019      	b.n	800b618 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d115      	bne.n	800b618 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5ec:	7ebb      	ldrb	r3, [r7, #26]
 800b5ee:	f003 0310 	and.w	r3, r3, #16
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <f_open+0x1ba>
					res = FR_NO_FILE;
 800b5f6:	2304      	movs	r3, #4
 800b5f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5fc:	e00c      	b.n	800b618 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5fe:	79fb      	ldrb	r3, [r7, #7]
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d007      	beq.n	800b618 <f_open+0x1d4>
 800b608:	7ebb      	ldrb	r3, [r7, #26]
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d002      	beq.n	800b618 <f_open+0x1d4>
						res = FR_DENIED;
 800b612:	2307      	movs	r3, #7
 800b614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d128      	bne.n	800b672 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	f003 0308 	and.w	r3, r3, #8
 800b626:	2b00      	cmp	r3, #0
 800b628:	d003      	beq.n	800b632 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b62a:	79fb      	ldrb	r3, [r7, #7]
 800b62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b630:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b63a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	f023 0301 	bic.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	bf14      	ite	ne
 800b64a:	2301      	movne	r3, #1
 800b64c:	2300      	moveq	r3, #0
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	461a      	mov	r2, r3
 800b652:	f107 0314 	add.w	r3, r7, #20
 800b656:	4611      	mov	r1, r2
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fe fb2d 	bl	8009cb8 <inc_lock>
 800b65e:	4602      	mov	r2, r0
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d102      	bne.n	800b672 <f_open+0x22e>
 800b66c:	2302      	movs	r3, #2
 800b66e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b676:	2b00      	cmp	r3, #0
 800b678:	f040 8095 	bne.w	800b7a6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b680:	4611      	mov	r1, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7ff f951 	bl	800a92a <ld_clust>
 800b688:	4602      	mov	r2, r0
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b690:	331c      	adds	r3, #28
 800b692:	4618      	mov	r0, r3
 800b694:	f7fe f9aa 	bl	80099ec <ld_dword>
 800b698:	4602      	mov	r2, r0
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	88da      	ldrh	r2, [r3, #6]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	79fa      	ldrb	r2, [r7, #7]
 800b6b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3330      	adds	r3, #48	; 0x30
 800b6ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fe fa14 	bl	8009b02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	f003 0320 	and.w	r3, r3, #32
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d060      	beq.n	800b7a6 <f_open+0x362>
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d05c      	beq.n	800b7a6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	68da      	ldr	r2, [r3, #12]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	895b      	ldrh	r3, [r3, #10]
 800b6f8:	025b      	lsls	r3, r3, #9
 800b6fa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	657b      	str	r3, [r7, #84]	; 0x54
 800b708:	e016      	b.n	800b738 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe fcbf 	bl	800a092 <get_fat>
 800b714:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d802      	bhi.n	800b722 <f_open+0x2de>
 800b71c:	2302      	movs	r3, #2
 800b71e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b728:	d102      	bne.n	800b730 <f_open+0x2ec>
 800b72a:	2301      	movs	r3, #1
 800b72c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	657b      	str	r3, [r7, #84]	; 0x54
 800b738:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d103      	bne.n	800b748 <f_open+0x304>
 800b740:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b744:	429a      	cmp	r2, r3
 800b746:	d8e0      	bhi.n	800b70a <f_open+0x2c6>
				}
				fp->clust = clst;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b74c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b74e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b752:	2b00      	cmp	r3, #0
 800b754:	d127      	bne.n	800b7a6 <f_open+0x362>
 800b756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d022      	beq.n	800b7a6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b764:	4618      	mov	r0, r3
 800b766:	f7fe fc75 	bl	800a054 <clust2sect>
 800b76a:	6478      	str	r0, [r7, #68]	; 0x44
 800b76c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d103      	bne.n	800b77a <f_open+0x336>
						res = FR_INT_ERR;
 800b772:	2302      	movs	r3, #2
 800b774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b778:	e015      	b.n	800b7a6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b77a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b77c:	0a5a      	lsrs	r2, r3, #9
 800b77e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b780:	441a      	add	r2, r3
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	7858      	ldrb	r0, [r3, #1]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6a1a      	ldr	r2, [r3, #32]
 800b794:	2301      	movs	r3, #1
 800b796:	f7fe f8b3 	bl	8009900 <disk_read>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <f_open+0x362>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b7a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d002      	beq.n	800b7b4 <f_open+0x370>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b7b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3760      	adds	r7, #96	; 0x60
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08c      	sub	sp, #48	; 0x30
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f107 0210 	add.w	r2, r7, #16
 800b7de:	4611      	mov	r1, r2
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff fdb3 	bl	800b34c <validate>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b7ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d107      	bne.n	800b804 <f_write+0x44>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	7d5b      	ldrb	r3, [r3, #21]
 800b7f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b7fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <f_write+0x4a>
 800b804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b808:	e14b      	b.n	800baa2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	7d1b      	ldrb	r3, [r3, #20]
 800b80e:	f003 0302 	and.w	r3, r3, #2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <f_write+0x5a>
 800b816:	2307      	movs	r3, #7
 800b818:	e143      	b.n	800baa2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	699a      	ldr	r2, [r3, #24]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	441a      	add	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	429a      	cmp	r2, r3
 800b828:	f080 812d 	bcs.w	800ba86 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	43db      	mvns	r3, r3
 800b832:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b834:	e127      	b.n	800ba86 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	699b      	ldr	r3, [r3, #24]
 800b83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f040 80e3 	bne.w	800ba0a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	699b      	ldr	r3, [r3, #24]
 800b848:	0a5b      	lsrs	r3, r3, #9
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	8952      	ldrh	r2, [r2, #10]
 800b84e:	3a01      	subs	r2, #1
 800b850:	4013      	ands	r3, r2
 800b852:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d143      	bne.n	800b8e2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10c      	bne.n	800b87c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d11a      	bne.n	800b8a4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2100      	movs	r1, #0
 800b872:	4618      	mov	r0, r3
 800b874:	f7fe fe06 	bl	800a484 <create_chain>
 800b878:	62b8      	str	r0, [r7, #40]	; 0x28
 800b87a:	e013      	b.n	800b8a4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d007      	beq.n	800b894 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	4619      	mov	r1, r3
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f7fe fe92 	bl	800a5b4 <clmt_clust>
 800b890:	62b8      	str	r0, [r7, #40]	; 0x28
 800b892:	e007      	b.n	800b8a4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	4619      	mov	r1, r3
 800b89c:	4610      	mov	r0, r2
 800b89e:	f7fe fdf1 	bl	800a484 <create_chain>
 800b8a2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f000 80f2 	beq.w	800ba90 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d104      	bne.n	800b8bc <f_write+0xfc>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	755a      	strb	r2, [r3, #21]
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	e0f2      	b.n	800baa2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8c2:	d104      	bne.n	800b8ce <f_write+0x10e>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	755a      	strb	r2, [r3, #21]
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e0e9      	b.n	800baa2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8d2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d102      	bne.n	800b8e2 <f_write+0x122>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8e0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	7d1b      	ldrb	r3, [r3, #20]
 800b8e6:	b25b      	sxtb	r3, r3
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	da18      	bge.n	800b91e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	7858      	ldrb	r0, [r3, #1]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6a1a      	ldr	r2, [r3, #32]
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	f7fe f820 	bl	8009940 <disk_write>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d004      	beq.n	800b910 <f_write+0x150>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2201      	movs	r2, #1
 800b90a:	755a      	strb	r2, [r3, #21]
 800b90c:	2301      	movs	r3, #1
 800b90e:	e0c8      	b.n	800baa2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	7d1b      	ldrb	r3, [r3, #20]
 800b914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	69db      	ldr	r3, [r3, #28]
 800b924:	4619      	mov	r1, r3
 800b926:	4610      	mov	r0, r2
 800b928:	f7fe fb94 	bl	800a054 <clust2sect>
 800b92c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d104      	bne.n	800b93e <f_write+0x17e>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2202      	movs	r2, #2
 800b938:	755a      	strb	r2, [r3, #21]
 800b93a:	2302      	movs	r3, #2
 800b93c:	e0b1      	b.n	800baa2 <f_write+0x2e2>
			sect += csect;
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	4413      	add	r3, r2
 800b944:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	0a5b      	lsrs	r3, r3, #9
 800b94a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d03c      	beq.n	800b9cc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b952:	69ba      	ldr	r2, [r7, #24]
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	4413      	add	r3, r2
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	8952      	ldrh	r2, [r2, #10]
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d905      	bls.n	800b96c <f_write+0x1ac>
					cc = fs->csize - csect;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	895b      	ldrh	r3, [r3, #10]
 800b964:	461a      	mov	r2, r3
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	7858      	ldrb	r0, [r3, #1]
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	69f9      	ldr	r1, [r7, #28]
 800b976:	f7fd ffe3 	bl	8009940 <disk_write>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d004      	beq.n	800b98a <f_write+0x1ca>
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2201      	movs	r2, #1
 800b984:	755a      	strb	r2, [r3, #21]
 800b986:	2301      	movs	r3, #1
 800b988:	e08b      	b.n	800baa2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6a1a      	ldr	r2, [r3, #32]
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	6a3a      	ldr	r2, [r7, #32]
 800b994:	429a      	cmp	r2, r3
 800b996:	d915      	bls.n	800b9c4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6a1a      	ldr	r2, [r3, #32]
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	025b      	lsls	r3, r3, #9
 800b9a8:	69fa      	ldr	r2, [r7, #28]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f7fe f885 	bl	8009ac0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	7d1b      	ldrb	r3, [r3, #20]
 800b9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	025b      	lsls	r3, r3, #9
 800b9c8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b9ca:	e03f      	b.n	800ba4c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6a1b      	ldr	r3, [r3, #32]
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d016      	beq.n	800ba04 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	699a      	ldr	r2, [r3, #24]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d210      	bcs.n	800ba04 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	7858      	ldrb	r0, [r3, #1]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	f7fd ff86 	bl	8009900 <disk_read>
 800b9f4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d004      	beq.n	800ba04 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	755a      	strb	r2, [r3, #21]
 800ba00:	2301      	movs	r3, #1
 800ba02:	e04e      	b.n	800baa2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba12:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ba18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d901      	bls.n	800ba24 <f_write+0x264>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba32:	4413      	add	r3, r2
 800ba34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba36:	69f9      	ldr	r1, [r7, #28]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fe f841 	bl	8009ac0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	7d1b      	ldrb	r3, [r3, #20]
 800ba42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ba4c:	69fa      	ldr	r2, [r7, #28]
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	4413      	add	r3, r2
 800ba52:	61fb      	str	r3, [r7, #28]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	699a      	ldr	r2, [r3, #24]
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	441a      	add	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	619a      	str	r2, [r3, #24]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	68da      	ldr	r2, [r3, #12]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	bf38      	it	cc
 800ba6c:	461a      	movcc	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	60da      	str	r2, [r3, #12]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba78:	441a      	add	r2, r3
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f47f aed4 	bne.w	800b836 <f_write+0x76>
 800ba8e:	e000      	b.n	800ba92 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba90:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	7d1b      	ldrb	r3, [r3, #20]
 800ba96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3730      	adds	r7, #48	; 0x30
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b086      	sub	sp, #24
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f107 0208 	add.w	r2, r7, #8
 800bab8:	4611      	mov	r1, r2
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff fc46 	bl	800b34c <validate>
 800bac0:	4603      	mov	r3, r0
 800bac2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bac4:	7dfb      	ldrb	r3, [r7, #23]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d168      	bne.n	800bb9c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	7d1b      	ldrb	r3, [r3, #20]
 800bace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d062      	beq.n	800bb9c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	7d1b      	ldrb	r3, [r3, #20]
 800bada:	b25b      	sxtb	r3, r3
 800badc:	2b00      	cmp	r3, #0
 800bade:	da15      	bge.n	800bb0c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	7858      	ldrb	r0, [r3, #1]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a1a      	ldr	r2, [r3, #32]
 800baee:	2301      	movs	r3, #1
 800baf0:	f7fd ff26 	bl	8009940 <disk_write>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <f_sync+0x54>
 800bafa:	2301      	movs	r3, #1
 800bafc:	e04f      	b.n	800bb9e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	7d1b      	ldrb	r3, [r3, #20]
 800bb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bb0c:	f7fa febc 	bl	8006888 <get_fattime>
 800bb10:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	f7fe f9fe 	bl	8009f1c <move_window>
 800bb20:	4603      	mov	r3, r0
 800bb22:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bb24:	7dfb      	ldrb	r3, [r7, #23]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d138      	bne.n	800bb9c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	330b      	adds	r3, #11
 800bb34:	781a      	ldrb	r2, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	330b      	adds	r3, #11
 800bb3a:	f042 0220 	orr.w	r2, r2, #32
 800bb3e:	b2d2      	uxtb	r2, r2
 800bb40:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6818      	ldr	r0, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	68f9      	ldr	r1, [r7, #12]
 800bb4e:	f7fe ff0b 	bl	800a968 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f103 021c 	add.w	r2, r3, #28
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	f7fd ff82 	bl	8009a68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3316      	adds	r3, #22
 800bb68:	6939      	ldr	r1, [r7, #16]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fd ff7c 	bl	8009a68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	3312      	adds	r3, #18
 800bb74:	2100      	movs	r1, #0
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fd ff5b 	bl	8009a32 <st_word>
					fs->wflag = 1;
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fe f9f7 	bl	8009f78 <sync_fs>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	7d1b      	ldrb	r3, [r3, #20]
 800bb92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3718      	adds	r7, #24
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b084      	sub	sp, #16
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7ff ff7b 	bl	800baaa <f_sync>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d118      	bne.n	800bbf0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f107 0208 	add.w	r2, r7, #8
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7ff fbc0 	bl	800b34c <validate>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10c      	bne.n	800bbf0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fe f8fa 	bl	8009dd4 <dec_lock>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d102      	bne.n	800bbf0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b090      	sub	sp, #64	; 0x40
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800bc04:	f107 010c 	add.w	r1, r7, #12
 800bc08:	1d3b      	adds	r3, r7, #4
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff f951 	bl	800aeb4 <find_volume>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800bc18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d11f      	bne.n	800bc60 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	f107 030c 	add.w	r3, r7, #12
 800bc26:	4611      	mov	r1, r2
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7ff f837 	bl	800ac9c <follow_path>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800bc34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d111      	bne.n	800bc60 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800bc3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc40:	b25b      	sxtb	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	da03      	bge.n	800bc4e <f_stat+0x54>
				res = FR_INVALID_NAME;
 800bc46:	2306      	movs	r3, #6
 800bc48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bc4c:	e008      	b.n	800bc60 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d005      	beq.n	800bc60 <f_stat+0x66>
 800bc54:	f107 030c 	add.w	r3, r7, #12
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe ff2b 	bl	800aab6 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800bc60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3740      	adds	r7, #64	; 0x40
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b092      	sub	sp, #72	; 0x48
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bc78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bc7c:	f107 030c 	add.w	r3, r7, #12
 800bc80:	2200      	movs	r2, #0
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff f916 	bl	800aeb4 <find_volume>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800bc8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f040 8099 	bne.w	800bdca <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800bc98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	691a      	ldr	r2, [r3, #16]
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	3b02      	subs	r3, #2
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d804      	bhi.n	800bcb6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	691a      	ldr	r2, [r3, #16]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	e089      	b.n	800bdca <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800bcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d128      	bne.n	800bd14 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800bcca:	f107 0314 	add.w	r3, r7, #20
 800bcce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fe f9de 	bl	800a092 <get_fat>
 800bcd6:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcde:	d103      	bne.n	800bce8 <f_getfree+0x7c>
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bce6:	e063      	b.n	800bdb0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d103      	bne.n	800bcf6 <f_getfree+0x8a>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bcf4:	e05c      	b.n	800bdb0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800bcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d102      	bne.n	800bd02 <f_getfree+0x96>
 800bcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcfe:	3301      	adds	r3, #1
 800bd00:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800bd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd04:	3301      	adds	r3, #1
 800bd06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d3db      	bcc.n	800bcca <f_getfree+0x5e>
 800bd12:	e04d      	b.n	800bdb0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1c:	6a1b      	ldr	r3, [r3, #32]
 800bd1e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800bd20:	2300      	movs	r3, #0
 800bd22:	637b      	str	r3, [r7, #52]	; 0x34
 800bd24:	2300      	movs	r3, #0
 800bd26:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800bd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d113      	bne.n	800bd56 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800bd2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	63ba      	str	r2, [r7, #56]	; 0x38
 800bd36:	4619      	mov	r1, r3
 800bd38:	f7fe f8f0 	bl	8009f1c <move_window>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800bd42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d131      	bne.n	800bdae <f_getfree+0x142>
							p = fs->win;
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	3330      	adds	r3, #48	; 0x30
 800bd4e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800bd50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd54:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d10f      	bne.n	800bd7e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800bd5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd60:	f7fd fe2c 	bl	80099bc <ld_word>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d102      	bne.n	800bd70 <f_getfree+0x104>
 800bd6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	3302      	adds	r3, #2
 800bd74:	633b      	str	r3, [r7, #48]	; 0x30
 800bd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd78:	3b02      	subs	r3, #2
 800bd7a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd7c:	e010      	b.n	800bda0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800bd7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd80:	f7fd fe34 	bl	80099ec <ld_dword>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d102      	bne.n	800bd94 <f_getfree+0x128>
 800bd8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd90:	3301      	adds	r3, #1
 800bd92:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	3304      	adds	r3, #4
 800bd98:	633b      	str	r3, [r7, #48]	; 0x30
 800bd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9c:	3b04      	subs	r3, #4
 800bd9e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800bda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda2:	3b01      	subs	r3, #1
 800bda4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bda6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1bd      	bne.n	800bd28 <f_getfree+0xbc>
 800bdac:	e000      	b.n	800bdb0 <f_getfree+0x144>
							if (res != FR_OK) break;
 800bdae:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdb4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800bdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdba:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	791a      	ldrb	r2, [r3, #4]
 800bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc2:	f042 0201 	orr.w	r2, r2, #1
 800bdc6:	b2d2      	uxtb	r2, r2
 800bdc8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800bdca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3748      	adds	r7, #72	; 0x48
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b096      	sub	sp, #88	; 0x58
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800bdde:	f107 0108 	add.w	r1, r7, #8
 800bde2:	1d3b      	adds	r3, r7, #4
 800bde4:	2202      	movs	r2, #2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff f864 	bl	800aeb4 <find_volume>
 800bdec:	4603      	mov	r3, r0
 800bdee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800bdf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f040 80ec 	bne.w	800bfd8 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	f107 030c 	add.w	r3, r7, #12
 800be06:	4611      	mov	r1, r2
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fe ff47 	bl	800ac9c <follow_path>
 800be0e:	4603      	mov	r3, r0
 800be10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800be14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <f_mkdir+0x4c>
 800be1c:	2308      	movs	r3, #8
 800be1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800be22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be26:	2b04      	cmp	r3, #4
 800be28:	f040 80d6 	bne.w	800bfd8 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800be2c:	f107 030c 	add.w	r3, r7, #12
 800be30:	2100      	movs	r1, #0
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe fb26 	bl	800a484 <create_chain>
 800be38:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	895b      	ldrh	r3, [r3, #10]
 800be3e:	025b      	lsls	r3, r3, #9
 800be40:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800be48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d102      	bne.n	800be54 <f_mkdir+0x7e>
 800be4e:	2307      	movs	r3, #7
 800be50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800be54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be56:	2b01      	cmp	r3, #1
 800be58:	d102      	bne.n	800be60 <f_mkdir+0x8a>
 800be5a:	2302      	movs	r3, #2
 800be5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800be60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be66:	d102      	bne.n	800be6e <f_mkdir+0x98>
 800be68:	2301      	movs	r3, #1
 800be6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800be6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be72:	2b00      	cmp	r3, #0
 800be74:	d106      	bne.n	800be84 <f_mkdir+0xae>
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe f80b 	bl	8009e94 <sync_window>
 800be7e:	4603      	mov	r3, r0
 800be80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800be84:	f7fa fd00 	bl	8006888 <get_fattime>
 800be88:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800be8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d16a      	bne.n	800bf68 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be96:	4618      	mov	r0, r3
 800be98:	f7fe f8dc 	bl	800a054 <clust2sect>
 800be9c:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	3330      	adds	r3, #48	; 0x30
 800bea2:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800bea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bea8:	2100      	movs	r1, #0
 800beaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800beac:	f7fd fe29 	bl	8009b02 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800beb0:	220b      	movs	r2, #11
 800beb2:	2120      	movs	r1, #32
 800beb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800beb6:	f7fd fe24 	bl	8009b02 <mem_set>
					dir[DIR_Name] = '.';
 800beba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebc:	222e      	movs	r2, #46	; 0x2e
 800bebe:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec2:	330b      	adds	r3, #11
 800bec4:	2210      	movs	r2, #16
 800bec6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800bec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beca:	3316      	adds	r3, #22
 800becc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fd fdca 	bl	8009a68 <st_dword>
					st_clust(fs, dir, dcl);
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bed8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe fd44 	bl	800a968 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800bee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee2:	3320      	adds	r3, #32
 800bee4:	2220      	movs	r2, #32
 800bee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bee8:	4618      	mov	r0, r3
 800beea:	f7fd fde9 	bl	8009ac0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800beee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef0:	3321      	adds	r3, #33	; 0x21
 800bef2:	222e      	movs	r2, #46	; 0x2e
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b03      	cmp	r3, #3
 800bf00:	d106      	bne.n	800bf10 <f_mkdir+0x13a>
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d101      	bne.n	800bf10 <f_mkdir+0x13a>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800bf10:	68b8      	ldr	r0, [r7, #8]
 800bf12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf14:	3320      	adds	r3, #32
 800bf16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf18:	4619      	mov	r1, r3
 800bf1a:	f7fe fd25 	bl	800a968 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	895b      	ldrh	r3, [r3, #10]
 800bf22:	653b      	str	r3, [r7, #80]	; 0x50
 800bf24:	e01b      	b.n	800bf5e <f_mkdir+0x188>
					fs->winsect = dsc++;
 800bf26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2201      	movs	r2, #1
 800bf34:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7fd ffab 	bl	8009e94 <sync_window>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800bf44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10c      	bne.n	800bf66 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800bf4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf50:	2100      	movs	r1, #0
 800bf52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf54:	f7fd fdd5 	bl	8009b02 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800bf58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	653b      	str	r3, [r7, #80]	; 0x50
 800bf5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1e0      	bne.n	800bf26 <f_mkdir+0x150>
 800bf64:	e000      	b.n	800bf68 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800bf66:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800bf68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d107      	bne.n	800bf80 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800bf70:	f107 030c 	add.w	r3, r7, #12
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe fd6c 	bl	800aa52 <dir_register>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800bf80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d120      	bne.n	800bfca <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800bf8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf8e:	3316      	adds	r3, #22
 800bf90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fd fd68 	bl	8009a68 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe fce2 	bl	800a968 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800bfa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa6:	330b      	adds	r3, #11
 800bfa8:	2210      	movs	r2, #16
 800bfaa:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800bfb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10e      	bne.n	800bfd8 <f_mkdir+0x202>
					res = sync_fs(fs);
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fd ffdb 	bl	8009f78 <sync_fs>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bfc8:	e006      	b.n	800bfd8 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800bfca:	f107 030c 	add.w	r3, r7, #12
 800bfce:	2200      	movs	r2, #0
 800bfd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe f9f1 	bl	800a3ba <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800bfd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3758      	adds	r7, #88	; 0x58
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b087      	sub	sp, #28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	4613      	mov	r3, r2
 800bff0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bff2:	2301      	movs	r3, #1
 800bff4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bff6:	2300      	movs	r3, #0
 800bff8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bffa:	4b1f      	ldr	r3, [pc, #124]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800bffc:	7a5b      	ldrb	r3, [r3, #9]
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	2b00      	cmp	r3, #0
 800c002:	d131      	bne.n	800c068 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c004:	4b1c      	ldr	r3, [pc, #112]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c006:	7a5b      	ldrb	r3, [r3, #9]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	461a      	mov	r2, r3
 800c00c:	4b1a      	ldr	r3, [pc, #104]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c00e:	2100      	movs	r1, #0
 800c010:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c012:	4b19      	ldr	r3, [pc, #100]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c014:	7a5b      	ldrb	r3, [r3, #9]
 800c016:	b2db      	uxtb	r3, r3
 800c018:	4a17      	ldr	r2, [pc, #92]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c022:	4b15      	ldr	r3, [pc, #84]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c024:	7a5b      	ldrb	r3, [r3, #9]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	461a      	mov	r2, r3
 800c02a:	4b13      	ldr	r3, [pc, #76]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c02c:	4413      	add	r3, r2
 800c02e:	79fa      	ldrb	r2, [r7, #7]
 800c030:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c032:	4b11      	ldr	r3, [pc, #68]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c034:	7a5b      	ldrb	r3, [r3, #9]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	b2d1      	uxtb	r1, r2
 800c03c:	4a0e      	ldr	r2, [pc, #56]	; (800c078 <FATFS_LinkDriverEx+0x94>)
 800c03e:	7251      	strb	r1, [r2, #9]
 800c040:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c042:	7dbb      	ldrb	r3, [r7, #22]
 800c044:	3330      	adds	r3, #48	; 0x30
 800c046:	b2da      	uxtb	r2, r3
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	3301      	adds	r3, #1
 800c050:	223a      	movs	r2, #58	; 0x3a
 800c052:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	3302      	adds	r3, #2
 800c058:	222f      	movs	r2, #47	; 0x2f
 800c05a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	3303      	adds	r3, #3
 800c060:	2200      	movs	r2, #0
 800c062:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c068:	7dfb      	ldrb	r3, [r7, #23]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	371c      	adds	r7, #28
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	200000d8 	.word	0x200000d8

0800c07c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c086:	2200      	movs	r2, #0
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff ffaa 	bl	800bfe4 <FATFS_LinkDriverEx>
 800c090:	4603      	mov	r3, r0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
	...

0800c09c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	490e      	ldr	r1, [pc, #56]	; (800c0dc <MX_USB_HOST_Init+0x40>)
 800c0a4:	480e      	ldr	r0, [pc, #56]	; (800c0e0 <MX_USB_HOST_Init+0x44>)
 800c0a6:	f7fc f893 	bl	80081d0 <USBH_Init>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d001      	beq.n	800c0b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c0b0:	f7f5 f99e 	bl	80013f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c0b4:	490b      	ldr	r1, [pc, #44]	; (800c0e4 <MX_USB_HOST_Init+0x48>)
 800c0b6:	480a      	ldr	r0, [pc, #40]	; (800c0e0 <MX_USB_HOST_Init+0x44>)
 800c0b8:	f7fc f918 	bl	80082ec <USBH_RegisterClass>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c0c2:	f7f5 f995 	bl	80013f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c0c6:	4806      	ldr	r0, [pc, #24]	; (800c0e0 <MX_USB_HOST_Init+0x44>)
 800c0c8:	f7fc f99c 	bl	8008404 <USBH_Start>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c0d2:	f7f5 f98d 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c0d6:	bf00      	nop
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	0800c0fd 	.word	0x0800c0fd
 800c0e0:	20000660 	.word	0x20000660
 800c0e4:	2000000c 	.word	0x2000000c

0800c0e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c0ec:	4802      	ldr	r0, [pc, #8]	; (800c0f8 <MX_USB_HOST_Process+0x10>)
 800c0ee:	f7fc f999 	bl	8008424 <USBH_Process>
}
 800c0f2:	bf00      	nop
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000660 	.word	0x20000660

0800c0fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c108:	78fb      	ldrb	r3, [r7, #3]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	2b04      	cmp	r3, #4
 800c10e:	d841      	bhi.n	800c194 <USBH_UserProcess+0x98>
 800c110:	a201      	add	r2, pc, #4	; (adr r2, 800c118 <USBH_UserProcess+0x1c>)
 800c112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c116:	bf00      	nop
 800c118:	0800c195 	.word	0x0800c195
 800c11c:	0800c139 	.word	0x0800c139
 800c120:	0800c195 	.word	0x0800c195
 800c124:	0800c18d 	.word	0x0800c18d
 800c128:	0800c12d 	.word	0x0800c12d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c12c:	4b1c      	ldr	r3, [pc, #112]	; (800c1a0 <USBH_UserProcess+0xa4>)
 800c12e:	2203      	movs	r2, #3
 800c130:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800c132:	f7f4 fd5f 	bl	8000bf4 <Unmount_USB>
  break;
 800c136:	e02e      	b.n	800c196 <USBH_UserProcess+0x9a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c138:	4b19      	ldr	r3, [pc, #100]	; (800c1a0 <USBH_UserProcess+0xa4>)
 800c13a:	2202      	movs	r2, #2
 800c13c:	701a      	strb	r2, [r3, #0]

  Mount_USB();
 800c13e:	f7f4 fd37 	bl	8000bb0 <Mount_USB>

  Check_USB_Details();   // check space details
 800c142:	f7f4 ffef 	bl	8001124 <Check_USB_Details>

  //Scan_USB("/");   // scan for files and directories

  Create_File("/ROOTFILE.txt");
 800c146:	4817      	ldr	r0, [pc, #92]	; (800c1a4 <USBH_UserProcess+0xa8>)
 800c148:	f7f4 fe38 	bl	8000dbc <Create_File>
  Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 800c14c:	4916      	ldr	r1, [pc, #88]	; (800c1a8 <USBH_UserProcess+0xac>)
 800c14e:	4815      	ldr	r0, [pc, #84]	; (800c1a4 <USBH_UserProcess+0xa8>)
 800c150:	f7f4 fd70 	bl	8000c34 <Write_File>

  Create_Dir("/DIR1");
 800c154:	4815      	ldr	r0, [pc, #84]	; (800c1ac <USBH_UserProcess+0xb0>)
 800c156:	f7f4 ffa5 	bl	80010a4 <Create_Dir>
  Create_File("/DIR1/DIR1FILE.txt");
 800c15a:	4815      	ldr	r0, [pc, #84]	; (800c1b0 <USBH_UserProcess+0xb4>)
 800c15c:	f7f4 fe2e 	bl	8000dbc <Create_File>
  Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 800c160:	4914      	ldr	r1, [pc, #80]	; (800c1b4 <USBH_UserProcess+0xb8>)
 800c162:	4813      	ldr	r0, [pc, #76]	; (800c1b0 <USBH_UserProcess+0xb4>)
 800c164:	f7f4 fd66 	bl	8000c34 <Write_File>

  Create_Dir("/DIR2");
 800c168:	4813      	ldr	r0, [pc, #76]	; (800c1b8 <USBH_UserProcess+0xbc>)
 800c16a:	f7f4 ff9b 	bl	80010a4 <Create_Dir>
  Create_Dir("/DIR2/SUBDIR1");
 800c16e:	4813      	ldr	r0, [pc, #76]	; (800c1bc <USBH_UserProcess+0xc0>)
 800c170:	f7f4 ff98 	bl	80010a4 <Create_Dir>
  Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 800c174:	4812      	ldr	r0, [pc, #72]	; (800c1c0 <USBH_UserProcess+0xc4>)
 800c176:	f7f4 fe21 	bl	8000dbc <Create_File>
  Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 800c17a:	4912      	ldr	r1, [pc, #72]	; (800c1c4 <USBH_UserProcess+0xc8>)
 800c17c:	4810      	ldr	r0, [pc, #64]	; (800c1c0 <USBH_UserProcess+0xc4>)
 800c17e:	f7f4 fd59 	bl	8000c34 <Write_File>

  Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 800c182:	4911      	ldr	r1, [pc, #68]	; (800c1c8 <USBH_UserProcess+0xcc>)
 800c184:	4807      	ldr	r0, [pc, #28]	; (800c1a4 <USBH_UserProcess+0xa8>)
 800c186:	f7f4 feb5 	bl	8000ef4 <Update_File>
  break;
 800c18a:	e004      	b.n	800c196 <USBH_UserProcess+0x9a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c18c:	4b04      	ldr	r3, [pc, #16]	; (800c1a0 <USBH_UserProcess+0xa4>)
 800c18e:	2201      	movs	r2, #1
 800c190:	701a      	strb	r2, [r3, #0]
  break;
 800c192:	e000      	b.n	800c196 <USBH_UserProcess+0x9a>

  default:
  break;
 800c194:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c196:	bf00      	nop
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	200000e4 	.word	0x200000e4
 800c1a4:	0800d5d0 	.word	0x0800d5d0
 800c1a8:	0800d5e0 	.word	0x0800d5e0
 800c1ac:	0800d604 	.word	0x0800d604
 800c1b0:	0800d60c 	.word	0x0800d60c
 800c1b4:	0800d620 	.word	0x0800d620
 800c1b8:	0800d644 	.word	0x0800d644
 800c1bc:	0800d64c 	.word	0x0800d64c
 800c1c0:	0800d65c 	.word	0x0800d65c
 800c1c4:	0800d678 	.word	0x0800d678
 800c1c8:	0800d6dc 	.word	0x0800d6dc

0800c1cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b0ac      	sub	sp, #176	; 0xb0
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c1d8:	2200      	movs	r2, #0
 800c1da:	601a      	str	r2, [r3, #0]
 800c1dc:	605a      	str	r2, [r3, #4]
 800c1de:	609a      	str	r2, [r3, #8]
 800c1e0:	60da      	str	r2, [r3, #12]
 800c1e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c1e4:	f107 0314 	add.w	r3, r7, #20
 800c1e8:	2288      	movs	r2, #136	; 0x88
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f000 fb3f 	bl	800c870 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1fa:	d173      	bne.n	800c2e4 <HAL_HCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c1fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c200:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c202:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c206:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c20a:	2301      	movs	r3, #1
 800c20c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c20e:	2301      	movs	r3, #1
 800c210:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800c212:	2318      	movs	r3, #24
 800c214:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c216:	2307      	movs	r3, #7
 800c218:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c21a:	2302      	movs	r3, #2
 800c21c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c21e:	2302      	movs	r3, #2
 800c220:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c222:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c226:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c228:	f107 0314 	add.w	r3, r7, #20
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7f7 ffab 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 800c238:	f7f5 f8da 	bl	80013f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c23c:	4b2b      	ldr	r3, [pc, #172]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c240:	4a2a      	ldr	r2, [pc, #168]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c242:	f043 0301 	orr.w	r3, r3, #1
 800c246:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c248:	4b28      	ldr	r3, [pc, #160]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c24a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	613b      	str	r3, [r7, #16]
 800c252:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c254:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c25c:	2302      	movs	r3, #2
 800c25e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c262:	2300      	movs	r3, #0
 800c264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c268:	2303      	movs	r3, #3
 800c26a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c26e:	230a      	movs	r3, #10
 800c270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c274:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c278:	4619      	mov	r1, r3
 800c27a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c27e:	f7f5 fb85 	bl	800198c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c282:	4b1a      	ldr	r3, [pc, #104]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c286:	4a19      	ldr	r2, [pc, #100]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c28c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c28e:	4b17      	ldr	r3, [pc, #92]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c29a:	4b14      	ldr	r3, [pc, #80]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c29e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d114      	bne.n	800c2d0 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2a6:	4b11      	ldr	r3, [pc, #68]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2aa:	4a10      	ldr	r2, [pc, #64]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c2ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2b0:	6593      	str	r3, [r2, #88]	; 0x58
 800c2b2:	4b0e      	ldr	r3, [pc, #56]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ba:	60bb      	str	r3, [r7, #8]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800c2be:	f7f7 f935 	bl	800352c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2c2:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c2c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c6:	4a09      	ldr	r2, [pc, #36]	; (800c2ec <HAL_HCD_MspInit+0x120>)
 800c2c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2cc:	6593      	str	r3, [r2, #88]	; 0x58
 800c2ce:	e001      	b.n	800c2d4 <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c2d0:	f7f7 f92c 	bl	800352c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	2043      	movs	r0, #67	; 0x43
 800c2da:	f7f5 fb2d 	bl	8001938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c2de:	2043      	movs	r0, #67	; 0x43
 800c2e0:	f7f5 fb46 	bl	8001970 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c2e4:	bf00      	nop
 800c2e6:	37b0      	adds	r7, #176	; 0xb0
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	40021000 	.word	0x40021000

0800c2f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fc fc63 	bl	8008bca <USBH_LL_IncTimer>
}
 800c304:	bf00      	nop
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fc fc9b 	bl	8008c56 <USBH_LL_Connect>
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c336:	4618      	mov	r0, r3
 800c338:	f7fc fca4 	bl	8008c84 <USBH_LL_Disconnect>
}
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	460b      	mov	r3, r1
 800c34e:	70fb      	strb	r3, [r7, #3]
 800c350:	4613      	mov	r3, r2
 800c352:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c354:	bf00      	nop
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fc fc55 	bl	8008c1e <USBH_LL_PortEnabled>
}
 800c374:	bf00      	nop
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fc fc55 	bl	8008c3a <USBH_LL_PortDisabled>
}
 800c390:	bf00      	nop
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d12a      	bne.n	800c400 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c3aa:	4a18      	ldr	r2, [pc, #96]	; (800c40c <USBH_LL_Init+0x74>)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4a15      	ldr	r2, [pc, #84]	; (800c40c <USBH_LL_Init+0x74>)
 800c3b6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c3ba:	4b14      	ldr	r3, [pc, #80]	; (800c40c <USBH_LL_Init+0x74>)
 800c3bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c3c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c3c2:	4b12      	ldr	r3, [pc, #72]	; (800c40c <USBH_LL_Init+0x74>)
 800c3c4:	2208      	movs	r2, #8
 800c3c6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c3c8:	4b10      	ldr	r3, [pc, #64]	; (800c40c <USBH_LL_Init+0x74>)
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c3ce:	4b0f      	ldr	r3, [pc, #60]	; (800c40c <USBH_LL_Init+0x74>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c3d4:	4b0d      	ldr	r3, [pc, #52]	; (800c40c <USBH_LL_Init+0x74>)
 800c3d6:	2202      	movs	r2, #2
 800c3d8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c3da:	4b0c      	ldr	r3, [pc, #48]	; (800c40c <USBH_LL_Init+0x74>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c3e0:	480a      	ldr	r0, [pc, #40]	; (800c40c <USBH_LL_Init+0x74>)
 800c3e2:	f7f5 fc95 	bl	8001d10 <HAL_HCD_Init>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c3ec:	f7f5 f800 	bl	80013f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c3f0:	4806      	ldr	r0, [pc, #24]	; (800c40c <USBH_LL_Init+0x74>)
 800c3f2:	f7f6 f874 	bl	80024de <HAL_HCD_GetCurrentFrame>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7fc fbd6 	bl	8008bac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000a38 	.word	0x20000a38

0800c410 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c41c:	2300      	movs	r3, #0
 800c41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c426:	4618      	mov	r0, r3
 800c428:	f7f5 ffe3 	bl	80023f2 <HAL_HCD_Start>
 800c42c:	4603      	mov	r3, r0
 800c42e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c430:	7bfb      	ldrb	r3, [r7, #15]
 800c432:	4618      	mov	r0, r3
 800c434:	f000 f98c 	bl	800c750 <USBH_Get_USB_Status>
 800c438:	4603      	mov	r3, r0
 800c43a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c43c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7f5 ffeb 	bl	8002438 <HAL_HCD_Stop>
 800c462:	4603      	mov	r3, r0
 800c464:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 f971 	bl	800c750 <USBH_Get_USB_Status>
 800c46e:	4603      	mov	r3, r0
 800c470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c472:	7bbb      	ldrb	r3, [r7, #14]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c484:	2301      	movs	r3, #1
 800c486:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c48e:	4618      	mov	r0, r3
 800c490:	f7f6 f833 	bl	80024fa <HAL_HCD_GetCurrentSpeed>
 800c494:	4603      	mov	r3, r0
 800c496:	2b02      	cmp	r3, #2
 800c498:	d00c      	beq.n	800c4b4 <USBH_LL_GetSpeed+0x38>
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d80d      	bhi.n	800c4ba <USBH_LL_GetSpeed+0x3e>
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d002      	beq.n	800c4a8 <USBH_LL_GetSpeed+0x2c>
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d003      	beq.n	800c4ae <USBH_LL_GetSpeed+0x32>
 800c4a6:	e008      	b.n	800c4ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ac:	e008      	b.n	800c4c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b2:	e005      	b.n	800c4c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b8:	e002      	b.n	800c4c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4be:	bf00      	nop
  }
  return  speed;
 800c4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b084      	sub	sp, #16
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7f5 ffc6 	bl	8002472 <HAL_HCD_ResetPort>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 f92f 	bl	800c750 <USBH_Get_USB_Status>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	460b      	mov	r3, r1
 800c50a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c512:	78fa      	ldrb	r2, [r7, #3]
 800c514:	4611      	mov	r1, r2
 800c516:	4618      	mov	r0, r3
 800c518:	f7f5 ffcd 	bl	80024b6 <HAL_HCD_HC_GetXferCount>
 800c51c:	4603      	mov	r3, r0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c526:	b590      	push	{r4, r7, lr}
 800c528:	b089      	sub	sp, #36	; 0x24
 800c52a:	af04      	add	r7, sp, #16
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	4608      	mov	r0, r1
 800c530:	4611      	mov	r1, r2
 800c532:	461a      	mov	r2, r3
 800c534:	4603      	mov	r3, r0
 800c536:	70fb      	strb	r3, [r7, #3]
 800c538:	460b      	mov	r3, r1
 800c53a:	70bb      	strb	r3, [r7, #2]
 800c53c:	4613      	mov	r3, r2
 800c53e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c54e:	787c      	ldrb	r4, [r7, #1]
 800c550:	78ba      	ldrb	r2, [r7, #2]
 800c552:	78f9      	ldrb	r1, [r7, #3]
 800c554:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c556:	9302      	str	r3, [sp, #8]
 800c558:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	4623      	mov	r3, r4
 800c566:	f7f5 fc35 	bl	8001dd4 <HAL_HCD_HC_Init>
 800c56a:	4603      	mov	r3, r0
 800c56c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
 800c570:	4618      	mov	r0, r3
 800c572:	f000 f8ed 	bl	800c750 <USBH_Get_USB_Status>
 800c576:	4603      	mov	r3, r0
 800c578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	bd90      	pop	{r4, r7, pc}

0800c584 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c59e:	78fa      	ldrb	r2, [r7, #3]
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7f5 fca5 	bl	8001ef2 <HAL_HCD_HC_Halt>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 f8ce 	bl	800c750 <USBH_Get_USB_Status>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c5c2:	b590      	push	{r4, r7, lr}
 800c5c4:	b089      	sub	sp, #36	; 0x24
 800c5c6:	af04      	add	r7, sp, #16
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	4608      	mov	r0, r1
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	70fb      	strb	r3, [r7, #3]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	70bb      	strb	r3, [r7, #2]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c5ea:	787c      	ldrb	r4, [r7, #1]
 800c5ec:	78ba      	ldrb	r2, [r7, #2]
 800c5ee:	78f9      	ldrb	r1, [r7, #3]
 800c5f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5f4:	9303      	str	r3, [sp, #12]
 800c5f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c5f8:	9302      	str	r3, [sp, #8]
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	4623      	mov	r3, r4
 800c606:	f7f5 fc97 	bl	8001f38 <HAL_HCD_HC_SubmitRequest>
 800c60a:	4603      	mov	r3, r0
 800c60c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	4618      	mov	r0, r3
 800c612:	f000 f89d 	bl	800c750 <USBH_Get_USB_Status>
 800c616:	4603      	mov	r3, r0
 800c618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3714      	adds	r7, #20
 800c620:	46bd      	mov	sp, r7
 800c622:	bd90      	pop	{r4, r7, pc}

0800c624 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c636:	78fa      	ldrb	r2, [r7, #3]
 800c638:	4611      	mov	r1, r2
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7f5 ff27 	bl	800248e <HAL_HCD_HC_GetURBState>
 800c640:	4603      	mov	r3, r0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	460b      	mov	r3, r1
 800c654:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d103      	bne.n	800c668 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c660:	78fb      	ldrb	r3, [r7, #3]
 800c662:	4618      	mov	r0, r3
 800c664:	f000 f8a0 	bl	800c7a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c668:	20c8      	movs	r0, #200	; 0xc8
 800c66a:	f7f5 f889 	bl	8001780 <HAL_Delay>
  return USBH_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	70fb      	strb	r3, [r7, #3]
 800c684:	4613      	mov	r3, r2
 800c686:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c68e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c690:	78fb      	ldrb	r3, [r7, #3]
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	212c      	movs	r1, #44	; 0x2c
 800c696:	fb01 f303 	mul.w	r3, r1, r3
 800c69a:	4413      	add	r3, r2
 800c69c:	333b      	adds	r3, #59	; 0x3b
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d009      	beq.n	800c6b8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c6a4:	78fb      	ldrb	r3, [r7, #3]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	212c      	movs	r1, #44	; 0x2c
 800c6aa:	fb01 f303 	mul.w	r3, r1, r3
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3354      	adds	r3, #84	; 0x54
 800c6b2:	78ba      	ldrb	r2, [r7, #2]
 800c6b4:	701a      	strb	r2, [r3, #0]
 800c6b6:	e008      	b.n	800c6ca <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c6b8:	78fb      	ldrb	r3, [r7, #3]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	212c      	movs	r1, #44	; 0x2c
 800c6be:	fb01 f303 	mul.w	r3, r1, r3
 800c6c2:	4413      	add	r3, r2
 800c6c4:	3355      	adds	r3, #85	; 0x55
 800c6c6:	78ba      	ldrb	r2, [r7, #2]
 800c6c8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6ee:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800c6f0:	78fb      	ldrb	r3, [r7, #3]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	212c      	movs	r1, #44	; 0x2c
 800c6f6:	fb01 f303 	mul.w	r3, r1, r3
 800c6fa:	4413      	add	r3, r2
 800c6fc:	333b      	adds	r3, #59	; 0x3b
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d009      	beq.n	800c718 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800c704:	78fb      	ldrb	r3, [r7, #3]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	212c      	movs	r1, #44	; 0x2c
 800c70a:	fb01 f303 	mul.w	r3, r1, r3
 800c70e:	4413      	add	r3, r2
 800c710:	3354      	adds	r3, #84	; 0x54
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	73fb      	strb	r3, [r7, #15]
 800c716:	e008      	b.n	800c72a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c718:	78fb      	ldrb	r3, [r7, #3]
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	212c      	movs	r1, #44	; 0x2c
 800c71e:	fb01 f303 	mul.w	r3, r1, r3
 800c722:	4413      	add	r3, r2
 800c724:	3355      	adds	r3, #85	; 0x55
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7f5 f81d 	bl	8001780 <HAL_Delay>
}
 800c746:	bf00      	nop
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
	...

0800c750 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c75e:	79fb      	ldrb	r3, [r7, #7]
 800c760:	2b03      	cmp	r3, #3
 800c762:	d817      	bhi.n	800c794 <USBH_Get_USB_Status+0x44>
 800c764:	a201      	add	r2, pc, #4	; (adr r2, 800c76c <USBH_Get_USB_Status+0x1c>)
 800c766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76a:	bf00      	nop
 800c76c:	0800c77d 	.word	0x0800c77d
 800c770:	0800c783 	.word	0x0800c783
 800c774:	0800c789 	.word	0x0800c789
 800c778:	0800c78f 	.word	0x0800c78f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	73fb      	strb	r3, [r7, #15]
    break;
 800c780:	e00b      	b.n	800c79a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c782:	2302      	movs	r3, #2
 800c784:	73fb      	strb	r3, [r7, #15]
    break;
 800c786:	e008      	b.n	800c79a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c788:	2301      	movs	r3, #1
 800c78a:	73fb      	strb	r3, [r7, #15]
    break;
 800c78c:	e005      	b.n	800c79a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c78e:	2302      	movs	r3, #2
 800c790:	73fb      	strb	r3, [r7, #15]
    break;
 800c792:	e002      	b.n	800c79a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c794:	2302      	movs	r3, #2
 800c796:	73fb      	strb	r3, [r7, #15]
    break;
 800c798:	bf00      	nop
  }
  return usb_status;
 800c79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c7b6:	79fb      	ldrb	r3, [r7, #7]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d102      	bne.n	800c7c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	73fb      	strb	r3, [r7, #15]
 800c7c0:	e001      	b.n	800c7c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800c7c6:	7bfb      	ldrb	r3, [r7, #15]
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c7ce:	4803      	ldr	r0, [pc, #12]	; (800c7dc <MX_DriverVbusFS+0x34>)
 800c7d0:	f7f5 fa86 	bl	8001ce0 <HAL_GPIO_WritePin>
}
 800c7d4:	bf00      	nop
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	48000800 	.word	0x48000800

0800c7e0 <__errno>:
 800c7e0:	4b01      	ldr	r3, [pc, #4]	; (800c7e8 <__errno+0x8>)
 800c7e2:	6818      	ldr	r0, [r3, #0]
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	2000002c 	.word	0x2000002c

0800c7ec <__libc_init_array>:
 800c7ec:	b570      	push	{r4, r5, r6, lr}
 800c7ee:	4d0d      	ldr	r5, [pc, #52]	; (800c824 <__libc_init_array+0x38>)
 800c7f0:	4c0d      	ldr	r4, [pc, #52]	; (800c828 <__libc_init_array+0x3c>)
 800c7f2:	1b64      	subs	r4, r4, r5
 800c7f4:	10a4      	asrs	r4, r4, #2
 800c7f6:	2600      	movs	r6, #0
 800c7f8:	42a6      	cmp	r6, r4
 800c7fa:	d109      	bne.n	800c810 <__libc_init_array+0x24>
 800c7fc:	4d0b      	ldr	r5, [pc, #44]	; (800c82c <__libc_init_array+0x40>)
 800c7fe:	4c0c      	ldr	r4, [pc, #48]	; (800c830 <__libc_init_array+0x44>)
 800c800:	f000 fc5e 	bl	800d0c0 <_init>
 800c804:	1b64      	subs	r4, r4, r5
 800c806:	10a4      	asrs	r4, r4, #2
 800c808:	2600      	movs	r6, #0
 800c80a:	42a6      	cmp	r6, r4
 800c80c:	d105      	bne.n	800c81a <__libc_init_array+0x2e>
 800c80e:	bd70      	pop	{r4, r5, r6, pc}
 800c810:	f855 3b04 	ldr.w	r3, [r5], #4
 800c814:	4798      	blx	r3
 800c816:	3601      	adds	r6, #1
 800c818:	e7ee      	b.n	800c7f8 <__libc_init_array+0xc>
 800c81a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c81e:	4798      	blx	r3
 800c820:	3601      	adds	r6, #1
 800c822:	e7f2      	b.n	800c80a <__libc_init_array+0x1e>
 800c824:	0800d82c 	.word	0x0800d82c
 800c828:	0800d82c 	.word	0x0800d82c
 800c82c:	0800d82c 	.word	0x0800d82c
 800c830:	0800d830 	.word	0x0800d830

0800c834 <malloc>:
 800c834:	4b02      	ldr	r3, [pc, #8]	; (800c840 <malloc+0xc>)
 800c836:	4601      	mov	r1, r0
 800c838:	6818      	ldr	r0, [r3, #0]
 800c83a:	f000 b871 	b.w	800c920 <_malloc_r>
 800c83e:	bf00      	nop
 800c840:	2000002c 	.word	0x2000002c

0800c844 <free>:
 800c844:	4b02      	ldr	r3, [pc, #8]	; (800c850 <free+0xc>)
 800c846:	4601      	mov	r1, r0
 800c848:	6818      	ldr	r0, [r3, #0]
 800c84a:	f000 b819 	b.w	800c880 <_free_r>
 800c84e:	bf00      	nop
 800c850:	2000002c 	.word	0x2000002c

0800c854 <memcpy>:
 800c854:	440a      	add	r2, r1
 800c856:	4291      	cmp	r1, r2
 800c858:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c85c:	d100      	bne.n	800c860 <memcpy+0xc>
 800c85e:	4770      	bx	lr
 800c860:	b510      	push	{r4, lr}
 800c862:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c86a:	4291      	cmp	r1, r2
 800c86c:	d1f9      	bne.n	800c862 <memcpy+0xe>
 800c86e:	bd10      	pop	{r4, pc}

0800c870 <memset>:
 800c870:	4402      	add	r2, r0
 800c872:	4603      	mov	r3, r0
 800c874:	4293      	cmp	r3, r2
 800c876:	d100      	bne.n	800c87a <memset+0xa>
 800c878:	4770      	bx	lr
 800c87a:	f803 1b01 	strb.w	r1, [r3], #1
 800c87e:	e7f9      	b.n	800c874 <memset+0x4>

0800c880 <_free_r>:
 800c880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c882:	2900      	cmp	r1, #0
 800c884:	d048      	beq.n	800c918 <_free_r+0x98>
 800c886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c88a:	9001      	str	r0, [sp, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f1a1 0404 	sub.w	r4, r1, #4
 800c892:	bfb8      	it	lt
 800c894:	18e4      	addlt	r4, r4, r3
 800c896:	f000 f8cd 	bl	800ca34 <__malloc_lock>
 800c89a:	4a20      	ldr	r2, [pc, #128]	; (800c91c <_free_r+0x9c>)
 800c89c:	9801      	ldr	r0, [sp, #4]
 800c89e:	6813      	ldr	r3, [r2, #0]
 800c8a0:	4615      	mov	r5, r2
 800c8a2:	b933      	cbnz	r3, 800c8b2 <_free_r+0x32>
 800c8a4:	6063      	str	r3, [r4, #4]
 800c8a6:	6014      	str	r4, [r2, #0]
 800c8a8:	b003      	add	sp, #12
 800c8aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8ae:	f000 b8c7 	b.w	800ca40 <__malloc_unlock>
 800c8b2:	42a3      	cmp	r3, r4
 800c8b4:	d90b      	bls.n	800c8ce <_free_r+0x4e>
 800c8b6:	6821      	ldr	r1, [r4, #0]
 800c8b8:	1862      	adds	r2, r4, r1
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	bf04      	itt	eq
 800c8be:	681a      	ldreq	r2, [r3, #0]
 800c8c0:	685b      	ldreq	r3, [r3, #4]
 800c8c2:	6063      	str	r3, [r4, #4]
 800c8c4:	bf04      	itt	eq
 800c8c6:	1852      	addeq	r2, r2, r1
 800c8c8:	6022      	streq	r2, [r4, #0]
 800c8ca:	602c      	str	r4, [r5, #0]
 800c8cc:	e7ec      	b.n	800c8a8 <_free_r+0x28>
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	b10b      	cbz	r3, 800c8d8 <_free_r+0x58>
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	d9fa      	bls.n	800c8ce <_free_r+0x4e>
 800c8d8:	6811      	ldr	r1, [r2, #0]
 800c8da:	1855      	adds	r5, r2, r1
 800c8dc:	42a5      	cmp	r5, r4
 800c8de:	d10b      	bne.n	800c8f8 <_free_r+0x78>
 800c8e0:	6824      	ldr	r4, [r4, #0]
 800c8e2:	4421      	add	r1, r4
 800c8e4:	1854      	adds	r4, r2, r1
 800c8e6:	42a3      	cmp	r3, r4
 800c8e8:	6011      	str	r1, [r2, #0]
 800c8ea:	d1dd      	bne.n	800c8a8 <_free_r+0x28>
 800c8ec:	681c      	ldr	r4, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	6053      	str	r3, [r2, #4]
 800c8f2:	4421      	add	r1, r4
 800c8f4:	6011      	str	r1, [r2, #0]
 800c8f6:	e7d7      	b.n	800c8a8 <_free_r+0x28>
 800c8f8:	d902      	bls.n	800c900 <_free_r+0x80>
 800c8fa:	230c      	movs	r3, #12
 800c8fc:	6003      	str	r3, [r0, #0]
 800c8fe:	e7d3      	b.n	800c8a8 <_free_r+0x28>
 800c900:	6825      	ldr	r5, [r4, #0]
 800c902:	1961      	adds	r1, r4, r5
 800c904:	428b      	cmp	r3, r1
 800c906:	bf04      	itt	eq
 800c908:	6819      	ldreq	r1, [r3, #0]
 800c90a:	685b      	ldreq	r3, [r3, #4]
 800c90c:	6063      	str	r3, [r4, #4]
 800c90e:	bf04      	itt	eq
 800c910:	1949      	addeq	r1, r1, r5
 800c912:	6021      	streq	r1, [r4, #0]
 800c914:	6054      	str	r4, [r2, #4]
 800c916:	e7c7      	b.n	800c8a8 <_free_r+0x28>
 800c918:	b003      	add	sp, #12
 800c91a:	bd30      	pop	{r4, r5, pc}
 800c91c:	200000e8 	.word	0x200000e8

0800c920 <_malloc_r>:
 800c920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c922:	1ccd      	adds	r5, r1, #3
 800c924:	f025 0503 	bic.w	r5, r5, #3
 800c928:	3508      	adds	r5, #8
 800c92a:	2d0c      	cmp	r5, #12
 800c92c:	bf38      	it	cc
 800c92e:	250c      	movcc	r5, #12
 800c930:	2d00      	cmp	r5, #0
 800c932:	4606      	mov	r6, r0
 800c934:	db01      	blt.n	800c93a <_malloc_r+0x1a>
 800c936:	42a9      	cmp	r1, r5
 800c938:	d903      	bls.n	800c942 <_malloc_r+0x22>
 800c93a:	230c      	movs	r3, #12
 800c93c:	6033      	str	r3, [r6, #0]
 800c93e:	2000      	movs	r0, #0
 800c940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c942:	f000 f877 	bl	800ca34 <__malloc_lock>
 800c946:	4921      	ldr	r1, [pc, #132]	; (800c9cc <_malloc_r+0xac>)
 800c948:	680a      	ldr	r2, [r1, #0]
 800c94a:	4614      	mov	r4, r2
 800c94c:	b99c      	cbnz	r4, 800c976 <_malloc_r+0x56>
 800c94e:	4f20      	ldr	r7, [pc, #128]	; (800c9d0 <_malloc_r+0xb0>)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	b923      	cbnz	r3, 800c95e <_malloc_r+0x3e>
 800c954:	4621      	mov	r1, r4
 800c956:	4630      	mov	r0, r6
 800c958:	f000 f83c 	bl	800c9d4 <_sbrk_r>
 800c95c:	6038      	str	r0, [r7, #0]
 800c95e:	4629      	mov	r1, r5
 800c960:	4630      	mov	r0, r6
 800c962:	f000 f837 	bl	800c9d4 <_sbrk_r>
 800c966:	1c43      	adds	r3, r0, #1
 800c968:	d123      	bne.n	800c9b2 <_malloc_r+0x92>
 800c96a:	230c      	movs	r3, #12
 800c96c:	6033      	str	r3, [r6, #0]
 800c96e:	4630      	mov	r0, r6
 800c970:	f000 f866 	bl	800ca40 <__malloc_unlock>
 800c974:	e7e3      	b.n	800c93e <_malloc_r+0x1e>
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	1b5b      	subs	r3, r3, r5
 800c97a:	d417      	bmi.n	800c9ac <_malloc_r+0x8c>
 800c97c:	2b0b      	cmp	r3, #11
 800c97e:	d903      	bls.n	800c988 <_malloc_r+0x68>
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	441c      	add	r4, r3
 800c984:	6025      	str	r5, [r4, #0]
 800c986:	e004      	b.n	800c992 <_malloc_r+0x72>
 800c988:	6863      	ldr	r3, [r4, #4]
 800c98a:	42a2      	cmp	r2, r4
 800c98c:	bf0c      	ite	eq
 800c98e:	600b      	streq	r3, [r1, #0]
 800c990:	6053      	strne	r3, [r2, #4]
 800c992:	4630      	mov	r0, r6
 800c994:	f000 f854 	bl	800ca40 <__malloc_unlock>
 800c998:	f104 000b 	add.w	r0, r4, #11
 800c99c:	1d23      	adds	r3, r4, #4
 800c99e:	f020 0007 	bic.w	r0, r0, #7
 800c9a2:	1ac2      	subs	r2, r0, r3
 800c9a4:	d0cc      	beq.n	800c940 <_malloc_r+0x20>
 800c9a6:	1a1b      	subs	r3, r3, r0
 800c9a8:	50a3      	str	r3, [r4, r2]
 800c9aa:	e7c9      	b.n	800c940 <_malloc_r+0x20>
 800c9ac:	4622      	mov	r2, r4
 800c9ae:	6864      	ldr	r4, [r4, #4]
 800c9b0:	e7cc      	b.n	800c94c <_malloc_r+0x2c>
 800c9b2:	1cc4      	adds	r4, r0, #3
 800c9b4:	f024 0403 	bic.w	r4, r4, #3
 800c9b8:	42a0      	cmp	r0, r4
 800c9ba:	d0e3      	beq.n	800c984 <_malloc_r+0x64>
 800c9bc:	1a21      	subs	r1, r4, r0
 800c9be:	4630      	mov	r0, r6
 800c9c0:	f000 f808 	bl	800c9d4 <_sbrk_r>
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	d1dd      	bne.n	800c984 <_malloc_r+0x64>
 800c9c8:	e7cf      	b.n	800c96a <_malloc_r+0x4a>
 800c9ca:	bf00      	nop
 800c9cc:	200000e8 	.word	0x200000e8
 800c9d0:	200000ec 	.word	0x200000ec

0800c9d4 <_sbrk_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4d06      	ldr	r5, [pc, #24]	; (800c9f0 <_sbrk_r+0x1c>)
 800c9d8:	2300      	movs	r3, #0
 800c9da:	4604      	mov	r4, r0
 800c9dc:	4608      	mov	r0, r1
 800c9de:	602b      	str	r3, [r5, #0]
 800c9e0:	f7f4 fe24 	bl	800162c <_sbrk>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d102      	bne.n	800c9ee <_sbrk_r+0x1a>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	b103      	cbz	r3, 800c9ee <_sbrk_r+0x1a>
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	20000d3c 	.word	0x20000d3c

0800c9f4 <siprintf>:
 800c9f4:	b40e      	push	{r1, r2, r3}
 800c9f6:	b500      	push	{lr}
 800c9f8:	b09c      	sub	sp, #112	; 0x70
 800c9fa:	ab1d      	add	r3, sp, #116	; 0x74
 800c9fc:	9002      	str	r0, [sp, #8]
 800c9fe:	9006      	str	r0, [sp, #24]
 800ca00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca04:	4809      	ldr	r0, [pc, #36]	; (800ca2c <siprintf+0x38>)
 800ca06:	9107      	str	r1, [sp, #28]
 800ca08:	9104      	str	r1, [sp, #16]
 800ca0a:	4909      	ldr	r1, [pc, #36]	; (800ca30 <siprintf+0x3c>)
 800ca0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca10:	9105      	str	r1, [sp, #20]
 800ca12:	6800      	ldr	r0, [r0, #0]
 800ca14:	9301      	str	r3, [sp, #4]
 800ca16:	a902      	add	r1, sp, #8
 800ca18:	f000 f874 	bl	800cb04 <_svfiprintf_r>
 800ca1c:	9b02      	ldr	r3, [sp, #8]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	701a      	strb	r2, [r3, #0]
 800ca22:	b01c      	add	sp, #112	; 0x70
 800ca24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca28:	b003      	add	sp, #12
 800ca2a:	4770      	bx	lr
 800ca2c:	2000002c 	.word	0x2000002c
 800ca30:	ffff0208 	.word	0xffff0208

0800ca34 <__malloc_lock>:
 800ca34:	4801      	ldr	r0, [pc, #4]	; (800ca3c <__malloc_lock+0x8>)
 800ca36:	f000 baf9 	b.w	800d02c <__retarget_lock_acquire_recursive>
 800ca3a:	bf00      	nop
 800ca3c:	20000d44 	.word	0x20000d44

0800ca40 <__malloc_unlock>:
 800ca40:	4801      	ldr	r0, [pc, #4]	; (800ca48 <__malloc_unlock+0x8>)
 800ca42:	f000 baf4 	b.w	800d02e <__retarget_lock_release_recursive>
 800ca46:	bf00      	nop
 800ca48:	20000d44 	.word	0x20000d44

0800ca4c <__ssputs_r>:
 800ca4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca50:	688e      	ldr	r6, [r1, #8]
 800ca52:	429e      	cmp	r6, r3
 800ca54:	4682      	mov	sl, r0
 800ca56:	460c      	mov	r4, r1
 800ca58:	4690      	mov	r8, r2
 800ca5a:	461f      	mov	r7, r3
 800ca5c:	d838      	bhi.n	800cad0 <__ssputs_r+0x84>
 800ca5e:	898a      	ldrh	r2, [r1, #12]
 800ca60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca64:	d032      	beq.n	800cacc <__ssputs_r+0x80>
 800ca66:	6825      	ldr	r5, [r4, #0]
 800ca68:	6909      	ldr	r1, [r1, #16]
 800ca6a:	eba5 0901 	sub.w	r9, r5, r1
 800ca6e:	6965      	ldr	r5, [r4, #20]
 800ca70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca78:	3301      	adds	r3, #1
 800ca7a:	444b      	add	r3, r9
 800ca7c:	106d      	asrs	r5, r5, #1
 800ca7e:	429d      	cmp	r5, r3
 800ca80:	bf38      	it	cc
 800ca82:	461d      	movcc	r5, r3
 800ca84:	0553      	lsls	r3, r2, #21
 800ca86:	d531      	bpl.n	800caec <__ssputs_r+0xa0>
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7ff ff49 	bl	800c920 <_malloc_r>
 800ca8e:	4606      	mov	r6, r0
 800ca90:	b950      	cbnz	r0, 800caa8 <__ssputs_r+0x5c>
 800ca92:	230c      	movs	r3, #12
 800ca94:	f8ca 3000 	str.w	r3, [sl]
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca9e:	81a3      	strh	r3, [r4, #12]
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa8:	6921      	ldr	r1, [r4, #16]
 800caaa:	464a      	mov	r2, r9
 800caac:	f7ff fed2 	bl	800c854 <memcpy>
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	6126      	str	r6, [r4, #16]
 800cabe:	6165      	str	r5, [r4, #20]
 800cac0:	444e      	add	r6, r9
 800cac2:	eba5 0509 	sub.w	r5, r5, r9
 800cac6:	6026      	str	r6, [r4, #0]
 800cac8:	60a5      	str	r5, [r4, #8]
 800caca:	463e      	mov	r6, r7
 800cacc:	42be      	cmp	r6, r7
 800cace:	d900      	bls.n	800cad2 <__ssputs_r+0x86>
 800cad0:	463e      	mov	r6, r7
 800cad2:	4632      	mov	r2, r6
 800cad4:	6820      	ldr	r0, [r4, #0]
 800cad6:	4641      	mov	r1, r8
 800cad8:	f000 faaa 	bl	800d030 <memmove>
 800cadc:	68a3      	ldr	r3, [r4, #8]
 800cade:	6822      	ldr	r2, [r4, #0]
 800cae0:	1b9b      	subs	r3, r3, r6
 800cae2:	4432      	add	r2, r6
 800cae4:	60a3      	str	r3, [r4, #8]
 800cae6:	6022      	str	r2, [r4, #0]
 800cae8:	2000      	movs	r0, #0
 800caea:	e7db      	b.n	800caa4 <__ssputs_r+0x58>
 800caec:	462a      	mov	r2, r5
 800caee:	f000 fab9 	bl	800d064 <_realloc_r>
 800caf2:	4606      	mov	r6, r0
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d1e1      	bne.n	800cabc <__ssputs_r+0x70>
 800caf8:	6921      	ldr	r1, [r4, #16]
 800cafa:	4650      	mov	r0, sl
 800cafc:	f7ff fec0 	bl	800c880 <_free_r>
 800cb00:	e7c7      	b.n	800ca92 <__ssputs_r+0x46>
	...

0800cb04 <_svfiprintf_r>:
 800cb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb08:	4698      	mov	r8, r3
 800cb0a:	898b      	ldrh	r3, [r1, #12]
 800cb0c:	061b      	lsls	r3, r3, #24
 800cb0e:	b09d      	sub	sp, #116	; 0x74
 800cb10:	4607      	mov	r7, r0
 800cb12:	460d      	mov	r5, r1
 800cb14:	4614      	mov	r4, r2
 800cb16:	d50e      	bpl.n	800cb36 <_svfiprintf_r+0x32>
 800cb18:	690b      	ldr	r3, [r1, #16]
 800cb1a:	b963      	cbnz	r3, 800cb36 <_svfiprintf_r+0x32>
 800cb1c:	2140      	movs	r1, #64	; 0x40
 800cb1e:	f7ff feff 	bl	800c920 <_malloc_r>
 800cb22:	6028      	str	r0, [r5, #0]
 800cb24:	6128      	str	r0, [r5, #16]
 800cb26:	b920      	cbnz	r0, 800cb32 <_svfiprintf_r+0x2e>
 800cb28:	230c      	movs	r3, #12
 800cb2a:	603b      	str	r3, [r7, #0]
 800cb2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb30:	e0d1      	b.n	800ccd6 <_svfiprintf_r+0x1d2>
 800cb32:	2340      	movs	r3, #64	; 0x40
 800cb34:	616b      	str	r3, [r5, #20]
 800cb36:	2300      	movs	r3, #0
 800cb38:	9309      	str	r3, [sp, #36]	; 0x24
 800cb3a:	2320      	movs	r3, #32
 800cb3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb40:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb44:	2330      	movs	r3, #48	; 0x30
 800cb46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ccf0 <_svfiprintf_r+0x1ec>
 800cb4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb4e:	f04f 0901 	mov.w	r9, #1
 800cb52:	4623      	mov	r3, r4
 800cb54:	469a      	mov	sl, r3
 800cb56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb5a:	b10a      	cbz	r2, 800cb60 <_svfiprintf_r+0x5c>
 800cb5c:	2a25      	cmp	r2, #37	; 0x25
 800cb5e:	d1f9      	bne.n	800cb54 <_svfiprintf_r+0x50>
 800cb60:	ebba 0b04 	subs.w	fp, sl, r4
 800cb64:	d00b      	beq.n	800cb7e <_svfiprintf_r+0x7a>
 800cb66:	465b      	mov	r3, fp
 800cb68:	4622      	mov	r2, r4
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	f7ff ff6d 	bl	800ca4c <__ssputs_r>
 800cb72:	3001      	adds	r0, #1
 800cb74:	f000 80aa 	beq.w	800cccc <_svfiprintf_r+0x1c8>
 800cb78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb7a:	445a      	add	r2, fp
 800cb7c:	9209      	str	r2, [sp, #36]	; 0x24
 800cb7e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f000 80a2 	beq.w	800cccc <_svfiprintf_r+0x1c8>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb92:	f10a 0a01 	add.w	sl, sl, #1
 800cb96:	9304      	str	r3, [sp, #16]
 800cb98:	9307      	str	r3, [sp, #28]
 800cb9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb9e:	931a      	str	r3, [sp, #104]	; 0x68
 800cba0:	4654      	mov	r4, sl
 800cba2:	2205      	movs	r2, #5
 800cba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba8:	4851      	ldr	r0, [pc, #324]	; (800ccf0 <_svfiprintf_r+0x1ec>)
 800cbaa:	f7f3 fb19 	bl	80001e0 <memchr>
 800cbae:	9a04      	ldr	r2, [sp, #16]
 800cbb0:	b9d8      	cbnz	r0, 800cbea <_svfiprintf_r+0xe6>
 800cbb2:	06d0      	lsls	r0, r2, #27
 800cbb4:	bf44      	itt	mi
 800cbb6:	2320      	movmi	r3, #32
 800cbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbbc:	0711      	lsls	r1, r2, #28
 800cbbe:	bf44      	itt	mi
 800cbc0:	232b      	movmi	r3, #43	; 0x2b
 800cbc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbc6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbca:	2b2a      	cmp	r3, #42	; 0x2a
 800cbcc:	d015      	beq.n	800cbfa <_svfiprintf_r+0xf6>
 800cbce:	9a07      	ldr	r2, [sp, #28]
 800cbd0:	4654      	mov	r4, sl
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	f04f 0c0a 	mov.w	ip, #10
 800cbd8:	4621      	mov	r1, r4
 800cbda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbde:	3b30      	subs	r3, #48	; 0x30
 800cbe0:	2b09      	cmp	r3, #9
 800cbe2:	d94e      	bls.n	800cc82 <_svfiprintf_r+0x17e>
 800cbe4:	b1b0      	cbz	r0, 800cc14 <_svfiprintf_r+0x110>
 800cbe6:	9207      	str	r2, [sp, #28]
 800cbe8:	e014      	b.n	800cc14 <_svfiprintf_r+0x110>
 800cbea:	eba0 0308 	sub.w	r3, r0, r8
 800cbee:	fa09 f303 	lsl.w	r3, r9, r3
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	9304      	str	r3, [sp, #16]
 800cbf6:	46a2      	mov	sl, r4
 800cbf8:	e7d2      	b.n	800cba0 <_svfiprintf_r+0x9c>
 800cbfa:	9b03      	ldr	r3, [sp, #12]
 800cbfc:	1d19      	adds	r1, r3, #4
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	9103      	str	r1, [sp, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	bfbb      	ittet	lt
 800cc06:	425b      	neglt	r3, r3
 800cc08:	f042 0202 	orrlt.w	r2, r2, #2
 800cc0c:	9307      	strge	r3, [sp, #28]
 800cc0e:	9307      	strlt	r3, [sp, #28]
 800cc10:	bfb8      	it	lt
 800cc12:	9204      	strlt	r2, [sp, #16]
 800cc14:	7823      	ldrb	r3, [r4, #0]
 800cc16:	2b2e      	cmp	r3, #46	; 0x2e
 800cc18:	d10c      	bne.n	800cc34 <_svfiprintf_r+0x130>
 800cc1a:	7863      	ldrb	r3, [r4, #1]
 800cc1c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc1e:	d135      	bne.n	800cc8c <_svfiprintf_r+0x188>
 800cc20:	9b03      	ldr	r3, [sp, #12]
 800cc22:	1d1a      	adds	r2, r3, #4
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	9203      	str	r2, [sp, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	bfb8      	it	lt
 800cc2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cc30:	3402      	adds	r4, #2
 800cc32:	9305      	str	r3, [sp, #20]
 800cc34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd00 <_svfiprintf_r+0x1fc>
 800cc38:	7821      	ldrb	r1, [r4, #0]
 800cc3a:	2203      	movs	r2, #3
 800cc3c:	4650      	mov	r0, sl
 800cc3e:	f7f3 facf 	bl	80001e0 <memchr>
 800cc42:	b140      	cbz	r0, 800cc56 <_svfiprintf_r+0x152>
 800cc44:	2340      	movs	r3, #64	; 0x40
 800cc46:	eba0 000a 	sub.w	r0, r0, sl
 800cc4a:	fa03 f000 	lsl.w	r0, r3, r0
 800cc4e:	9b04      	ldr	r3, [sp, #16]
 800cc50:	4303      	orrs	r3, r0
 800cc52:	3401      	adds	r4, #1
 800cc54:	9304      	str	r3, [sp, #16]
 800cc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc5a:	4826      	ldr	r0, [pc, #152]	; (800ccf4 <_svfiprintf_r+0x1f0>)
 800cc5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc60:	2206      	movs	r2, #6
 800cc62:	f7f3 fabd 	bl	80001e0 <memchr>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d038      	beq.n	800ccdc <_svfiprintf_r+0x1d8>
 800cc6a:	4b23      	ldr	r3, [pc, #140]	; (800ccf8 <_svfiprintf_r+0x1f4>)
 800cc6c:	bb1b      	cbnz	r3, 800ccb6 <_svfiprintf_r+0x1b2>
 800cc6e:	9b03      	ldr	r3, [sp, #12]
 800cc70:	3307      	adds	r3, #7
 800cc72:	f023 0307 	bic.w	r3, r3, #7
 800cc76:	3308      	adds	r3, #8
 800cc78:	9303      	str	r3, [sp, #12]
 800cc7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc7c:	4433      	add	r3, r6
 800cc7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc80:	e767      	b.n	800cb52 <_svfiprintf_r+0x4e>
 800cc82:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc86:	460c      	mov	r4, r1
 800cc88:	2001      	movs	r0, #1
 800cc8a:	e7a5      	b.n	800cbd8 <_svfiprintf_r+0xd4>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	3401      	adds	r4, #1
 800cc90:	9305      	str	r3, [sp, #20]
 800cc92:	4619      	mov	r1, r3
 800cc94:	f04f 0c0a 	mov.w	ip, #10
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc9e:	3a30      	subs	r2, #48	; 0x30
 800cca0:	2a09      	cmp	r2, #9
 800cca2:	d903      	bls.n	800ccac <_svfiprintf_r+0x1a8>
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d0c5      	beq.n	800cc34 <_svfiprintf_r+0x130>
 800cca8:	9105      	str	r1, [sp, #20]
 800ccaa:	e7c3      	b.n	800cc34 <_svfiprintf_r+0x130>
 800ccac:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e7f0      	b.n	800cc98 <_svfiprintf_r+0x194>
 800ccb6:	ab03      	add	r3, sp, #12
 800ccb8:	9300      	str	r3, [sp, #0]
 800ccba:	462a      	mov	r2, r5
 800ccbc:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <_svfiprintf_r+0x1f8>)
 800ccbe:	a904      	add	r1, sp, #16
 800ccc0:	4638      	mov	r0, r7
 800ccc2:	f3af 8000 	nop.w
 800ccc6:	1c42      	adds	r2, r0, #1
 800ccc8:	4606      	mov	r6, r0
 800ccca:	d1d6      	bne.n	800cc7a <_svfiprintf_r+0x176>
 800cccc:	89ab      	ldrh	r3, [r5, #12]
 800ccce:	065b      	lsls	r3, r3, #25
 800ccd0:	f53f af2c 	bmi.w	800cb2c <_svfiprintf_r+0x28>
 800ccd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccd6:	b01d      	add	sp, #116	; 0x74
 800ccd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccdc:	ab03      	add	r3, sp, #12
 800ccde:	9300      	str	r3, [sp, #0]
 800cce0:	462a      	mov	r2, r5
 800cce2:	4b06      	ldr	r3, [pc, #24]	; (800ccfc <_svfiprintf_r+0x1f8>)
 800cce4:	a904      	add	r1, sp, #16
 800cce6:	4638      	mov	r0, r7
 800cce8:	f000 f87a 	bl	800cde0 <_printf_i>
 800ccec:	e7eb      	b.n	800ccc6 <_svfiprintf_r+0x1c2>
 800ccee:	bf00      	nop
 800ccf0:	0800d7f0 	.word	0x0800d7f0
 800ccf4:	0800d7fa 	.word	0x0800d7fa
 800ccf8:	00000000 	.word	0x00000000
 800ccfc:	0800ca4d 	.word	0x0800ca4d
 800cd00:	0800d7f6 	.word	0x0800d7f6

0800cd04 <_printf_common>:
 800cd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd08:	4616      	mov	r6, r2
 800cd0a:	4699      	mov	r9, r3
 800cd0c:	688a      	ldr	r2, [r1, #8]
 800cd0e:	690b      	ldr	r3, [r1, #16]
 800cd10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd14:	4293      	cmp	r3, r2
 800cd16:	bfb8      	it	lt
 800cd18:	4613      	movlt	r3, r2
 800cd1a:	6033      	str	r3, [r6, #0]
 800cd1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd20:	4607      	mov	r7, r0
 800cd22:	460c      	mov	r4, r1
 800cd24:	b10a      	cbz	r2, 800cd2a <_printf_common+0x26>
 800cd26:	3301      	adds	r3, #1
 800cd28:	6033      	str	r3, [r6, #0]
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	0699      	lsls	r1, r3, #26
 800cd2e:	bf42      	ittt	mi
 800cd30:	6833      	ldrmi	r3, [r6, #0]
 800cd32:	3302      	addmi	r3, #2
 800cd34:	6033      	strmi	r3, [r6, #0]
 800cd36:	6825      	ldr	r5, [r4, #0]
 800cd38:	f015 0506 	ands.w	r5, r5, #6
 800cd3c:	d106      	bne.n	800cd4c <_printf_common+0x48>
 800cd3e:	f104 0a19 	add.w	sl, r4, #25
 800cd42:	68e3      	ldr	r3, [r4, #12]
 800cd44:	6832      	ldr	r2, [r6, #0]
 800cd46:	1a9b      	subs	r3, r3, r2
 800cd48:	42ab      	cmp	r3, r5
 800cd4a:	dc26      	bgt.n	800cd9a <_printf_common+0x96>
 800cd4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd50:	1e13      	subs	r3, r2, #0
 800cd52:	6822      	ldr	r2, [r4, #0]
 800cd54:	bf18      	it	ne
 800cd56:	2301      	movne	r3, #1
 800cd58:	0692      	lsls	r2, r2, #26
 800cd5a:	d42b      	bmi.n	800cdb4 <_printf_common+0xb0>
 800cd5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd60:	4649      	mov	r1, r9
 800cd62:	4638      	mov	r0, r7
 800cd64:	47c0      	blx	r8
 800cd66:	3001      	adds	r0, #1
 800cd68:	d01e      	beq.n	800cda8 <_printf_common+0xa4>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	68e5      	ldr	r5, [r4, #12]
 800cd6e:	6832      	ldr	r2, [r6, #0]
 800cd70:	f003 0306 	and.w	r3, r3, #6
 800cd74:	2b04      	cmp	r3, #4
 800cd76:	bf08      	it	eq
 800cd78:	1aad      	subeq	r5, r5, r2
 800cd7a:	68a3      	ldr	r3, [r4, #8]
 800cd7c:	6922      	ldr	r2, [r4, #16]
 800cd7e:	bf0c      	ite	eq
 800cd80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd84:	2500      	movne	r5, #0
 800cd86:	4293      	cmp	r3, r2
 800cd88:	bfc4      	itt	gt
 800cd8a:	1a9b      	subgt	r3, r3, r2
 800cd8c:	18ed      	addgt	r5, r5, r3
 800cd8e:	2600      	movs	r6, #0
 800cd90:	341a      	adds	r4, #26
 800cd92:	42b5      	cmp	r5, r6
 800cd94:	d11a      	bne.n	800cdcc <_printf_common+0xc8>
 800cd96:	2000      	movs	r0, #0
 800cd98:	e008      	b.n	800cdac <_printf_common+0xa8>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	4652      	mov	r2, sl
 800cd9e:	4649      	mov	r1, r9
 800cda0:	4638      	mov	r0, r7
 800cda2:	47c0      	blx	r8
 800cda4:	3001      	adds	r0, #1
 800cda6:	d103      	bne.n	800cdb0 <_printf_common+0xac>
 800cda8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdb0:	3501      	adds	r5, #1
 800cdb2:	e7c6      	b.n	800cd42 <_printf_common+0x3e>
 800cdb4:	18e1      	adds	r1, r4, r3
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	2030      	movs	r0, #48	; 0x30
 800cdba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdbe:	4422      	add	r2, r4
 800cdc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdc8:	3302      	adds	r3, #2
 800cdca:	e7c7      	b.n	800cd5c <_printf_common+0x58>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	4622      	mov	r2, r4
 800cdd0:	4649      	mov	r1, r9
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	47c0      	blx	r8
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	d0e6      	beq.n	800cda8 <_printf_common+0xa4>
 800cdda:	3601      	adds	r6, #1
 800cddc:	e7d9      	b.n	800cd92 <_printf_common+0x8e>
	...

0800cde0 <_printf_i>:
 800cde0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cde4:	460c      	mov	r4, r1
 800cde6:	4691      	mov	r9, r2
 800cde8:	7e27      	ldrb	r7, [r4, #24]
 800cdea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cdec:	2f78      	cmp	r7, #120	; 0x78
 800cdee:	4680      	mov	r8, r0
 800cdf0:	469a      	mov	sl, r3
 800cdf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdf6:	d807      	bhi.n	800ce08 <_printf_i+0x28>
 800cdf8:	2f62      	cmp	r7, #98	; 0x62
 800cdfa:	d80a      	bhi.n	800ce12 <_printf_i+0x32>
 800cdfc:	2f00      	cmp	r7, #0
 800cdfe:	f000 80d8 	beq.w	800cfb2 <_printf_i+0x1d2>
 800ce02:	2f58      	cmp	r7, #88	; 0x58
 800ce04:	f000 80a3 	beq.w	800cf4e <_printf_i+0x16e>
 800ce08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce10:	e03a      	b.n	800ce88 <_printf_i+0xa8>
 800ce12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce16:	2b15      	cmp	r3, #21
 800ce18:	d8f6      	bhi.n	800ce08 <_printf_i+0x28>
 800ce1a:	a001      	add	r0, pc, #4	; (adr r0, 800ce20 <_printf_i+0x40>)
 800ce1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ce20:	0800ce79 	.word	0x0800ce79
 800ce24:	0800ce8d 	.word	0x0800ce8d
 800ce28:	0800ce09 	.word	0x0800ce09
 800ce2c:	0800ce09 	.word	0x0800ce09
 800ce30:	0800ce09 	.word	0x0800ce09
 800ce34:	0800ce09 	.word	0x0800ce09
 800ce38:	0800ce8d 	.word	0x0800ce8d
 800ce3c:	0800ce09 	.word	0x0800ce09
 800ce40:	0800ce09 	.word	0x0800ce09
 800ce44:	0800ce09 	.word	0x0800ce09
 800ce48:	0800ce09 	.word	0x0800ce09
 800ce4c:	0800cf99 	.word	0x0800cf99
 800ce50:	0800cebd 	.word	0x0800cebd
 800ce54:	0800cf7b 	.word	0x0800cf7b
 800ce58:	0800ce09 	.word	0x0800ce09
 800ce5c:	0800ce09 	.word	0x0800ce09
 800ce60:	0800cfbb 	.word	0x0800cfbb
 800ce64:	0800ce09 	.word	0x0800ce09
 800ce68:	0800cebd 	.word	0x0800cebd
 800ce6c:	0800ce09 	.word	0x0800ce09
 800ce70:	0800ce09 	.word	0x0800ce09
 800ce74:	0800cf83 	.word	0x0800cf83
 800ce78:	680b      	ldr	r3, [r1, #0]
 800ce7a:	1d1a      	adds	r2, r3, #4
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	600a      	str	r2, [r1, #0]
 800ce80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e0a3      	b.n	800cfd4 <_printf_i+0x1f4>
 800ce8c:	6825      	ldr	r5, [r4, #0]
 800ce8e:	6808      	ldr	r0, [r1, #0]
 800ce90:	062e      	lsls	r6, r5, #24
 800ce92:	f100 0304 	add.w	r3, r0, #4
 800ce96:	d50a      	bpl.n	800ceae <_printf_i+0xce>
 800ce98:	6805      	ldr	r5, [r0, #0]
 800ce9a:	600b      	str	r3, [r1, #0]
 800ce9c:	2d00      	cmp	r5, #0
 800ce9e:	da03      	bge.n	800cea8 <_printf_i+0xc8>
 800cea0:	232d      	movs	r3, #45	; 0x2d
 800cea2:	426d      	negs	r5, r5
 800cea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cea8:	485e      	ldr	r0, [pc, #376]	; (800d024 <_printf_i+0x244>)
 800ceaa:	230a      	movs	r3, #10
 800ceac:	e019      	b.n	800cee2 <_printf_i+0x102>
 800ceae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ceb2:	6805      	ldr	r5, [r0, #0]
 800ceb4:	600b      	str	r3, [r1, #0]
 800ceb6:	bf18      	it	ne
 800ceb8:	b22d      	sxthne	r5, r5
 800ceba:	e7ef      	b.n	800ce9c <_printf_i+0xbc>
 800cebc:	680b      	ldr	r3, [r1, #0]
 800cebe:	6825      	ldr	r5, [r4, #0]
 800cec0:	1d18      	adds	r0, r3, #4
 800cec2:	6008      	str	r0, [r1, #0]
 800cec4:	0628      	lsls	r0, r5, #24
 800cec6:	d501      	bpl.n	800cecc <_printf_i+0xec>
 800cec8:	681d      	ldr	r5, [r3, #0]
 800ceca:	e002      	b.n	800ced2 <_printf_i+0xf2>
 800cecc:	0669      	lsls	r1, r5, #25
 800cece:	d5fb      	bpl.n	800cec8 <_printf_i+0xe8>
 800ced0:	881d      	ldrh	r5, [r3, #0]
 800ced2:	4854      	ldr	r0, [pc, #336]	; (800d024 <_printf_i+0x244>)
 800ced4:	2f6f      	cmp	r7, #111	; 0x6f
 800ced6:	bf0c      	ite	eq
 800ced8:	2308      	moveq	r3, #8
 800ceda:	230a      	movne	r3, #10
 800cedc:	2100      	movs	r1, #0
 800cede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cee2:	6866      	ldr	r6, [r4, #4]
 800cee4:	60a6      	str	r6, [r4, #8]
 800cee6:	2e00      	cmp	r6, #0
 800cee8:	bfa2      	ittt	ge
 800ceea:	6821      	ldrge	r1, [r4, #0]
 800ceec:	f021 0104 	bicge.w	r1, r1, #4
 800cef0:	6021      	strge	r1, [r4, #0]
 800cef2:	b90d      	cbnz	r5, 800cef8 <_printf_i+0x118>
 800cef4:	2e00      	cmp	r6, #0
 800cef6:	d04d      	beq.n	800cf94 <_printf_i+0x1b4>
 800cef8:	4616      	mov	r6, r2
 800cefa:	fbb5 f1f3 	udiv	r1, r5, r3
 800cefe:	fb03 5711 	mls	r7, r3, r1, r5
 800cf02:	5dc7      	ldrb	r7, [r0, r7]
 800cf04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf08:	462f      	mov	r7, r5
 800cf0a:	42bb      	cmp	r3, r7
 800cf0c:	460d      	mov	r5, r1
 800cf0e:	d9f4      	bls.n	800cefa <_printf_i+0x11a>
 800cf10:	2b08      	cmp	r3, #8
 800cf12:	d10b      	bne.n	800cf2c <_printf_i+0x14c>
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	07df      	lsls	r7, r3, #31
 800cf18:	d508      	bpl.n	800cf2c <_printf_i+0x14c>
 800cf1a:	6923      	ldr	r3, [r4, #16]
 800cf1c:	6861      	ldr	r1, [r4, #4]
 800cf1e:	4299      	cmp	r1, r3
 800cf20:	bfde      	ittt	le
 800cf22:	2330      	movle	r3, #48	; 0x30
 800cf24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf28:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800cf2c:	1b92      	subs	r2, r2, r6
 800cf2e:	6122      	str	r2, [r4, #16]
 800cf30:	f8cd a000 	str.w	sl, [sp]
 800cf34:	464b      	mov	r3, r9
 800cf36:	aa03      	add	r2, sp, #12
 800cf38:	4621      	mov	r1, r4
 800cf3a:	4640      	mov	r0, r8
 800cf3c:	f7ff fee2 	bl	800cd04 <_printf_common>
 800cf40:	3001      	adds	r0, #1
 800cf42:	d14c      	bne.n	800cfde <_printf_i+0x1fe>
 800cf44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf48:	b004      	add	sp, #16
 800cf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf4e:	4835      	ldr	r0, [pc, #212]	; (800d024 <_printf_i+0x244>)
 800cf50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf54:	6823      	ldr	r3, [r4, #0]
 800cf56:	680e      	ldr	r6, [r1, #0]
 800cf58:	061f      	lsls	r7, r3, #24
 800cf5a:	f856 5b04 	ldr.w	r5, [r6], #4
 800cf5e:	600e      	str	r6, [r1, #0]
 800cf60:	d514      	bpl.n	800cf8c <_printf_i+0x1ac>
 800cf62:	07d9      	lsls	r1, r3, #31
 800cf64:	bf44      	itt	mi
 800cf66:	f043 0320 	orrmi.w	r3, r3, #32
 800cf6a:	6023      	strmi	r3, [r4, #0]
 800cf6c:	b91d      	cbnz	r5, 800cf76 <_printf_i+0x196>
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	f023 0320 	bic.w	r3, r3, #32
 800cf74:	6023      	str	r3, [r4, #0]
 800cf76:	2310      	movs	r3, #16
 800cf78:	e7b0      	b.n	800cedc <_printf_i+0xfc>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	f043 0320 	orr.w	r3, r3, #32
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	2378      	movs	r3, #120	; 0x78
 800cf84:	4828      	ldr	r0, [pc, #160]	; (800d028 <_printf_i+0x248>)
 800cf86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf8a:	e7e3      	b.n	800cf54 <_printf_i+0x174>
 800cf8c:	065e      	lsls	r6, r3, #25
 800cf8e:	bf48      	it	mi
 800cf90:	b2ad      	uxthmi	r5, r5
 800cf92:	e7e6      	b.n	800cf62 <_printf_i+0x182>
 800cf94:	4616      	mov	r6, r2
 800cf96:	e7bb      	b.n	800cf10 <_printf_i+0x130>
 800cf98:	680b      	ldr	r3, [r1, #0]
 800cf9a:	6826      	ldr	r6, [r4, #0]
 800cf9c:	6960      	ldr	r0, [r4, #20]
 800cf9e:	1d1d      	adds	r5, r3, #4
 800cfa0:	600d      	str	r5, [r1, #0]
 800cfa2:	0635      	lsls	r5, r6, #24
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	d501      	bpl.n	800cfac <_printf_i+0x1cc>
 800cfa8:	6018      	str	r0, [r3, #0]
 800cfaa:	e002      	b.n	800cfb2 <_printf_i+0x1d2>
 800cfac:	0671      	lsls	r1, r6, #25
 800cfae:	d5fb      	bpl.n	800cfa8 <_printf_i+0x1c8>
 800cfb0:	8018      	strh	r0, [r3, #0]
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	6123      	str	r3, [r4, #16]
 800cfb6:	4616      	mov	r6, r2
 800cfb8:	e7ba      	b.n	800cf30 <_printf_i+0x150>
 800cfba:	680b      	ldr	r3, [r1, #0]
 800cfbc:	1d1a      	adds	r2, r3, #4
 800cfbe:	600a      	str	r2, [r1, #0]
 800cfc0:	681e      	ldr	r6, [r3, #0]
 800cfc2:	6862      	ldr	r2, [r4, #4]
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f7f3 f90a 	bl	80001e0 <memchr>
 800cfcc:	b108      	cbz	r0, 800cfd2 <_printf_i+0x1f2>
 800cfce:	1b80      	subs	r0, r0, r6
 800cfd0:	6060      	str	r0, [r4, #4]
 800cfd2:	6863      	ldr	r3, [r4, #4]
 800cfd4:	6123      	str	r3, [r4, #16]
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfdc:	e7a8      	b.n	800cf30 <_printf_i+0x150>
 800cfde:	6923      	ldr	r3, [r4, #16]
 800cfe0:	4632      	mov	r2, r6
 800cfe2:	4649      	mov	r1, r9
 800cfe4:	4640      	mov	r0, r8
 800cfe6:	47d0      	blx	sl
 800cfe8:	3001      	adds	r0, #1
 800cfea:	d0ab      	beq.n	800cf44 <_printf_i+0x164>
 800cfec:	6823      	ldr	r3, [r4, #0]
 800cfee:	079b      	lsls	r3, r3, #30
 800cff0:	d413      	bmi.n	800d01a <_printf_i+0x23a>
 800cff2:	68e0      	ldr	r0, [r4, #12]
 800cff4:	9b03      	ldr	r3, [sp, #12]
 800cff6:	4298      	cmp	r0, r3
 800cff8:	bfb8      	it	lt
 800cffa:	4618      	movlt	r0, r3
 800cffc:	e7a4      	b.n	800cf48 <_printf_i+0x168>
 800cffe:	2301      	movs	r3, #1
 800d000:	4632      	mov	r2, r6
 800d002:	4649      	mov	r1, r9
 800d004:	4640      	mov	r0, r8
 800d006:	47d0      	blx	sl
 800d008:	3001      	adds	r0, #1
 800d00a:	d09b      	beq.n	800cf44 <_printf_i+0x164>
 800d00c:	3501      	adds	r5, #1
 800d00e:	68e3      	ldr	r3, [r4, #12]
 800d010:	9903      	ldr	r1, [sp, #12]
 800d012:	1a5b      	subs	r3, r3, r1
 800d014:	42ab      	cmp	r3, r5
 800d016:	dcf2      	bgt.n	800cffe <_printf_i+0x21e>
 800d018:	e7eb      	b.n	800cff2 <_printf_i+0x212>
 800d01a:	2500      	movs	r5, #0
 800d01c:	f104 0619 	add.w	r6, r4, #25
 800d020:	e7f5      	b.n	800d00e <_printf_i+0x22e>
 800d022:	bf00      	nop
 800d024:	0800d801 	.word	0x0800d801
 800d028:	0800d812 	.word	0x0800d812

0800d02c <__retarget_lock_acquire_recursive>:
 800d02c:	4770      	bx	lr

0800d02e <__retarget_lock_release_recursive>:
 800d02e:	4770      	bx	lr

0800d030 <memmove>:
 800d030:	4288      	cmp	r0, r1
 800d032:	b510      	push	{r4, lr}
 800d034:	eb01 0402 	add.w	r4, r1, r2
 800d038:	d902      	bls.n	800d040 <memmove+0x10>
 800d03a:	4284      	cmp	r4, r0
 800d03c:	4623      	mov	r3, r4
 800d03e:	d807      	bhi.n	800d050 <memmove+0x20>
 800d040:	1e43      	subs	r3, r0, #1
 800d042:	42a1      	cmp	r1, r4
 800d044:	d008      	beq.n	800d058 <memmove+0x28>
 800d046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d04a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d04e:	e7f8      	b.n	800d042 <memmove+0x12>
 800d050:	4402      	add	r2, r0
 800d052:	4601      	mov	r1, r0
 800d054:	428a      	cmp	r2, r1
 800d056:	d100      	bne.n	800d05a <memmove+0x2a>
 800d058:	bd10      	pop	{r4, pc}
 800d05a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d05e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d062:	e7f7      	b.n	800d054 <memmove+0x24>

0800d064 <_realloc_r>:
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	4607      	mov	r7, r0
 800d068:	4614      	mov	r4, r2
 800d06a:	460e      	mov	r6, r1
 800d06c:	b921      	cbnz	r1, 800d078 <_realloc_r+0x14>
 800d06e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d072:	4611      	mov	r1, r2
 800d074:	f7ff bc54 	b.w	800c920 <_malloc_r>
 800d078:	b922      	cbnz	r2, 800d084 <_realloc_r+0x20>
 800d07a:	f7ff fc01 	bl	800c880 <_free_r>
 800d07e:	4625      	mov	r5, r4
 800d080:	4628      	mov	r0, r5
 800d082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d084:	f000 f814 	bl	800d0b0 <_malloc_usable_size_r>
 800d088:	42a0      	cmp	r0, r4
 800d08a:	d20f      	bcs.n	800d0ac <_realloc_r+0x48>
 800d08c:	4621      	mov	r1, r4
 800d08e:	4638      	mov	r0, r7
 800d090:	f7ff fc46 	bl	800c920 <_malloc_r>
 800d094:	4605      	mov	r5, r0
 800d096:	2800      	cmp	r0, #0
 800d098:	d0f2      	beq.n	800d080 <_realloc_r+0x1c>
 800d09a:	4631      	mov	r1, r6
 800d09c:	4622      	mov	r2, r4
 800d09e:	f7ff fbd9 	bl	800c854 <memcpy>
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f7ff fbeb 	bl	800c880 <_free_r>
 800d0aa:	e7e9      	b.n	800d080 <_realloc_r+0x1c>
 800d0ac:	4635      	mov	r5, r6
 800d0ae:	e7e7      	b.n	800d080 <_realloc_r+0x1c>

0800d0b0 <_malloc_usable_size_r>:
 800d0b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0b4:	1f18      	subs	r0, r3, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	bfbc      	itt	lt
 800d0ba:	580b      	ldrlt	r3, [r1, r0]
 800d0bc:	18c0      	addlt	r0, r0, r3
 800d0be:	4770      	bx	lr

0800d0c0 <_init>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	bf00      	nop
 800d0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c6:	bc08      	pop	{r3}
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	4770      	bx	lr

0800d0cc <_fini>:
 800d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ce:	bf00      	nop
 800d0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d2:	bc08      	pop	{r3}
 800d0d4:	469e      	mov	lr, r3
 800d0d6:	4770      	bx	lr
